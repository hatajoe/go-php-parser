//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1242

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s\n%s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e, l.l.Src())
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	69, 371,
	139, 371,
	153, 371,
	158, 371,
	-2, 366,
	-1, 44,
	160, 374,
	-2, 383,
	-1, 80,
	69, 373,
	139, 373,
	153, 373,
	158, 373,
	160, 376,
	-2, 361,
	-1, 103,
	153, 334,
	-2, 363,
	-1, 209,
	69, 371,
	139, 371,
	153, 371,
	158, 371,
	-2, 260,
	-1, 212,
	160, 376,
	-2, 373,
	-1, 215,
	69, 371,
	139, 371,
	153, 371,
	158, 371,
	-2, 262,
	-1, 312,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 284,
	-1, 313,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 285,
	-1, 314,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 286,
	-1, 315,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 287,
	-1, 316,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 288,
	-1, 317,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 289,
	-1, 318,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 290,
	-1, 319,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 291,
	-1, 320,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 292,
	-1, 327,
	9, 131,
	161, 131,
	-2, 371,
	-1, 373,
	9, 411,
	161, 411,
	163, 411,
	-2, 371,
	-1, 377,
	69, 372,
	139, 372,
	153, 372,
	158, 372,
	160, 375,
	-2, 294,
	-1, 391,
	160, 397,
	-2, 364,
	-1, 392,
	160, 399,
	-2, 389,
	-1, 471,
	160, 397,
	-2, 365,
	-1, 472,
	160, 399,
	-2, 390,
	-1, 517,
	161, 181,
	-2, 186,
	-1, 529,
	69, 371,
	139, 371,
	153, 371,
	158, 371,
	-2, 245,
	-1, 542,
	160, 375,
	-2, 372,
	-1, 583,
	161, 181,
	-2, 186,
	-1, 588,
	15, 151,
	161, 151,
	-2, 371,
	-1, 598,
	161, 181,
	-2, 186,
	-1, 623,
	9, 410,
	161, 410,
	163, 410,
	-2, 371,
	-1, 644,
	15, 152,
	161, 152,
	-2, 371,
	-1, 664,
	120, 217,
	-2, 214,
	-1, 697,
	15, 154,
	161, 154,
	-2, 345,
}

const yyPrivate = 57344

const yyLast = 6149

var yyAct = [...]int{

	23, 110, 766, 113, 762, 336, 32, 710, 746, 692,
	612, 603, 103, 734, 702, 666, 601, 117, 117, 117,
	587, 280, 131, 491, 126, 604, 272, 481, 524, 4,
	166, 519, 330, 326, 637, 599, 203, 201, 365, 338,
	112, 127, 130, 747, 123, 235, 390, 382, 379, 205,
	208, 76, 101, 216, 217, 218, 219, 220, 263, 107,
	221, 222, 223, 224, 225, 226, 227, 697, 230, 80,
	774, 238, 239, 240, 742, 721, 39, 630, 626, 116,
	556, 543, 531, 370, 799, 251, 252, 294, 254, 255,
	780, 755, 290, 288, 247, 366, 101, 120, 121, 101,
	730, 234, 210, 210, 786, 724, 718, 683, 677, 640,
	236, 237, 277, 643, 32, 282, 283, 638, 636, 585,
	212, 212, 126, 499, 487, 346, 571, 209, 215, 566,
	512, 334, 102, 286, 295, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	285, 322, 324, 265, 328, 213, 510, 332, 367, 269,
	284, 261, 247, 781, 119, 101, 102, 729, 728, 102,
	340, 719, 348, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 716, 701, 362, 117, 364,
	691, 205, 686, 687, 344, 737, 722, 653, 625, 75,
	573, 544, 375, 535, 210, 205, 78, 670, 671, 672,
	669, 668, 667, 773, 686, 687, 699, 741, 645, 124,
	117, 624, 212, 598, 583, 264, 589, 385, 369, 327,
	293, 476, 117, 108, 109, 289, 287, 723, 553, 717,
	482, 483, 376, 517, 484, 102, 785, 498, 210, 642,
	374, 345, 488, 343, 266, 492, 253, 205, 591, 685,
	665, 250, 249, 229, 200, 213, 212, 363, 570, 196,
	244, 565, 513, 373, 119, 101, 391, 471, 106, 210,
	470, 248, 164, 505, 163, 131, 162, 504, 245, 214,
	770, 582, 115, 474, 494, 114, 213, 212, 111, 378,
	554, 478, 262, 794, 387, 119, 101, 793, 509, 106,
	784, 389, 197, 783, 508, 479, 707, 700, 496, 659,
	477, 613, 503, 502, 380, 381, 32, 506, 552, 590,
	105, 516, 522, 165, 526, 605, 527, 523, 706, 528,
	267, 268, 521, 108, 109, 525, 475, 235, 380, 211,
	381, 381, 380, 243, 119, 102, 119, 242, 534, 248,
	520, 105, 205, 538, 339, 205, 245, 518, 670, 671,
	672, 669, 668, 667, 108, 109, 342, 703, 712, 555,
	211, 41, 199, 235, 558, 382, 102, 383, 235, 278,
	119, 210, 670, 671, 672, 669, 668, 667, 537, 368,
	128, 198, 541, 670, 671, 672, 669, 668, 667, 212,
	606, 607, 236, 237, 533, 235, 529, 382, 581, 73,
	74, 665, 169, 108, 109, 108, 109, 650, 651, 235,
	321, 256, 233, 41, 235, 627, 260, 548, 235, 557,
	232, 760, 392, 472, 787, 665, 606, 607, 236, 237,
	711, 740, 485, 236, 237, 738, 665, 384, 128, 108,
	109, 768, 725, 686, 687, 331, 550, 117, 562, 689,
	686, 687, 546, 549, 119, 714, 171, 495, 547, 486,
	236, 237, 337, 335, 572, 175, 660, 174, 124, 577,
	282, 579, 759, 257, 236, 237, 173, 167, 584, 236,
	237, 176, 177, 236, 237, 596, 241, 563, 145, 159,
	767, 578, 656, 170, 575, 610, 178, 180, 179, 559,
	608, 145, 32, 525, 42, 735, 676, 622, 347, 168,
	594, 775, 258, 259, 586, 592, 279, 769, 621, 611,
	609, 744, 536, 514, 628, 292, 561, 618, 614, 291,
	654, 500, 210, 210, 371, 663, 705, 482, 172, 144,
	146, 147, 492, 159, 276, 655, 275, 8, 634, 7,
	212, 212, 395, 274, 396, 145, 6, 327, 588, 33,
	273, 210, 205, 5, 632, 633, 608, 647, 664, 662,
	202, 204, 648, 670, 671, 672, 669, 668, 667, 212,
	745, 608, 765, 473, 281, 658, 623, 639, 608, 641,
	490, 678, 679, 600, 673, 205, 122, 674, 125, 646,
	329, 657, 37, 10, 652, 709, 731, 282, 32, 325,
	129, 210, 675, 231, 480, 661, 205, 580, 38, 11,
	574, 32, 748, 597, 2, 545, 246, 45, 684, 212,
	44, 104, 680, 46, 695, 79, 644, 608, 77, 693,
	708, 704, 68, 688, 228, 690, 58, 57, 715, 40,
	713, 602, 32, 696, 649, 560, 593, 720, 368, 564,
	270, 341, 3, 1, 0, 210, 727, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 726, 0, 0, 0,
	0, 0, 732, 212, 0, 0, 736, 743, 739, 32,
	588, 0, 0, 753, 754, 142, 143, 141, 144, 146,
	147, 32, 159, 0, 0, 0, 0, 32, 758, 0,
	756, 764, 0, 0, 145, 772, 749, 763, 608, 0,
	771, 0, 776, 777, 778, 693, 0, 32, 32, 0,
	0, 779, 0, 0, 0, 84, 85, 86, 87, 88,
	788, 0, 0, 782, 70, 71, 791, 72, 789, 0,
	32, 32, 32, 790, 0, 795, 796, 0, 0, 797,
	0, 0, 0, 0, 0, 800, 801, 798, 0, 32,
	32, 0, 0, 0, 32, 32, 0, 806, 807, 808,
	52, 53, 0, 0, 0, 0, 54, 0, 55, 50,
	51, 59, 60, 61, 62, 63, 64, 65, 67, 0,
	48, 81, 49, 0, 0, 0, 0, 20, 73, 74,
	0, 0, 0, 21, 89, 90, 31, 101, 22, 0,
	106, 0, 0, 91, 92, 93, 98, 94, 95, 96,
	97, 66, 43, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	41, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 82, 83, 0, 34, 35, 36, 0, 0,
	0, 47, 105, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 108, 109, 0, 0, 9,
	805, 56, 0, 27, 136, 69, 100, 102, 84, 85,
	86, 87, 88, 0, 0, 0, 0, 70, 71, 0,
	72, 0, 160, 0, 161, 133, 134, 138, 140, 139,
	152, 153, 150, 151, 158, 154, 155, 156, 157, 148,
	149, 142, 143, 141, 144, 146, 147, 0, 159, 0,
	0, 0, 0, 52, 53, 0, 0, 0, 0, 54,
	145, 55, 50, 51, 59, 60, 61, 62, 63, 64,
	65, 67, 0, 48, 81, 49, 0, 0, 0, 0,
	20, 73, 74, 0, 0, 0, 21, 89, 90, 31,
	101, 22, 0, 106, 0, 0, 91, 92, 93, 98,
	94, 95, 96, 97, 66, 43, 13, 12, 0, 14,
	0, 25, 0, 26, 0, 0, 15, 0, 0, 0,
	16, 17, 30, 41, 0, 18, 28, 0, 0, 29,
	0, 0, 19, 0, 24, 82, 83, 0, 34, 35,
	36, 0, 0, 0, 47, 105, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 108, 109,
	0, 0, 9, 804, 56, 0, 27, 388, 69, 100,
	102, 84, 85, 86, 87, 88, 0, 0, 0, 0,
	70, 71, 160, 72, 161, 133, 134, 138, 140, 139,
	152, 153, 150, 151, 158, 154, 155, 156, 157, 148,
	149, 142, 143, 141, 144, 146, 147, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 52, 53, 0, 0,
	145, 0, 54, 0, 55, 50, 51, 59, 60, 61,
	62, 63, 64, 65, 67, 0, 48, 81, 49, 0,
	0, 0, 0, 20, 73, 74, 0, 0, 0, 21,
	89, 90, 31, 101, 22, 0, 106, 0, 0, 91,
	92, 93, 98, 94, 95, 96, 97, 66, 43, 13,
	12, 0, 14, 0, 25, 0, 26, 0, 0, 15,
	0, 0, 0, 16, 17, 30, 41, 0, 18, 28,
	0, 0, 29, 0, 0, 19, 0, 24, 82, 83,
	0, 34, 35, 36, 0, 0, 0, 47, 105, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 108, 109, 0, 0, 9, 803, 56, 0, 27,
	0, 69, 100, 102, 84, 85, 86, 87, 88, 0,
	0, 0, 0, 70, 71, 160, 72, 161, 133, 134,
	138, 140, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 52,
	53, 0, 0, 145, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 20, 73, 74, 0,
	0, 0, 21, 89, 90, 31, 101, 22, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 43, 13, 12, 0, 14, 0, 25, 0, 26,
	0, 0, 15, 0, 0, 0, 16, 17, 30, 41,
	0, 18, 28, 0, 0, 29, 0, 0, 19, 0,
	24, 82, 83, 0, 34, 35, 36, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 0, 0, 9, 802,
	56, 0, 27, 0, 69, 100, 102, 84, 85, 86,
	87, 88, 0, 0, 0, 0, 70, 71, 0, 72,
	161, 133, 134, 138, 140, 139, 152, 153, 150, 151,
	158, 154, 155, 156, 157, 148, 149, 142, 143, 141,
	144, 146, 147, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 52, 53, 0, 0, 145, 0, 54, 0,
	55, 50, 51, 59, 60, 61, 62, 63, 64, 65,
	67, 0, 48, 81, 49, 0, 0, 0, 0, 20,
	73, 74, 0, 0, 0, 21, 89, 90, 31, 101,
	22, 0, 106, 0, 0, 91, 92, 93, 98, 94,
	95, 96, 97, 66, 43, 13, 12, 0, 14, 792,
	25, 0, 26, 0, 0, 15, 0, 0, 0, 16,
	17, 30, 41, 0, 18, 28, 0, 0, 29, 0,
	0, 19, 0, 24, 82, 83, 0, 34, 35, 36,
	0, 0, 0, 47, 105, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 108, 109, 0,
	0, 9, 0, 56, 0, 27, 0, 69, 100, 102,
	84, 85, 86, 87, 88, 0, 0, 0, 0, 70,
	71, 0, 72, 134, 138, 140, 139, 152, 153, 150,
	151, 158, 154, 155, 156, 157, 148, 149, 142, 143,
	141, 144, 146, 147, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 53, 145, 0, 0,
	0, 54, 0, 55, 50, 51, 59, 60, 61, 62,
	63, 64, 65, 67, 0, 48, 81, 49, 0, 0,
	0, 0, 20, 73, 74, 0, 0, 0, 21, 89,
	90, 31, 101, 22, 0, 106, 0, 0, 91, 92,
	93, 98, 94, 95, 96, 97, 66, 43, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 41, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 82, 83, 0,
	34, 35, 36, 0, 0, 0, 47, 105, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	108, 109, 0, 0, 9, 761, 56, 0, 27, 0,
	69, 100, 102, 84, 85, 86, 87, 88, 0, 0,
	0, 0, 70, 71, 0, 72, 0, 138, 140, 139,
	152, 153, 150, 151, 158, 154, 155, 156, 157, 148,
	149, 142, 143, 141, 144, 146, 147, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	145, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 73, 74, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 757, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 0, 34, 35, 36, 0, 0, 0, 47,
	105, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	0, 27, 0, 69, 100, 102, 84, 85, 86, 87,
	88, 0, 0, 0, 0, 70, 71, 0, 72, 0,
	0, 140, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 53, 145, 0, 0, 0, 54, 0, 55,
	50, 51, 59, 60, 61, 62, 63, 64, 65, 67,
	0, 48, 81, 49, 0, 0, 0, 0, 20, 73,
	74, 0, 0, 0, 21, 89, 90, 31, 101, 22,
	0, 106, 0, 0, 91, 92, 93, 98, 94, 95,
	96, 97, 66, 43, 13, 12, 0, 14, 0, 25,
	0, 26, 698, 0, 15, 0, 0, 0, 16, 17,
	30, 41, 0, 18, 28, 0, 0, 29, 0, 0,
	19, 0, 24, 82, 83, 0, 34, 35, 36, 0,
	0, 0, 47, 105, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 108, 109, 0, 0,
	9, 0, 56, 0, 27, 0, 69, 100, 102, 84,
	85, 86, 87, 88, 0, 0, 0, 0, 70, 71,
	0, 72, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 52, 53, 0, 0, 0, 0,
	54, 0, 55, 50, 51, 59, 60, 61, 62, 63,
	64, 65, 67, 0, 48, 81, 49, 0, 0, 0,
	0, 20, 73, 74, 0, 0, 0, 21, 89, 90,
	31, 101, 22, 0, 106, 0, 0, 91, 92, 93,
	98, 94, 95, 96, 97, 66, 43, 13, 12, 682,
	14, 0, 25, 0, 26, 0, 0, 15, 0, 0,
	0, 16, 17, 30, 41, 0, 18, 28, 0, 0,
	29, 0, 0, 19, 0, 24, 82, 83, 0, 34,
	35, 36, 0, 0, 0, 47, 105, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 108,
	109, 0, 0, 9, 0, 56, 0, 27, 0, 69,
	100, 102, 84, 85, 86, 87, 88, 0, 0, 0,
	0, 70, 71, 0, 72, 152, 153, 150, 151, 158,
	154, 155, 156, 157, 148, 149, 142, 143, 141, 144,
	146, 147, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 52, 53, 0,
	0, 0, 0, 54, 0, 55, 50, 51, 59, 60,
	61, 62, 63, 64, 65, 67, 0, 48, 81, 49,
	0, 0, 0, 617, 20, 73, 74, 0, 0, 0,
	21, 89, 90, 31, 101, 22, 0, 106, 0, 0,
	91, 92, 93, 98, 94, 95, 96, 97, 66, 43,
	13, 12, 0, 14, 0, 25, 0, 26, 0, 0,
	15, 0, 0, 0, 16, 17, 30, 41, 0, 18,
	28, 0, 0, 29, 0, 0, 19, 0, 24, 82,
	83, 0, 34, 35, 36, 0, 0, 0, 47, 105,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 108, 109, 0, 0, 9, 0, 56, 0,
	27, 0, 69, 100, 102, 84, 85, 86, 87, 88,
	0, 0, 0, 0, 70, 71, 0, 72, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 0, 145, 0, 0, 0, 0, 0, 0,
	52, 53, 0, 145, 0, 0, 54, 0, 55, 50,
	51, 59, 60, 61, 62, 63, 64, 65, 67, 0,
	48, 81, 49, 0, 0, 0, 0, 20, 73, 74,
	0, 0, 0, 21, 89, 90, 31, 101, 22, 0,
	106, 0, 0, 91, 92, 93, 98, 94, 95, 96,
	97, 66, 43, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	41, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 82, 83, 0, 34, 35, 36, 0, 0,
	0, 47, 105, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 108, 109, 0, 0, 9,
	515, 56, 0, 27, 0, 69, 100, 102, 403, 404,
	405, 406, 407, 0, 408, 409, 410, 446, 447, 0,
	181, 182, 183, 184, 186, 187, 188, 189, 190, 191,
	192, 193, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 413, 0, 416, 417, 418,
	397, 398, 399, 400, 401, 402, 419, 0, 0, 394,
	101, 0, 0, 0, 0, 0, 466, 467, 468, 462,
	463, 465, 464, 469, 414, 415, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 449, 450, 451, 452,
	453, 441, 442, 443, 444, 445, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 0, 461, 459,
	460, 456, 457, 0, 448, 454, 455, 84, 85, 86,
	87, 88, 0, 0, 0, 0, 70, 71, 458, 72,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 53, 0, 0, 0, 0, 54, 0,
	55, 50, 51, 59, 60, 61, 62, 63, 64, 65,
	67, 0, 48, 81, 49, 0, 0, 0, 0, 20,
	73, 74, 0, 0, 0, 21, 89, 90, 31, 101,
	22, 0, 106, 0, 0, 91, 92, 93, 98, 94,
	95, 96, 97, 66, 43, 13, 12, 0, 14, 0,
	25, 0, 26, 0, 0, 15, 0, 0, 0, 16,
	17, 30, 41, 0, 18, 28, 0, 0, 29, 0,
	0, 19, 0, 24, 82, 83, 0, 34, 35, 36,
	0, 0, 0, 47, 105, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 108, 109, 0,
	0, 9, 271, 56, 0, 27, 0, 69, 100, 102,
	84, 85, 86, 87, 88, 0, 0, 0, 0, 70,
	71, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 53, 0, 0, 0,
	0, 54, 0, 55, 50, 51, 59, 60, 61, 62,
	63, 64, 65, 67, 0, 48, 81, 49, 0, 0,
	0, 0, 20, 73, 74, 0, 0, 0, 21, 89,
	90, 31, 101, 22, 0, 106, 0, 0, 91, 92,
	93, 98, 94, 95, 96, 97, 66, 43, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 41, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 82, 83, 0,
	34, 35, 36, 0, 0, 0, 47, 105, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	108, 109, 0, 0, 9, 0, 56, 0, 27, 0,
	69, 100, 102, 84, 85, 86, 87, 88, 0, 0,
	0, 0, 70, 71, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 0, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 0, 84, 85, 86, 87, 88, 0, 47,
	105, 0, 70, 71, 0, 72, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	750, 27, 0, 69, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 0, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 0, 84, 85, 86, 87, 88, 0, 47,
	105, 0, 70, 71, 0, 72, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	619, 27, 0, 69, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 0, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 0, 84, 85, 86, 87, 88, 0, 47,
	105, 0, 70, 71, 0, 72, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	595, 27, 0, 69, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 0, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 0, 84, 85, 86, 87, 88, 0, 47,
	105, 0, 70, 71, 0, 72, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	576, 27, 0, 69, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 54, 0, 55, 50, 51, 59,
	60, 61, 62, 63, 64, 65, 67, 0, 48, 81,
	49, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 21, 89, 90, 31, 101, 22, 0, 106, 0,
	0, 91, 92, 93, 98, 94, 95, 96, 97, 66,
	43, 13, 12, 0, 14, 0, 25, 0, 26, 0,
	0, 15, 0, 0, 0, 16, 17, 30, 41, 0,
	18, 28, 0, 0, 29, 0, 0, 19, 0, 24,
	82, 83, 84, 85, 86, 87, 88, 0, 0, 47,
	105, 70, 71, 0, 72, 0, 0, 0, 99, 0,
	0, 0, 0, 108, 109, 0, 0, 9, 0, 56,
	0, 27, 0, 69, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 53, 0,
	0, 0, 0, 54, 0, 55, 50, 51, 59, 60,
	61, 62, 63, 64, 65, 67, 0, 48, 81, 49,
	0, 0, 0, 0, 20, 0, 0, 0, 0, 0,
	21, 89, 90, 31, 101, 22, 0, 106, 0, 0,
	91, 92, 93, 98, 94, 95, 96, 97, 66, 43,
	13, 12, 0, 14, 0, 25, 0, 26, 0, 0,
	15, 0, 0, 0, 16, 17, 30, 41, 0, 18,
	28, 0, 0, 29, 0, 0, 19, 0, 24, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 47, 105,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 108, 109, 0, 0, 9, 0, 56, 0,
	27, 0, 69, 100, 102, 403, 404, 405, 406, 407,
	0, 408, 409, 410, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 413, 0, 416, 417, 418, 397, 398, 399,
	400, 401, 402, 419, 0, 0, 394, 0, 0, 0,
	0, 0, 0, 466, 467, 468, 462, 463, 465, 464,
	469, 414, 415, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 449, 450, 451, 452, 453, 441, 442,
	443, 444, 445, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 0, 461, 459, 460, 456, 457,
	0, 448, 454, 455, 84, 85, 86, 87, 88, 0,
	0, 0, 0, 70, 71, 458, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 493, 206, 0, 0,
	56, 489, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	207, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 493, 539, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	540, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	386, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 0, 349, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 323, 0, 0, 108, 109, 0, 0, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 84, 85, 86, 87, 88, 0,
	0, 82, 83, 70, 71, 0, 72, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 52,
	53, 0, 0, 0, 0, 54, 0, 55, 50, 51,
	59, 60, 61, 62, 63, 64, 65, 67, 0, 48,
	81, 49, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 89, 90, 119, 101, 0, 0, 106,
	0, 0, 91, 92, 93, 98, 94, 95, 96, 97,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	47, 105, 0, 0, 0, 0, 0, 0, 0, 99,
	135, 137, 136, 0, 108, 109, 0, 0, 0, 0,
	56, 0, 0, 0, 69, 100, 102, 0, 0, 0,
	160, 751, 161, 133, 134, 138, 140, 139, 152, 153,
	150, 151, 158, 154, 155, 156, 157, 148, 149, 142,
	143, 141, 144, 146, 147, 0, 159, 135, 137, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 161,
	133, 134, 138, 140, 139, 152, 153, 150, 151, 158,
	154, 155, 156, 157, 148, 149, 142, 143, 141, 144,
	146, 147, 0, 159, 0, 135, 137, 136, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 161, 133, 134,
	138, 140, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 0, 135, 137, 136, 0, 0, 0, 0,
	0, 0, 752, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 161, 133, 134, 138, 140,
	139, 152, 153, 150, 151, 158, 154, 155, 156, 157,
	148, 149, 142, 143, 141, 144, 146, 147, 0, 159,
	135, 137, 136, 0, 0, 0, 0, 0, 0, 0,
	681, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 161, 133, 134, 138, 140, 139, 152, 153,
	150, 151, 158, 154, 155, 156, 157, 148, 149, 142,
	143, 141, 144, 146, 147, 0, 159, 0, 135, 137,
	136, 0, 0, 0, 0, 0, 0, 333, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	161, 133, 134, 138, 140, 139, 152, 153, 150, 151,
	158, 154, 155, 156, 157, 148, 149, 142, 143, 141,
	144, 146, 147, 0, 159, 135, 137, 136, 0, 0,
	0, 0, 0, 0, 0, 132, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 161, 133, 134,
	138, 140, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 135, 137, 136, 0, 0, 0, 0, 0,
	0, 635, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 161, 133, 134, 138, 140, 139,
	152, 153, 150, 151, 158, 154, 155, 156, 157, 148,
	149, 142, 143, 141, 144, 146, 147, 0, 159, 135,
	137, 136, 0, 0, 0, 0, 0, 0, 0, 616,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 161, 133, 134, 138, 140, 139, 152, 153, 150,
	151, 158, 154, 155, 156, 157, 148, 149, 142, 143,
	141, 144, 146, 147, 0, 159, 135, 137, 136, 0,
	0, 0, 0, 0, 0, 0, 615, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 161, 133,
	134, 138, 140, 139, 152, 153, 150, 151, 158, 154,
	155, 156, 157, 148, 149, 142, 143, 141, 144, 146,
	147, 0, 159, 135, 137, 136, 0, 0, 0, 0,
	0, 0, 0, 568, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 161, 133, 134, 138, 140,
	139, 152, 153, 150, 151, 158, 154, 155, 156, 157,
	148, 149, 142, 143, 141, 144, 146, 147, 0, 159,
	135, 137, 136, 0, 0, 0, 0, 0, 0, 0,
	567, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 161, 133, 134, 138, 140, 139, 152, 153,
	150, 151, 158, 154, 155, 156, 157, 148, 149, 142,
	143, 141, 144, 146, 147, 0, 159, 135, 137, 136,
	0, 0, 0, 0, 0, 0, 0, 542, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 161,
	133, 134, 138, 140, 139, 152, 153, 150, 151, 158,
	154, 155, 156, 157, 148, 149, 142, 143, 141, 144,
	146, 147, 0, 159, 135, 137, 136, 0, 0, 0,
	0, 0, 0, 0, 530, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 161, 133, 134, 138,
	140, 139, 152, 153, 150, 151, 158, 154, 155, 156,
	157, 148, 149, 142, 143, 141, 144, 146, 147, 0,
	159, 135, 137, 136, 0, 0, 0, 0, 0, 0,
	0, 501, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 160, 0, 161, 133, 134, 138, 140, 139, 152,
	153, 150, 151, 158, 154, 155, 156, 157, 148, 149,
	142, 143, 141, 144, 146, 147, 0, 159, 135, 137,
	136, 0, 0, 0, 0, 0, 0, 0, 497, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	161, 133, 134, 138, 140, 139, 152, 153, 150, 151,
	158, 154, 155, 156, 157, 148, 149, 142, 143, 141,
	144, 146, 147, 0, 159, 135, 137, 136, 0, 0,
	0, 0, 0, 0, 0, 377, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 161, 133, 134,
	138, 140, 139, 152, 153, 150, 151, 158, 154, 155,
	156, 157, 148, 149, 142, 143, 141, 144, 146, 147,
	0, 159, 135, 137, 136, 0, 0, 0, 0, 0,
	631, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 161, 133, 134, 138, 140, 139,
	152, 153, 150, 151, 158, 154, 155, 156, 157, 148,
	149, 142, 143, 141, 144, 146, 147, 0, 159, 135,
	137, 136, 0, 0, 0, 0, 0, 629, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 161, 133, 134, 138, 140, 139, 152, 153, 150,
	151, 158, 154, 155, 156, 157, 148, 149, 142, 143,
	141, 144, 146, 147, 0, 159, 135, 137, 136, 0,
	0, 0, 0, 0, 620, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 161, 133,
	134, 138, 140, 139, 152, 153, 150, 151, 158, 154,
	155, 156, 157, 148, 149, 142, 143, 141, 144, 146,
	147, 0, 159, 135, 137, 136, 0, 0, 0, 0,
	0, 569, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 161, 133, 134, 138, 140,
	139, 152, 153, 150, 151, 158, 154, 155, 156, 157,
	148, 149, 142, 143, 141, 144, 146, 147, 0, 159,
	135, 137, 136, 0, 0, 0, 0, 0, 551, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 507, 161, 133, 134, 138, 140, 139, 152, 153,
	150, 151, 158, 154, 155, 156, 157, 148, 149, 142,
	143, 141, 144, 146, 147, 0, 159, 135, 137, 136,
	0, 0, 372, 0, 511, 532, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 161,
	133, 134, 138, 140, 139, 152, 153, 150, 151, 158,
	154, 155, 156, 157, 148, 149, 142, 143, 141, 144,
	146, 147, 0, 159, 135, 137, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 161, 133, 134, 138,
	140, 139, 152, 153, 150, 151, 158, 154, 155, 156,
	157, 148, 149, 142, 143, 141, 144, 146, 147, 0,
	159, 137, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 161, 133, 134, 138, 140, 139, 152, 153,
	150, 151, 158, 154, 155, 156, 157, 148, 149, 142,
	143, 141, 144, 146, 147, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145,
}
var yyPact = [...]int{

	-1000, -1000, 2856, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 148, 3668, 145, 142, 4810, 4810, 4810, -34,
	324, 4810, -1000, 5093, 136, 134, 132, -1000, 185, 4810,
	422, 508, 486, 352, 421, 412, 410, 438, 453, 2553,
	-1000, -1000, -1000, 119, -1000, -1000, 253, 114, 4090, 4810,
	230, 230, 4810, 4810, 4810, 4810, 4810, -1000, -1000, 4810,
	4810, 4810, 4810, 4810, 4810, 4810, 113, 4810, -1000, 362,
	4810, 4810, 4810, -1000, -1000, -1000, 447, -1000, 214, 210,
	-1000, 89, 112, 111, 4810, 4810, 106, 4810, 4810, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 353,
	358, -1000, 13, 75, 75, 104, -1000, 195, 196, 399,
	2693, 4810, 296, 486, 4810, 4810, 8, 6034, 272, -1000,
	-2, -29, 84, -1000, -1000, 83, 486, -1000, 538, 78,
	-1000, 6034, -1000, 4810, 4810, 4810, 4810, 4810, 4810, 4810,
	4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810,
	4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810, 89,
	4690, 4810, 230, 4810, 390, -1000, 5045, -31, -1000, 408,
	-1000, 407, -1000, 237, -1000, 249, 103, 3668, 101, -37,
	507, 4570, 4810, 4810, 4810, 4810, 4810, 4810, 4810, 4810,
	4810, 4810, 4810, 4810, -1000, -1000, 4810, 4810, 4810, 10,
	4090, -80, 555, -1000, -1000, 5987, 230, 100, -1000, -1000,
	447, 4810, -1000, -1000, 4090, -1000, 450, 450, 463, 450,
	5564, 450, 450, 450, 450, 450, 450, 450, -1000, 4810,
	450, -116, 271, 307, -1000, 328, 4450, 230, 1235, 1072,
	1235, 4810, 2554, 2554, 75, 203, 172, -1000, -1000, 4810,
	4810, 6034, 6034, 4810, 6034, 6034, 312, -1000, 339, -41,
	271, 4810, -1000, -1000, 3970, -1000, 4090, 402, 399, 195,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5517, 97, -1000,
	-39, 552, 6034, 5470, -1000, -1000, -1000, -1000, -34, -1000,
	382, -1000, 4810, -1000, 4810, 1559, 1722, 6080, 1235, 912,
	1885, 2207, 2045, 517, 517, 517, 463, 450, 463, 463,
	676, 676, 2365, 2365, 2365, 2365, 2375, 2375, 2375, 2375,
	2365, -1000, 5940, 4810, 1398, 157, -1000, -1000, 5893, 121,
	-1000, 536, 2391, -1000, -1000, -1000, 93, 237, 232, 281,
	184, -1000, 281, 4810, -1000, 4810, -1000, -1000, 1235, 230,
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
	1235, 1235, 5423, -81, 5846, 75, -1000, 4810, -1000, 52,
	535, 4090, 4330, -1000, 4090, 5376, -82, -1000, 50, -1000,
	-1000, -1000, -1000, 397, 391, 5799, 179, 151, 4810, -83,
	75, -1000, -1000, 4810, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	75, -1000, -1000, -1000, -1000, -34, 4810, 4810, 10, -34,
	120, -1000, 6034, 5329, 5282, -1000, -1000, -1000, 5752, -1000,
	117, -1000, 6034, 4810, 49, -1000, 195, 3539, 4810, 4810,
	4810, 270, -1000, -1000, 74, 6034, -1000, 4810, 1398, -43,
	230, 199, 390, 3409, 4810, -1000, 73, 315, 232, -1000,
	281, -1000, -1000, 173, 549, -1000, 5235, 5188, 2228, -1000,
	3279, -1000, -1000, -1000, 5705, 531, 4810, -1000, 6034, 230,
	71, 47, -1000, -1000, -1000, -85, -1000, -1000, 354, -1000,
	-1000, -1000, -1000, 4810, -1000, 1235, -1000, -1000, 5658, -1000,
	-1000, -86, 5611, -1000, -1000, -1000, 4810, -1000, -1000, -1000,
	-1000, 4210, 6034, -1000, -1000, -1000, -1000, 5140, -44, 6034,
	-1000, -45, -53, 315, 1398, -1000, -1000, 98, -1000, 230,
	68, 4090, -1000, -1000, -1000, -1000, 6034, 314, 315, 46,
	551, -1000, 485, -1000, -1000, 279, -1000, -1000, -1000, -1000,
	171, 549, 337, -1000, 281, 3668, 505, -54, -1000, -1000,
	-1000, 4810, 1235, -1000, 4090, 531, -1000, -1000, 4997, -1000,
	-1000, -1000, -1000, -1000, 2065, -55, 4810, 110, -1000, 366,
	-1000, 39, 3019, 199, -1000, 4090, -96, 1902, -1000, -1000,
	66, 169, 35, 261, 315, 192, -1000, -1000, 168, -1000,
	-1000, -1000, 374, 268, 527, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 326, -1000, -1000, -1000, -1000, 2856, 1235,
	34, 90, -56, -1000, 20, -1000, 4810, 44, 88, -57,
	359, 261, -1000, -1000, -1000, 17, 16, -1000, -62, 281,
	-1000, 504, 504, 45, -1000, 379, -1000, -1000, 302, 65,
	-1000, 534, 3831, -1000, -1000, 2856, 531, -1000, -1000, 3149,
	4950, -1000, -1000, -1000, -1000, -71, 504, 1739, 3019, -1000,
	-1000, 416, -1000, 1576, -1000, 315, -1000, 434, 530, 141,
	-1000, -1000, 374, -1000, 4810, 61, -1000, 524, -1000, -1000,
	-1000, -1000, -1000, 2856, 2856, -1000, -1000, -72, -1000, 12,
	281, -1000, 165, -1000, 162, 95, -1000, -1000, 368, 4810,
	-1000, -1000, 6034, -1000, 3831, 4810, 1413, 2856, 2856, 159,
	-1000, 155, -1000, -1000, -1000, -1000, 434, -1000, 6034, -1000,
	-1000, 6034, -78, -1000, -1000, 1250, 1087, -1000, -1000, -1000,
	924, 761, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 693, 692, 26, 590, 59, 12, 583, 576, 574,
	691, 690, 686, 684, 32, 0, 79, 20, 33, 76,
	39, 16, 681, 23, 679, 44, 41, 7, 42, 677,
	216, 280, 209, 676, 674, 672, 2, 668, 46, 38,
	665, 69, 51, 663, 661, 660, 657, 656, 101, 655,
	654, 1, 34, 653, 10, 9, 652, 650, 649, 648,
	647, 645, 644, 643, 640, 639, 636, 35, 31, 635,
	633, 632, 58, 8, 630, 628, 626, 21, 623, 620,
	614, 28, 613, 14, 612, 442, 610, 601, 600, 37,
	36, 599, 598, 589, 27, 25, 13, 11, 15, 534,
	43, 3, 584, 582, 432, 575, 566, 565, 5, 4,
}
var yyR1 = [...]int{

	0, 1, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 103,
	103, 103, 103, 103, 103, 103, 100, 100, 50, 50,
	5, 5, 6, 6, 6, 2, 2, 2, 2, 2,
	74, 74, 51, 51, 11, 11, 11, 11, 11, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 53, 53, 66, 66, 13, 13, 65,
	65, 18, 4, 105, 105, 106, 106, 7, 7, 93,
	93, 99, 99, 8, 9, 20, 20, 10, 10, 68,
	68, 17, 17, 17, 17, 56, 56, 55, 55, 12,
	12, 60, 60, 60, 60, 52, 52, 52, 52, 52,
	57, 57, 71, 71, 70, 70, 59, 59, 58, 58,
	67, 67, 78, 78, 21, 21, 22, 22, 97, 97,
	95, 95, 95, 96, 96, 72, 72, 79, 79, 23,
	23, 76, 76, 25, 75, 75, 26, 26, 54, 54,
	61, 61, 81, 81, 91, 91, 107, 107, 92, 92,
	98, 98, 98, 98, 98, 98, 69, 69, 27, 27,
	86, 86, 73, 14, 64, 64, 28, 77, 77, 80,
	80, 29, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 101, 108,
	109, 104, 104, 83, 83, 84, 84, 36, 36, 37,
	37, 37, 37, 30, 30, 31, 31, 34, 34, 63,
	63, 63, 82, 82, 41, 41, 41, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 42, 15, 15, 16, 16,
	40, 43, 43, 43, 44, 44, 44, 45, 45, 45,
	45, 45, 45, 19, 19, 19, 32, 32, 32, 46,
	46, 47, 47, 47, 47, 47, 47, 38, 38, 38,
	39, 39, 39, 89, 90, 90, 88, 88, 87, 87,
	87, 87, 87, 87, 85, 85, 85, 85, 48, 48,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 33,
	33, 33, 33, 33, 33, 33, 62, 62, 94,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 1, 1,
	3, 1, 2, 0, 1, 1, 1, 1, 1, 3,
	1, 1, 5, 7, 9, 5, 3, 3, 3, 3,
	3, 3, 1, 2, 5, 7, 9, 5, 1, 6,
	3, 3, 2, 0, 9, 1, 3, 0, 4, 1,
	3, 1, 13, 0, 1, 0, 1, 9, 8, 1,
	2, 1, 1, 6, 7, 0, 2, 0, 2, 0,
	2, 1, 2, 4, 3, 1, 4, 1, 4, 1,
	4, 3, 4, 4, 5, 0, 5, 5, 4, 4,
	1, 4, 5, 6, 1, 3, 6, 7, 3, 6,
	1, 0, 1, 3, 4, 6, 0, 1, 1, 2,
	1, 1, 1, 0, 2, 2, 3, 1, 3, 1,
	2, 3, 1, 1, 3, 1, 1, 3, 2, 0,
	3, 4, 1, 3, 1, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 4,
	3, 1, 4, 4, 3, 1, 1, 0, 1, 3,
	1, 3, 6, 5, 3, 4, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 3, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	3, 2, 1, 2, 4, 2, 13, 14, 1, 0,
	0, 0, 1, 0, 4, 3, 1, 1, 2, 2,
	4, 4, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 0, 1, 4, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	3, 1, 1, 1, 3, 3, 1, 1, 0, 1,
	1, 1, 3, 1, 1, 3, 1, 1, 4, 4,
	4, 4, 1, 1, 1, 3, 1, 4, 2, 3,
	3, 1, 4, 4, 3, 3, 3, 1, 3, 1,
	1, 3, 1, 1, 0, 1, 3, 1, 3, 1,
	4, 2, 6, 4, 2, 2, 1, 2, 1, 4,
	3, 3, 3, 6, 3, 1, 1, 2, 1, 4,
	4, 2, 2, 4, 2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -50, -2, -3, -4, -7, -8, -9, 158,
	-70, -58, 103, 102, 105, 112, 116, 117, 121, 128,
	76, 82, 87, -15, 130, 107, 109, 162, 122, 125,
	118, 85, -101, -93, 134, 135, 136, -71, -59, -19,
	-24, 119, -99, 101, -45, -46, -43, 140, 69, 71,
	58, 59, 49, 50, 55, 57, 160, -29, -33, 60,
	61, 62, 63, 64, 65, 66, 100, 67, -35, 164,
	13, 14, 16, 77, 78, -32, -42, -37, -30, -40,
	-41, 70, 131, 132, 4, 5, 6, 7, 8, 83,
	84, 92, 93, 94, 96, 97, 98, 99, 95, 149,
	165, 86, 166, -6, -44, 141, 89, -5, 154, 155,
	-51, 160, -3, -101, 160, 160, -16, -15, 76, 85,
	-16, -16, -76, -25, -32, -75, -101, -26, 86, -64,
	-28, -15, 162, 33, 34, 10, 12, 11, 35, 37,
	36, 51, 49, 50, 52, 68, 53, 54, 47, 48,
	40, 41, 38, 39, 43, 44, 45, 46, 42, 56,
	30, 32, 160, 160, 160, 158, -15, 85, 31, -104,
	37, 134, -99, 85, 85, 85, 73, 74, 73, 75,
	74, 17, 18, 19, 20, 29, 21, 22, 23, 24,
	25, 26, 27, 28, 58, 59, 160, 69, 158, 139,
	160, -89, -88, -90, -87, -15, 37, 140, -15, -19,
	-42, 160, -41, 76, 69, -19, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -34, 160,
	-15, -63, 88, -85, -48, 86, 151, 152, -15, -15,
	-15, 69, 153, 153, -31, -30, -47, -6, -32, 160,
	160, -15, -15, 160, -15, -15, 88, 150, -85, -85,
	88, 158, -32, -72, 160, -72, 160, 155, 155, -5,
	-11, 159, -3, -4, -7, -8, -9, -15, 103, -104,
	-77, -80, -15, -15, 162, 162, 162, 162, 9, 162,
	9, -104, 17, 162, 9, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -31, -15, 31, -15, -65, -18, -19, -15, -74,
	-14, 85, -51, 162, 162, 85, -108, 85, -20, 137,
	-108, -10, 137, 160, -3, 160, 162, 31, -15, 37,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -16, -15, -39, 85, 158, -32, -89,
	163, 9, 15, -19, 160, -15, -89, 161, -16, 164,
	-48, -48, 88, 69, 139, -15, 90, -19, 15, -16,
	-38, -100, -32, 158, 85, -103, -102, 76, 77, 78,
	79, 80, 81, 4, 5, 6, 7, 8, 10, 11,
	12, 56, 70, 71, 100, 101, 73, 74, 75, 82,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 117, 118, 119, 120, 121, 13, 14, 140, 112,
	113, 114, 115, 116, 141, 142, 137, 138, 154, 135,
	136, 134, 95, 96, 98, 97, 92, 93, 94, 99,
	-38, -100, -32, -82, -72, 153, 69, 158, 139, 153,
	-62, -94, -15, -15, -15, 150, 150, 165, -15, 161,
	-79, -23, -15, 156, -89, 85, -5, 161, 160, 162,
	9, 161, -25, -26, -108, -15, -28, 31, -15, 161,
	9, 111, 9, 161, 17, 159, -108, 160, -20, -68,
	138, -6, 158, -108, -81, -6, -15, -15, -51, -19,
	161, 163, 159, -72, -15, 161, 17, -90, -15, 37,
	140, -89, 161, 163, 161, -49, 85, 91, 50, 86,
	85, 159, 159, 69, 159, -15, 163, -72, -15, -72,
	-32, -16, -15, -39, -32, 161, 9, 161, 161, 159,
	161, 9, -15, 161, -57, -3, 31, -15, -77, -15,
	-60, 158, 31, 160, -15, 162, -18, -17, -19, 37,
	140, 69, -14, -12, -3, 31, -15, -53, 160, -67,
	-78, -21, -22, -97, -95, 30, 141, 142, -6, -68,
	-108, -81, -54, 158, 9, 161, 161, 75, -3, 31,
	159, 17, -15, -19, 160, 161, 163, 91, -15, 159,
	163, 159, -94, -23, -51, 161, 162, -52, 162, -52,
	162, -67, 161, 15, -19, 160, -89, -51, -108, -13,
	123, 124, -67, 161, 9, -105, 37, -95, -108, 158,
	159, -61, -91, -107, -92, 129, -98, 81, 80, 79,
	76, 77, 78, -54, -6, -3, 31, 162, -51, -15,
	-89, 163, 104, 162, -77, 159, 114, 115, -52, 113,
	-52, 161, -55, -3, 31, -17, -89, 163, 110, 160,
	158, 161, -83, 126, -21, -106, 156, 158, -54, -69,
	-27, 86, 120, -98, 159, -51, 161, 159, 162, 161,
	-15, 31, 162, 159, 162, 113, -83, -51, 161, 161,
	162, -66, -6, -51, -96, 31, -96, 160, 86, -54,
	159, 162, 9, -108, 17, -86, -73, -100, -56, -3,
	31, 31, 162, -51, -51, 162, -96, 108, -55, 86,
	35, 159, -109, -97, -109, -84, -36, 86, 37, 17,
	159, -27, -15, 162, 9, 17, -51, -51, -51, -109,
	162, 161, -6, 158, 158, 161, 9, 86, -15, -108,
	-73, -15, 106, 158, 158, -51, -51, -36, -108, 162,
	-51, -51, 159, 159, 159, 159, -109, -109, -109,
}
var yyDef = [...]int{

	79, -2, 1, 78, 85, 86, 87, 88, 89, 93,
	100, 101, 0, 0, 0, 0, 368, 368, 368, 0,
	333, 0, 112, 0, 0, 0, 0, 118, 0, 0,
	0, 80, 321, 0, 0, 0, 0, 174, 0, -2,
	367, 318, 139, 0, -2, 384, 370, 0, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 299, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 309, 339,
	0, 312, 0, 141, 142, 377, 362, 382, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 0,
	0, 386, 0, -2, 0, 0, 346, 82, 0, 0,
	0, 0, 0, 321, 237, 0, 0, 369, 333, 80,
	0, 0, 0, 202, 203, 0, 321, 205, 206, 0,
	235, 236, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 122, 319,
	322, 0, 140, 145, 319, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 261, 0, 368, 0, 0,
	404, 0, 403, 407, 405, 409, 0, 0, 246, -2,
	0, 0, -2, 333, 404, -2, 280, 281, 282, 283,
	0, 300, 301, 302, 303, 304, 305, 306, 307, 368,
	308, 0, 340, 341, 416, 418, 0, 0, 311, 313,
	315, 368, 0, 0, 342, 335, 336, 334, 391, 0,
	0, 431, 432, 0, 434, 435, 0, 358, 0, 0,
	0, 0, 388, 329, 0, 332, 404, 0, 0, 84,
	92, 99, 94, 95, 96, 97, 98, 0, 0, 319,
	0, 238, 240, 0, 106, 107, 108, 109, 0, 110,
	0, 319, 0, 111, 0, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 293, 0, 0, 298, 0, 129, -2, 0, 0,
	91, 0, 0, 120, 121, 319, 0, 145, 149, 0,
	0, 319, 0, 0, 175, 0, 178, 93, 244, 0,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 385, 400, 0, 402, 0,
	345, 404, 0, -2, 404, 0, 0, -2, 0, 310,
	417, 414, 415, 0, 0, 0, 0, 371, 0, 0,
	0, -2, -2, 0, 76, 77, 69, 70, 71, 72,
	73, 74, 75, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	0, -2, -2, 241, 343, 0, 368, 0, 0, 0,
	0, 436, 438, 0, 0, 357, 360, 359, 0, 195,
	0, 197, 199, 0, 0, 81, 83, 0, 0, 237,
	0, 0, 201, 204, 0, 207, 234, 0, 297, 0,
	0, 0, 0, 0, 0, 123, 0, -2, 149, 319,
	0, 146, 209, 0, 148, 212, 0, 0, 0, -2,
	0, 378, 380, 381, 0, 0, 0, 406, 408, 0,
	0, 0, -2, 345, 338, 0, 425, 426, 0, 428,
	420, 421, 422, 0, 424, 314, 379, 330, 0, 331,
	395, 0, 0, 394, 396, 429, 0, 430, 433, 387,
	196, 0, 200, 344, 102, 170, 93, 0, 0, 239,
	105, 165, 165, -2, 296, 114, 130, 0, -2, 0,
	0, 404, 90, 117, 159, 93, 319, 127, -2, 0,
	180, 182, 133, 187, 188, 0, 190, 191, 192, 319,
	0, 150, 216, 209, 0, 0, 0, 0, 172, 93,
	401, 0, 243, -2, 404, 413, 419, 427, 0, 398,
	392, 393, 437, 198, 0, 0, 237, 0, 165, 0,
	165, 0, 0, 0, -2, 404, 0, 0, 233, 119,
	0, 0, 0, 323, 186, 135, 134, 189, 0, 209,
	143, 208, 0, 0, -2, 215, 218, 220, 221, 222,
	223, 224, 225, 216, 213, 173, 93, 179, 176, 242,
	0, 0, 0, 103, 0, 161, 0, 0, 0, 0,
	0, 323, 115, 157, 93, 0, 0, -2, 0, 0,
	93, 193, 193, 0, 183, 0, 136, 209, 216, 0,
	227, 319, 0, 219, 144, 177, 412, 423, 171, 0,
	0, 93, 93, 162, 163, 0, 193, 0, 0, 153,
	160, 0, 125, 0, 320, 0, 320, 0, 184, 216,
	138, 210, 0, 228, 0, 0, 231, 0, 104, 155,
	93, 93, 93, 168, 169, 164, 320, 0, 116, 0,
	0, 128, 0, 194, 0, 0, 326, 327, 0, 0,
	137, 226, 319, 211, 0, 0, 0, 166, 167, 0,
	158, 0, 126, 93, 93, 324, 0, 328, 185, 229,
	230, 319, 0, 93, 93, 0, 0, 325, 232, 156,
	0, 0, 320, 320, 320, 124, 132, 316, 317,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:263
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:264
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:268
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:269
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:288
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:289
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:376
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:383
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:389
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:391
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:392
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:399
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:401
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:403
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 104:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:407
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:409
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:411
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:413
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 116:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:424
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:428
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 124:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:437
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:441
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.stmt = nil
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 132:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:462
		{
			yyVAL.stmt = ast.NewFunctionStatement(yyDollar[1].tok, yyDollar[2].num, yyDollar[3].tok, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:466
		{
			yyVAL.num = 0
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:467
		{
			yyVAL.num = 1
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:471
		{
			yyVAL.num = 0
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:472
		{
			yyVAL.num = 1
		}
	case 137:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:477
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement(yyDollar[1].exprs, yyDollar[2].tok, yyDollar[3].tok, yyDollar[4].expr, yyDollar[5].exprs, yyDollar[8].stmts)
		}
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.go.y:479
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement([]ast.Expression{}, yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr, yyDollar[4].exprs, yyDollar[7].stmts)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:483
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:484
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:488
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:489
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:495
		{
			yyVAL.stmt = ast.NewTraitDeclarationStatement(yyDollar[1].tok, yyDollar[2].tok, yyDollar[5].stmts)
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:500
		{
			yyVAL.stmt = ast.NewInterfaceDeclarationStatement(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].exprs, yyDollar[6].stmts)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:504
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:505
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:509
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:510
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:514
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:515
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:520
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:521
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:522
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:527
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:541
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:543
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:544
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:548
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:550
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:552
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:554
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:556
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:560
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:561
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:568
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:572
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:574
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:580
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:582
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:587
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:592
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:599
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:600
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:605
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:607
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:612
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:614
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:618
		{
			yyVAL.expr = nil
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:619
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:623
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:624
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:628
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:629
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:630
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:634
		{
			yyVAL.expr = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:635
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:639
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:640
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:645
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:647
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:651
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:652
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:656
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:657
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:666
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:667
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:671
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:672
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:677
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmt)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:679
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:684
		{
			yyVAL.stmt = ast.NewClassStatement(yyDollar[1].exprs, yyDollar[2].exprs)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:686
		{
			yyVAL.stmt = ast.NewClassStatement(append(yyDollar[1].exprs, ast.NewConstantEncapsedStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal)), yyDollar[3].exprs)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:696
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:697
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:753
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:754
		{
			yyVAL.exprs = []ast.Expression{ast.NewVarLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:758
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:760
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:764
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:766
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:770
		{
			yyVAL.expr = ast.NewPublicLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:771
		{
			yyVAL.expr = ast.NewProtectedLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:772
		{
			yyVAL.expr = ast.NewPrivateLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:773
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:774
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:775
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:779
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:780
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:785
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:787
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:791
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:792
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:796
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:800
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:804
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:805
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:809
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:813
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:814
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:818
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:836
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:843
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:845
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:847
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:849
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:850
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:852
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:854
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:856
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:858
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:860
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:862
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:864
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:866
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:868
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:870
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:872
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:874
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:875
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:876
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:877
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:878
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:880
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:882
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:884
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:886
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:888
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:890
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:892
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:893
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:894
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:896
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:898
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:910
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:912
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:914
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:916
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:918
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:920
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:922
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:924
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:925
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:926
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:928
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:930
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:932
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:933
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:934
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:935
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:936
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:937
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:938
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:942
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 316:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts, false)
		}
	case 317:
		yyDollar = yyS[yypt-14 : yypt+1]
		//line parser.go.y:955
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[2].tok, yyDollar[3].num, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[9].expr, yyDollar[12].stmts, true)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:959
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:963
		{
			yyVAL.expr = nil
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:967
		{
			yyVAL.expr = nil
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:971
		{
			yyVAL.num = 0
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:972
		{
			yyVAL.num = 1
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:976
		{
			yyVAL.expr = nil
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:977
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:981
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:982
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:986
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:987
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:992
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:994
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:996
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:998
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1002
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1003
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1007
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1008
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1012
		{
			yyVAL.expr = nil
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1013
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1019
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1020
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.expr = nil
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1029
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1030
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1031
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1036
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1037
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1038
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1039
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1040
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1043
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1044
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1045
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1048
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1049
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1050
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1056
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1058
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1062
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1067
		{
			yyVAL.expr = nil
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1072
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1076
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1077
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1078
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1082
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1083
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1091
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1093
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1095
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1097
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1098
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1105
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1107
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1111
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1112
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1113
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1118
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1120
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1125
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1127
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1129
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1131
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1133
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1135
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1140
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1145
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1146
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1152
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1156
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1157
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1164
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1169
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1171
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1173
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1175
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1177
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1179
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1184
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1186
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1188
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1190
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1195
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1197
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1199
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1201
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1203
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1205
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1206
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1210
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1211
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1212
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1213
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1218
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1219
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1221
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1223
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1225
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1227
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1229
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1233
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1235
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1239
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
