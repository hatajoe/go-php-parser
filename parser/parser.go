//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1255

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	69, 250,
	139, 250,
	153, 250,
	158, 250,
	-2, 245,
	-1, 36,
	160, 253,
	-2, 262,
	-1, 70,
	69, 252,
	139, 252,
	153, 252,
	158, 252,
	160, 255,
	-2, 240,
	-1, 93,
	153, 213,
	-2, 242,
	-1, 193,
	69, 250,
	139, 250,
	153, 250,
	158, 250,
	-2, 140,
	-1, 196,
	160, 255,
	-2, 252,
	-1, 198,
	69, 250,
	139, 250,
	153, 250,
	158, 250,
	-2, 142,
	-1, 291,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 164,
	-1, 292,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 165,
	-1, 293,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 166,
	-1, 294,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 167,
	-1, 295,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 168,
	-1, 296,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 169,
	-1, 297,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 170,
	-1, 298,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 171,
	-1, 299,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 172,
	-1, 306,
	9, 50,
	161, 50,
	-2, 250,
	-1, 346,
	9, 290,
	161, 290,
	163, 290,
	-2, 250,
	-1, 350,
	69, 251,
	139, 251,
	153, 251,
	158, 251,
	160, 254,
	-2, 174,
	-1, 364,
	160, 276,
	-2, 243,
	-1, 365,
	160, 278,
	-2, 268,
	-1, 369,
	160, 276,
	-2, 244,
	-1, 370,
	160, 278,
	-2, 269,
	-1, 414,
	161, 86,
	-2, 91,
	-1, 418,
	69, 250,
	139, 250,
	153, 250,
	158, 250,
	-2, 125,
	-1, 431,
	160, 254,
	-2, 251,
	-1, 476,
	15, 56,
	161, 56,
	-2, 250,
	-1, 486,
	161, 86,
	-2, 91,
	-1, 505,
	9, 289,
	161, 289,
	163, 289,
	-2, 250,
	-1, 525,
	15, 57,
	161, 57,
	-2, 250,
	-1, 560,
	15, 59,
	161, 59,
	-2, 224,
}

const yyPrivate = 57344

const yyLast = 5371

var yyAct = [...]int{

	20, 100, 610, 103, 606, 555, 29, 489, 185, 588,
	260, 491, 475, 487, 107, 107, 107, 519, 492, 120,
	315, 389, 379, 309, 305, 338, 187, 155, 66, 116,
	119, 352, 113, 91, 576, 364, 363, 93, 560, 512,
	508, 189, 192, 445, 217, 199, 200, 201, 202, 203,
	432, 420, 204, 205, 206, 207, 208, 209, 210, 343,
	213, 97, 273, 221, 222, 223, 255, 631, 270, 4,
	106, 194, 194, 617, 268, 234, 235, 102, 237, 238,
	91, 339, 91, 623, 600, 110, 111, 584, 579, 573,
	547, 541, 522, 520, 524, 518, 473, 397, 319, 246,
	313, 460, 257, 455, 29, 262, 263, 409, 266, 230,
	108, 367, 91, 92, 407, 265, 264, 618, 583, 109,
	91, 582, 574, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 296, 297, 298, 299, 571,
	301, 303, 244, 307, 340, 591, 311, 218, 564, 355,
	92, 252, 92, 550, 551, 577, 321, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 534,
	194, 335, 107, 337, 366, 189, 230, 374, 98, 99,
	507, 462, 92, 342, 248, 562, 348, 433, 189, 424,
	92, 550, 551, 526, 506, 486, 349, 247, 578, 493,
	414, 396, 442, 107, 347, 272, 318, 316, 249, 194,
	358, 269, 219, 220, 236, 107, 70, 267, 317, 233,
	232, 471, 212, 380, 381, 622, 385, 382, 32, 65,
	523, 184, 181, 180, 153, 386, 549, 572, 390, 194,
	189, 152, 336, 459, 443, 454, 114, 376, 392, 410,
	353, 354, 369, 368, 109, 569, 406, 151, 105, 196,
	196, 377, 402, 104, 120, 101, 375, 477, 627, 621,
	109, 193, 198, 351, 353, 620, 354, 354, 353, 563,
	154, 109, 250, 251, 373, 362, 356, 226, 225, 218,
	401, 400, 441, 405, 403, 258, 566, 158, 218, 479,
	355, 231, 183, 394, 509, 29, 108, 415, 624, 416,
	494, 495, 417, 227, 68, 109, 91, 372, 612, 96,
	592, 182, 245, 98, 99, 413, 494, 495, 218, 117,
	355, 423, 531, 532, 218, 189, 427, 310, 189, 98,
	99, 194, 224, 218, 439, 243, 430, 109, 470, 393,
	98, 99, 444, 383, 219, 220, 357, 447, 580, 550,
	551, 426, 384, 219, 220, 107, 451, 611, 196, 604,
	478, 95, 314, 134, 218, 537, 239, 156, 231, 218,
	306, 215, 461, 216, 98, 99, 228, 466, 262, 468,
	195, 159, 452, 219, 220, 472, 92, 589, 467, 219,
	220, 259, 484, 553, 550, 551, 148, 196, 219, 220,
	540, 29, 320, 341, 160, 161, 504, 157, 134, 346,
	603, 613, 474, 480, 437, 503, 194, 194, 422, 162,
	164, 163, 425, 510, 411, 450, 271, 196, 240, 219,
	220, 535, 496, 398, 219, 220, 380, 194, 344, 360,
	568, 390, 464, 446, 536, 365, 370, 516, 448, 435,
	438, 256, 300, 228, 5, 436, 186, 482, 514, 188,
	189, 609, 515, 241, 242, 528, 500, 565, 527, 521,
	137, 138, 131, 132, 130, 133, 135, 136, 371, 148,
	533, 261, 388, 542, 543, 529, 194, 189, 114, 488,
	112, 134, 538, 115, 308, 544, 30, 7, 585, 262,
	29, 304, 118, 214, 496, 378, 469, 189, 31, 548,
	8, 496, 29, 463, 593, 559, 485, 558, 552, 2,
	554, 434, 570, 567, 229, 37, 29, 36, 94, 196,
	38, 575, 69, 194, 133, 135, 136, 67, 148, 581,
	60, 418, 211, 50, 539, 587, 49, 33, 490, 530,
	134, 481, 253, 496, 29, 590, 3, 1, 598, 599,
	0, 0, 0, 0, 0, 29, 0, 0, 602, 0,
	556, 29, 0, 0, 0, 608, 0, 614, 615, 616,
	586, 607, 29, 29, 0, 131, 132, 130, 133, 135,
	136, 0, 148, 449, 625, 0, 341, 453, 29, 29,
	29, 0, 628, 629, 134, 0, 630, 496, 0, 632,
	0, 0, 29, 29, 196, 196, 29, 0, 636, 637,
	0, 594, 619, 0, 0, 0, 306, 476, 0, 556,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 76, 77,
	78, 0, 0, 0, 0, 62, 63, 0, 64, 143,
	144, 145, 146, 137, 138, 131, 132, 130, 133, 135,
	136, 0, 148, 0, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 525, 0, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 46, 0, 47,
	42, 43, 51, 52, 53, 54, 55, 56, 57, 59,
	0, 40, 71, 41, 0, 0, 0, 0, 17, 0,
	0, 196, 0, 0, 18, 79, 80, 28, 91, 19,
	0, 96, 0, 476, 81, 82, 83, 88, 84, 85,
	86, 87, 58, 35, 10, 9, 0, 11, 0, 22,
	0, 23, 0, 0, 12, 0, 0, 0, 13, 14,
	27, 34, 0, 15, 25, 0, 0, 26, 0, 0,
	16, 0, 21, 72, 73, 74, 75, 76, 77, 78,
	0, 0, 39, 95, 62, 63, 0, 64, 0, 0,
	0, 89, 0, 0, 0, 0, 98, 99, 0, 0,
	6, 635, 48, 0, 24, 0, 61, 90, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 46, 0, 47, 42,
	43, 51, 52, 53, 54, 55, 56, 57, 59, 0,
	40, 71, 41, 0, 0, 0, 0, 17, 0, 0,
	0, 0, 0, 18, 79, 80, 28, 91, 19, 0,
	96, 0, 0, 81, 82, 83, 88, 84, 85, 86,
	87, 58, 35, 10, 9, 0, 11, 0, 22, 0,
	23, 0, 0, 12, 0, 0, 0, 13, 14, 27,
	34, 0, 15, 25, 0, 0, 26, 0, 0, 16,
	0, 21, 72, 73, 74, 75, 76, 77, 78, 0,
	0, 39, 95, 62, 63, 0, 64, 0, 0, 0,
	89, 0, 0, 0, 0, 98, 99, 0, 0, 6,
	634, 48, 0, 24, 0, 61, 90, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 18, 79, 80, 28, 91, 19, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 35, 10, 9, 0, 11, 0, 22, 0, 23,
	0, 0, 12, 0, 0, 0, 13, 14, 27, 34,
	0, 15, 25, 0, 0, 26, 0, 0, 16, 0,
	21, 72, 73, 74, 75, 76, 77, 78, 0, 0,
	39, 95, 62, 63, 0, 64, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 0, 0, 6, 633,
	48, 0, 24, 0, 61, 90, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	0, 0, 0, 0, 46, 0, 47, 42, 43, 51,
	52, 53, 54, 55, 56, 57, 59, 0, 40, 71,
	41, 0, 0, 0, 0, 17, 0, 0, 0, 0,
	0, 18, 79, 80, 28, 91, 19, 0, 96, 0,
	0, 81, 82, 83, 88, 84, 85, 86, 87, 58,
	35, 10, 9, 0, 11, 626, 22, 0, 23, 0,
	0, 12, 0, 0, 0, 13, 14, 27, 34, 0,
	15, 25, 0, 0, 26, 0, 0, 16, 0, 21,
	72, 73, 74, 75, 76, 77, 78, 0, 0, 39,
	95, 62, 63, 0, 64, 0, 0, 0, 89, 0,
	0, 0, 0, 98, 99, 0, 0, 6, 0, 48,
	0, 24, 0, 61, 90, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 46, 0, 47, 42, 43, 51, 52,
	53, 54, 55, 56, 57, 59, 0, 40, 71, 41,
	0, 0, 0, 0, 17, 0, 0, 0, 0, 0,
	18, 79, 80, 28, 91, 19, 0, 96, 0, 0,
	81, 82, 83, 88, 84, 85, 86, 87, 58, 35,
	10, 9, 0, 11, 0, 22, 0, 23, 0, 0,
	12, 0, 0, 0, 13, 14, 27, 34, 0, 15,
	25, 0, 0, 26, 0, 0, 16, 0, 21, 72,
	73, 0, 74, 75, 76, 77, 78, 0, 39, 95,
	0, 62, 63, 0, 64, 0, 0, 89, 0, 0,
	0, 0, 98, 99, 0, 0, 6, 605, 48, 557,
	24, 0, 61, 90, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 46, 0, 47, 42, 43, 51, 52,
	53, 54, 55, 56, 57, 59, 0, 40, 71, 41,
	0, 0, 0, 0, 17, 0, 0, 0, 0, 0,
	18, 79, 80, 28, 91, 19, 0, 96, 0, 0,
	81, 82, 83, 88, 84, 85, 86, 87, 58, 35,
	10, 9, 0, 11, 0, 22, 0, 23, 0, 0,
	12, 0, 0, 0, 13, 14, 27, 34, 0, 15,
	25, 0, 0, 26, 0, 0, 16, 0, 21, 72,
	73, 74, 75, 76, 77, 78, 0, 0, 39, 95,
	62, 63, 0, 64, 0, 0, 0, 89, 0, 0,
	0, 0, 98, 99, 0, 0, 6, 0, 48, 0,
	24, 0, 61, 90, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 46, 0, 47, 42, 43, 51, 52, 53,
	54, 55, 56, 57, 59, 0, 40, 71, 41, 0,
	0, 0, 0, 17, 0, 0, 0, 0, 0, 18,
	79, 80, 28, 91, 19, 0, 96, 0, 0, 81,
	82, 83, 88, 84, 85, 86, 87, 58, 35, 10,
	9, 0, 11, 0, 22, 601, 23, 0, 0, 12,
	0, 0, 0, 13, 14, 27, 34, 0, 15, 25,
	0, 0, 26, 0, 0, 16, 0, 21, 72, 73,
	0, 74, 75, 76, 77, 78, 0, 39, 95, 0,
	62, 63, 0, 64, 0, 0, 89, 0, 0, 0,
	0, 98, 99, 0, 0, 6, 0, 48, 595, 24,
	0, 61, 90, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 46, 0, 47, 42, 43, 51, 52, 53,
	54, 55, 56, 57, 59, 0, 40, 71, 41, 0,
	0, 0, 0, 17, 0, 0, 0, 0, 0, 18,
	79, 80, 28, 91, 19, 0, 96, 0, 0, 81,
	82, 83, 88, 84, 85, 86, 87, 58, 35, 10,
	9, 0, 11, 0, 22, 0, 23, 0, 0, 12,
	0, 0, 0, 13, 14, 27, 34, 0, 15, 25,
	0, 0, 26, 0, 0, 16, 0, 21, 72, 73,
	74, 75, 76, 77, 78, 0, 0, 39, 95, 62,
	63, 0, 64, 0, 0, 0, 89, 0, 0, 0,
	0, 98, 99, 0, 0, 6, 0, 48, 0, 24,
	0, 61, 90, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 46, 0, 47, 42, 43, 51, 52, 53, 54,
	55, 56, 57, 59, 0, 40, 71, 41, 0, 0,
	0, 0, 17, 0, 0, 0, 0, 0, 18, 79,
	80, 28, 91, 19, 0, 96, 0, 0, 81, 82,
	83, 88, 84, 85, 86, 87, 58, 35, 10, 9,
	0, 11, 0, 22, 0, 23, 561, 0, 12, 0,
	0, 0, 13, 14, 27, 34, 0, 15, 25, 0,
	0, 26, 0, 0, 16, 0, 21, 72, 73, 74,
	75, 76, 77, 78, 0, 0, 39, 95, 62, 63,
	0, 64, 0, 0, 0, 89, 0, 0, 0, 0,
	98, 99, 0, 0, 6, 0, 48, 0, 24, 0,
	61, 90, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 45, 0, 0, 0, 0,
	46, 0, 47, 42, 43, 51, 52, 53, 54, 55,
	56, 57, 59, 0, 40, 71, 41, 0, 0, 0,
	0, 17, 0, 0, 0, 0, 0, 18, 79, 80,
	28, 91, 19, 0, 96, 0, 0, 81, 82, 83,
	88, 84, 85, 86, 87, 58, 35, 10, 9, 546,
	11, 0, 22, 0, 23, 0, 0, 12, 0, 0,
	0, 13, 14, 27, 34, 0, 15, 25, 0, 0,
	26, 0, 0, 16, 0, 21, 72, 73, 0, 74,
	75, 76, 77, 78, 0, 39, 95, 0, 62, 63,
	0, 64, 0, 0, 89, 0, 0, 0, 0, 98,
	99, 0, 0, 6, 0, 48, 501, 24, 0, 61,
	90, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 45, 0, 0, 0, 0,
	46, 0, 47, 42, 43, 51, 52, 53, 54, 55,
	56, 57, 59, 0, 40, 71, 41, 0, 0, 0,
	0, 17, 0, 0, 0, 0, 0, 18, 79, 80,
	28, 91, 19, 0, 96, 0, 0, 81, 82, 83,
	88, 84, 85, 86, 87, 58, 35, 10, 9, 0,
	11, 0, 22, 0, 23, 0, 0, 12, 0, 0,
	0, 13, 14, 27, 34, 0, 15, 25, 0, 0,
	26, 0, 0, 16, 0, 21, 72, 73, 74, 75,
	76, 77, 78, 0, 0, 39, 95, 62, 63, 0,
	64, 0, 0, 0, 89, 0, 0, 0, 0, 98,
	99, 0, 0, 6, 0, 48, 0, 24, 0, 61,
	90, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 46,
	0, 47, 42, 43, 51, 52, 53, 54, 55, 56,
	57, 59, 0, 40, 71, 41, 0, 0, 0, 499,
	17, 0, 0, 0, 0, 0, 18, 79, 80, 28,
	91, 19, 0, 96, 0, 0, 81, 82, 83, 88,
	84, 85, 86, 87, 58, 35, 10, 9, 0, 11,
	0, 22, 0, 23, 0, 0, 12, 0, 0, 0,
	13, 14, 27, 34, 0, 15, 25, 0, 0, 26,
	0, 0, 16, 0, 21, 72, 73, 0, 74, 75,
	76, 77, 78, 0, 39, 95, 0, 62, 63, 0,
	64, 0, 0, 89, 0, 0, 0, 0, 98, 99,
	0, 0, 6, 0, 48, 483, 24, 0, 61, 90,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 46,
	0, 47, 42, 43, 51, 52, 53, 54, 55, 56,
	57, 59, 0, 40, 71, 41, 0, 0, 0, 0,
	17, 0, 0, 0, 0, 0, 18, 79, 80, 28,
	91, 19, 0, 96, 0, 0, 81, 82, 83, 88,
	84, 85, 86, 87, 58, 35, 10, 9, 0, 11,
	0, 22, 0, 23, 0, 0, 12, 0, 0, 0,
	13, 14, 27, 34, 0, 15, 25, 0, 0, 26,
	0, 0, 16, 0, 21, 72, 73, 0, 74, 75,
	76, 77, 78, 0, 39, 95, 0, 62, 63, 0,
	64, 0, 0, 89, 0, 0, 0, 0, 98, 99,
	0, 0, 6, 0, 48, 465, 24, 0, 61, 90,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 46,
	0, 47, 42, 43, 51, 52, 53, 54, 55, 56,
	57, 59, 0, 40, 71, 41, 0, 0, 0, 0,
	17, 0, 0, 0, 0, 0, 18, 79, 80, 28,
	91, 19, 0, 96, 0, 0, 81, 82, 83, 88,
	84, 85, 86, 87, 58, 35, 10, 9, 0, 11,
	0, 22, 0, 23, 0, 0, 12, 0, 0, 0,
	13, 14, 27, 34, 0, 15, 25, 0, 0, 26,
	0, 0, 16, 0, 21, 72, 73, 74, 75, 76,
	77, 78, 0, 0, 39, 95, 62, 63, 0, 64,
	0, 0, 0, 89, 0, 0, 0, 0, 98, 99,
	0, 0, 6, 0, 48, 0, 24, 0, 61, 90,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 45, 0, 0, 0, 0, 46, 0,
	47, 42, 43, 51, 52, 53, 54, 55, 56, 57,
	59, 0, 40, 71, 41, 0, 0, 0, 0, 17,
	0, 0, 0, 0, 0, 18, 79, 80, 28, 91,
	19, 0, 96, 0, 0, 81, 82, 83, 88, 84,
	85, 86, 87, 58, 35, 10, 9, 0, 11, 0,
	22, 0, 23, 0, 0, 12, 0, 0, 0, 13,
	14, 27, 34, 0, 15, 25, 0, 0, 26, 0,
	0, 16, 0, 21, 72, 73, 74, 75, 76, 77,
	78, 0, 0, 39, 95, 62, 63, 0, 64, 0,
	0, 0, 89, 0, 0, 0, 0, 98, 99, 0,
	0, 6, 412, 48, 0, 24, 0, 61, 90, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 46, 0, 47,
	42, 43, 51, 52, 53, 54, 55, 56, 57, 59,
	0, 40, 71, 41, 0, 0, 0, 0, 17, 0,
	0, 0, 0, 0, 18, 79, 80, 28, 91, 19,
	0, 96, 0, 0, 81, 82, 83, 88, 84, 85,
	86, 87, 58, 35, 10, 9, 0, 11, 0, 22,
	0, 23, 0, 0, 12, 0, 0, 0, 13, 14,
	27, 34, 0, 15, 25, 0, 0, 26, 0, 0,
	16, 0, 21, 72, 73, 74, 75, 76, 77, 78,
	0, 0, 39, 95, 62, 63, 0, 64, 0, 0,
	0, 89, 0, 0, 0, 0, 98, 99, 0, 0,
	6, 254, 48, 0, 24, 0, 61, 90, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 46, 0, 47, 42,
	43, 51, 52, 53, 54, 55, 56, 57, 59, 0,
	40, 71, 41, 0, 0, 0, 0, 17, 0, 0,
	0, 0, 0, 18, 79, 80, 28, 91, 19, 0,
	96, 0, 0, 81, 82, 83, 88, 84, 85, 86,
	87, 58, 35, 10, 9, 0, 11, 0, 22, 0,
	23, 0, 0, 12, 0, 0, 0, 13, 14, 27,
	34, 0, 15, 25, 0, 0, 26, 0, 0, 16,
	0, 21, 72, 73, 74, 75, 76, 77, 78, 0,
	0, 39, 95, 62, 63, 0, 64, 0, 0, 0,
	89, 0, 0, 0, 0, 98, 99, 0, 0, 6,
	0, 48, 0, 24, 0, 61, 90, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 165, 166, 167, 168, 170, 171, 172, 173, 174,
	175, 176, 177, 169, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	39, 95, 178, 179, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 391, 190, 0, 0,
	48, 387, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	191, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 0, 0, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	39, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 391, 428, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	429, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 0, 0, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	359, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	39, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 98, 99, 0, 322, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	39, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 302, 0, 0, 98, 99, 0, 0, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 74, 75, 76, 77, 78, 0,
	0, 72, 73, 62, 63, 0, 64, 0, 0, 0,
	39, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 197, 0, 0, 98, 99, 0, 0, 108, 0,
	48, 0, 0, 0, 61, 90, 92, 109, 91, 44,
	45, 96, 0, 0, 0, 46, 0, 47, 42, 43,
	51, 52, 53, 54, 55, 56, 57, 59, 0, 40,
	71, 41, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 79, 80, 109, 91, 0, 0, 96,
	0, 0, 81, 82, 83, 88, 84, 85, 86, 87,
	58, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 34,
	0, 0, 195, 0, 0, 0, 0, 0, 92, 0,
	0, 72, 73, 0, 0, 0, 0, 0, 0, 0,
	39, 95, 0, 0, 0, 0, 0, 0, 0, 89,
	124, 126, 125, 0, 98, 99, 0, 0, 0, 0,
	48, 0, 0, 0, 61, 90, 92, 0, 0, 0,
	149, 596, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 0, 148, 124, 126, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 150,
	122, 123, 127, 129, 128, 141, 142, 139, 140, 147,
	143, 144, 145, 146, 137, 138, 131, 132, 130, 133,
	135, 136, 0, 148, 0, 124, 126, 125, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 150, 122, 123,
	127, 129, 128, 141, 142, 139, 140, 147, 143, 144,
	145, 146, 137, 138, 131, 132, 130, 133, 135, 136,
	0, 148, 0, 124, 126, 125, 0, 0, 0, 0,
	0, 0, 597, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 150, 122, 123, 127, 129,
	128, 141, 142, 139, 140, 147, 143, 144, 145, 146,
	137, 138, 131, 132, 130, 133, 135, 136, 0, 148,
	124, 126, 125, 0, 0, 0, 0, 0, 0, 0,
	545, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 0, 148, 0, 124, 126,
	125, 0, 0, 0, 0, 0, 0, 312, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	150, 122, 123, 127, 129, 128, 141, 142, 139, 140,
	147, 143, 144, 145, 146, 137, 138, 131, 132, 130,
	133, 135, 136, 0, 148, 124, 126, 125, 0, 0,
	0, 0, 0, 0, 0, 121, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 150, 122, 123,
	127, 129, 128, 141, 142, 139, 140, 147, 143, 144,
	145, 146, 137, 138, 131, 132, 130, 133, 135, 136,
	0, 148, 124, 126, 125, 0, 0, 0, 0, 0,
	0, 517, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 150, 122, 123, 127, 129, 128,
	141, 142, 139, 140, 147, 143, 144, 145, 146, 137,
	138, 131, 132, 130, 133, 135, 136, 0, 148, 124,
	126, 125, 0, 0, 0, 0, 0, 0, 0, 498,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 150, 122, 123, 127, 129, 128, 141, 142, 139,
	140, 147, 143, 144, 145, 146, 137, 138, 131, 132,
	130, 133, 135, 136, 0, 148, 124, 126, 125, 0,
	0, 0, 0, 0, 0, 0, 497, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 150, 122,
	123, 127, 129, 128, 141, 142, 139, 140, 147, 143,
	144, 145, 146, 137, 138, 131, 132, 130, 133, 135,
	136, 0, 148, 124, 126, 125, 0, 0, 0, 0,
	0, 0, 0, 457, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 150, 122, 123, 127, 129,
	128, 141, 142, 139, 140, 147, 143, 144, 145, 146,
	137, 138, 131, 132, 130, 133, 135, 136, 0, 148,
	124, 126, 125, 0, 0, 0, 0, 0, 0, 0,
	456, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 0, 148, 124, 126, 125,
	0, 0, 0, 0, 0, 0, 0, 431, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 150,
	122, 123, 127, 129, 128, 141, 142, 139, 140, 147,
	143, 144, 145, 146, 137, 138, 131, 132, 130, 133,
	135, 136, 0, 148, 124, 126, 125, 0, 0, 0,
	0, 0, 0, 0, 419, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 150, 122, 123, 127,
	129, 128, 141, 142, 139, 140, 147, 143, 144, 145,
	146, 137, 138, 131, 132, 130, 133, 135, 136, 0,
	148, 124, 126, 125, 0, 0, 0, 0, 0, 0,
	0, 399, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 150, 122, 123, 127, 129, 128, 141,
	142, 139, 140, 147, 143, 144, 145, 146, 137, 138,
	131, 132, 130, 133, 135, 136, 0, 148, 124, 126,
	125, 0, 0, 0, 0, 0, 0, 0, 395, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	150, 122, 123, 127, 129, 128, 141, 142, 139, 140,
	147, 143, 144, 145, 146, 137, 138, 131, 132, 130,
	133, 135, 136, 0, 148, 124, 126, 125, 0, 0,
	0, 0, 0, 0, 0, 350, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 150, 122, 123,
	127, 129, 128, 141, 142, 139, 140, 147, 143, 144,
	145, 146, 137, 138, 131, 132, 130, 133, 135, 136,
	0, 148, 124, 126, 125, 0, 0, 0, 0, 0,
	513, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 150, 122, 123, 127, 129, 128,
	141, 142, 139, 140, 147, 143, 144, 145, 146, 137,
	138, 131, 132, 130, 133, 135, 136, 0, 148, 124,
	126, 125, 0, 0, 0, 0, 0, 511, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 150, 122, 123, 127, 129, 128, 141, 142, 139,
	140, 147, 143, 144, 145, 146, 137, 138, 131, 132,
	130, 133, 135, 136, 0, 148, 124, 126, 125, 0,
	0, 0, 0, 0, 502, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 150, 122,
	123, 127, 129, 128, 141, 142, 139, 140, 147, 143,
	144, 145, 146, 137, 138, 131, 132, 130, 133, 135,
	136, 0, 148, 124, 126, 125, 0, 0, 0, 0,
	0, 458, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 150, 122, 123, 127, 129,
	128, 141, 142, 139, 140, 147, 143, 144, 145, 146,
	137, 138, 131, 132, 130, 133, 135, 136, 0, 148,
	124, 126, 125, 0, 0, 0, 0, 0, 440, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 404, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 0, 148, 124, 126, 125,
	0, 0, 345, 0, 408, 421, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 150,
	122, 123, 127, 129, 128, 141, 142, 139, 140, 147,
	143, 144, 145, 146, 137, 138, 131, 132, 130, 133,
	135, 136, 0, 148, 124, 126, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 150, 122, 123, 127,
	129, 128, 141, 142, 139, 140, 147, 143, 144, 145,
	146, 137, 138, 131, 132, 130, 133, 135, 136, 0,
	148, 126, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 125, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 149, 0, 150, 122, 123, 127, 129,
	128, 141, 142, 139, 140, 147, 143, 144, 145, 146,
	137, 138, 131, 132, 130, 133, 135, 136, 361, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 149, 0, 150, 122, 123, 127, 129,
	128, 141, 142, 139, 140, 147, 143, 144, 145, 146,
	137, 138, 131, 132, 130, 133, 135, 136, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 134, 150, 122, 123, 127, 129, 128, 141, 142,
	139, 140, 147, 143, 144, 145, 146, 137, 138, 131,
	132, 130, 133, 135, 136, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 150,
	122, 123, 127, 129, 128, 141, 142, 139, 140, 147,
	143, 144, 145, 146, 137, 138, 131, 132, 130, 133,
	135, 136, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 123, 127, 129, 128,
	141, 142, 139, 140, 147, 143, 144, 145, 146, 137,
	138, 131, 132, 130, 133, 135, 136, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 127, 129, 128, 141, 142, 139, 140, 147, 143,
	144, 145, 146, 137, 138, 131, 132, 130, 133, 135,
	136, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 129, 128, 141, 142, 139,
	140, 147, 143, 144, 145, 146, 137, 138, 131, 132,
	130, 133, 135, 136, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 128, 141,
	142, 139, 140, 147, 143, 144, 145, 146, 137, 138,
	131, 132, 130, 133, 135, 136, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	141, 142, 139, 140, 147, 143, 144, 145, 146, 137,
	138, 131, 132, 130, 133, 135, 136, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134,
}
var yyPact = [...]int{

	-1000, -1000, 2741, -1000, -1000, -1000, -1000, -1000, -1000, 115,
	2741, 113, 108, 3710, 3710, 3710, -53, 253, 3710, -1000,
	3993, 107, 91, 84, -1000, 132, 3710, 302, 396, 364,
	351, 366, 2954, -1000, -1000, 83, -1000, -1000, 173, 81,
	2990, 3710, 3672, 3672, 3710, 3710, 3710, 3710, 3710, -1000,
	-1000, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 72, 3710,
	-1000, 303, 3710, 3710, 3710, -1000, 283, -1000, 145, 144,
	-1000, 34, 70, 69, 3710, 3710, 64, 3710, 3710, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 298,
	267, -1000, -6, 47, 47, 58, -1000, 137, 138, 272,
	2612, 3710, 202, 364, 3710, 3710, -46, 4934, -1000, -1000,
	-47, -54, 65, -1000, -1000, 59, -1000, 429, 53, -1000,
	4934, -1000, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
	3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
	3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 34, 3590,
	3710, 3672, 3710, 262, -1000, 3945, -62, -1000, 297, -1000,
	57, 2741, 56, -64, 391, 3470, 3710, 3710, 3710, 3710,
	3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, -1000, -1000,
	3710, 3710, 3710, -4, 2990, -104, 449, -1000, -1000, 4887,
	3672, 54, -1000, -1000, 283, 3710, -1000, 2990, -1000, 315,
	315, 360, 315, 4464, 315, 315, 315, 315, 315, 315,
	315, -1000, 3710, 315, -133, 258, 252, -1000, 227, 3350,
	3672, 5100, 5063, 5100, 3710, 26, 26, 47, 141, 118,
	-1000, -1000, 3710, 3710, 4934, 4934, 3710, 4934, 4934, 213,
	-1000, 222, 71, 258, 3710, -1000, -1000, 2870, -1000, 2990,
	274, 272, 137, -1000, -1000, -1000, -1000, 4417, 51, -1000,
	-65, 444, 4934, 4370, -1000, -1000, -1000, -1000, -53, -1000,
	253, 3710, -1000, 3710, 5172, 5206, 4980, 5100, 5023, 5239,
	5302, 5271, 502, 502, 502, 360, 315, 360, 360, 556,
	556, 646, 646, 646, 646, 443, 443, 443, 443, 646,
	-1000, 4840, 3710, 5137, 105, -1000, -1000, 4793, 98, -1000,
	427, 2483, -1000, -1000, -1000, 50, 3710, -1000, 3710, -1000,
	-1000, 5100, 3672, 5100, 5100, 5100, 5100, 5100, 5100, 5100,
	5100, 5100, 5100, 5100, 5100, 4323, -112, 4746, 47, -1000,
	3710, -1000, 38, 425, 2990, 3230, -1000, 2990, 4276, -113,
	-1000, 36, -1000, -1000, -1000, -1000, 384, 269, 4699, 143,
	95, 3710, -120, 47, -1000, -1000, 3710, -1000, 47, -1000,
	-1000, -1000, -1000, -53, 3710, 3710, -4, -53, 94, -1000,
	4934, 4229, 4182, -1000, -1000, -1000, 4652, -1000, 92, -1000,
	4934, 3710, 30, -1000, 137, 2354, 3710, 3710, 3710, 200,
	-1000, -1000, 4934, -1000, 3710, 5137, -66, 3672, 240, 262,
	2224, 3710, -1000, 45, 179, 4135, 4088, 2094, -1000, 1965,
	-1000, -1000, -1000, 4605, 418, 3710, -1000, 4934, 3672, 44,
	29, -1000, -1000, -1000, -123, -1000, -1000, 223, -1000, -1000,
	-1000, -1000, 3710, -1000, 5100, -1000, -1000, 4558, -1000, -1000,
	-124, 4511, -1000, -1000, -1000, 3710, -1000, -1000, -1000, -1000,
	3110, 4934, -1000, -1000, -1000, -1000, 4040, -67, 4934, -1000,
	-69, -70, 5137, -1000, -1000, 79, -1000, 3672, 43, 2990,
	-1000, -1000, -1000, -1000, 4934, 219, 179, 18, 442, -1000,
	348, -1000, -1000, 195, -1000, -1000, -1000, 2741, 389, -71,
	-1000, -1000, -1000, 3710, 5100, -1000, 2990, 418, -1000, -1000,
	3897, -1000, -1000, -1000, -1000, -1000, 1835, -72, 3710, 87,
	-1000, 300, -1000, 1318, 240, -1000, 2990, -125, 1706, -1000,
	-1000, 35, 131, -3, 180, 179, 109, -1000, -1000, -1000,
	-1000, -1000, 2741, 5100, -12, 88, -73, -1000, -39, -1000,
	3710, 3, 49, -74, 255, -1000, -1000, -1000, -40, -43,
	-1000, -75, 206, -1000, 376, 376, -5, -1000, 244, -1000,
	2741, 418, -1000, -1000, 1577, 3850, -1000, -1000, -1000, -1000,
	-78, 1447, 1318, -1000, -1000, 344, -1000, 1188, -1000, 179,
	-1000, 291, 414, -1000, -1000, -1000, -1000, -1000, 2741, 2741,
	-1000, -89, -1000, -44, 206, -1000, 127, -1000, 121, 74,
	-1000, -1000, 232, 3710, 1059, 2741, 2741, -1000, 120, -1000,
	-1000, -1000, -1000, 291, -1000, 4934, -95, -1000, 930, 801,
	-1000, -1000, 672, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 577, 576, 66, 471, 61, 37, 572, 571, 569,
	23, 0, 70, 12, 24, 238, 7, 568, 21, 567,
	32, 29, 30, 566, 324, 323, 239, 563, 562, 560,
	2, 557, 36, 25, 552, 226, 28, 550, 548, 547,
	545, 544, 44, 541, 539, 1, 17, 536, 5, 534,
	533, 530, 528, 526, 525, 523, 522, 521, 518, 13,
	517, 516, 99, 514, 513, 510, 10, 509, 502, 501,
	498, 487, 481, 393, 479, 476, 8, 26, 22, 18,
	9, 11, 35, 3, 307, 464, 460, 20, 4,
}
var yyR1 = [...]int{

	0, 1, 82, 44, 44, 5, 5, 6, 6, 6,
	2, 2, 63, 63, 45, 45, 7, 7, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 47, 47, 58, 58, 9, 9, 57, 57,
	14, 4, 85, 85, 86, 86, 13, 13, 13, 13,
	49, 49, 48, 48, 8, 8, 53, 53, 53, 53,
	46, 46, 46, 46, 46, 50, 50, 61, 61, 60,
	60, 52, 52, 51, 51, 59, 59, 67, 67, 16,
	16, 17, 17, 81, 81, 79, 79, 79, 80, 80,
	62, 62, 68, 68, 18, 18, 65, 65, 20, 64,
	64, 21, 21, 10, 56, 56, 22, 66, 66, 69,
	69, 23, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 83, 87, 88,
	84, 84, 71, 71, 72, 72, 30, 30, 31, 31,
	31, 31, 24, 24, 25, 25, 28, 28, 55, 55,
	55, 70, 70, 35, 35, 35, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 36, 36, 36, 11, 11, 12, 12, 34,
	37, 37, 37, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 15, 15, 15, 26, 26, 26, 40, 40,
	41, 41, 41, 41, 41, 41, 32, 32, 32, 33,
	33, 33, 76, 77, 77, 75, 75, 74, 74, 74,
	74, 74, 74, 73, 73, 73, 73, 42, 42, 42,
	42, 42, 42, 42, 43, 43, 43, 43, 27, 27,
	27, 27, 27, 27, 27, 54, 54, 78,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 0, 1, 3, 1, 3, 2,
	1, 1, 3, 1, 2, 0, 1, 1, 3, 1,
	1, 5, 7, 9, 5, 3, 3, 3, 3, 3,
	3, 1, 2, 5, 7, 9, 5, 1, 6, 3,
	3, 2, 0, 9, 1, 3, 0, 4, 1, 3,
	1, 13, 0, 1, 0, 1, 1, 2, 4, 3,
	1, 4, 1, 4, 1, 4, 3, 4, 4, 5,
	0, 5, 5, 4, 4, 1, 4, 5, 6, 1,
	3, 6, 7, 3, 6, 1, 0, 1, 3, 4,
	6, 0, 1, 1, 2, 1, 1, 1, 0, 2,
	2, 3, 1, 3, 1, 2, 3, 1, 1, 3,
	1, 1, 3, 4, 3, 1, 1, 0, 1, 3,
	1, 3, 6, 5, 3, 4, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 3, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	3, 2, 1, 2, 4, 2, 13, 1, 0, 0,
	0, 1, 0, 4, 3, 1, 1, 2, 2, 4,
	4, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 0, 1, 4, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 3,
	1, 1, 1, 3, 3, 1, 1, 0, 1, 1,
	1, 3, 1, 1, 3, 1, 1, 4, 4, 4,
	4, 1, 1, 1, 3, 1, 4, 2, 3, 3,
	1, 4, 4, 3, 3, 3, 1, 3, 1, 1,
	3, 1, 1, 0, 1, 3, 1, 3, 1, 4,
	2, 6, 4, 2, 2, 1, 2, 1, 4, 3,
	3, 3, 6, 3, 1, 1, 2, 1, 4, 4,
	2, 2, 4, 2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -44, -2, -3, -4, 158, -60, -51, 103,
	102, 105, 112, 116, 117, 121, 128, 76, 82, 87,
	-11, 130, 107, 109, 162, 122, 125, 118, 85, -83,
	-61, -52, -15, -19, 119, 101, -39, -40, -37, 140,
	69, 71, 58, 59, 49, 50, 55, 57, 160, -23,
	-27, 60, 61, 62, 63, 64, 65, 66, 100, 67,
	-29, 164, 13, 14, 16, -26, -36, -31, -24, -34,
	-35, 70, 131, 132, 4, 5, 6, 7, 8, 83,
	84, 92, 93, 94, 96, 97, 98, 99, 95, 149,
	165, 86, 166, -6, -38, 141, 89, -5, 154, 155,
	-45, 160, -3, -83, 160, 160, -12, -11, 76, 85,
	-12, -12, -65, -20, -26, -64, -21, 86, -56, -22,
	-11, 162, 33, 34, 10, 12, 11, 35, 37, 36,
	51, 49, 50, 52, 68, 53, 54, 47, 48, 40,
	41, 38, 39, 43, 44, 45, 46, 42, 56, 30,
	32, 160, 160, 160, 158, -11, 85, 31, -84, 37,
	73, 74, 73, 75, 74, 17, 18, 19, 20, 29,
	21, 22, 23, 24, 25, 26, 27, 28, 58, 59,
	160, 69, 158, 139, 160, -76, -75, -77, -74, -11,
	37, 140, -11, -15, -36, 160, -35, 69, -15, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -28, 160, -11, -55, 88, -73, -42, 86, 151,
	152, -11, -11, -11, 69, 153, 153, -25, -24, -41,
	-6, -26, 160, 160, -11, -11, 160, -11, -11, 88,
	150, -73, -73, 88, 158, -26, -62, 160, -62, 160,
	155, 155, -5, -7, 159, -3, -4, -11, 103, -84,
	-66, -69, -11, -11, 162, 162, 162, 162, 9, 162,
	9, 17, 162, 9, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-25, -11, 31, -11, -57, -14, -15, -11, -63, -10,
	85, -45, 162, 162, 85, -87, 160, -3, 160, 162,
	31, -11, 37, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -12, -11, -33, 85,
	158, -26, -76, 163, 9, 15, -15, 160, -11, -76,
	161, -12, 164, -42, -42, 88, 69, 139, -11, 90,
	-15, 15, -12, -32, -82, -26, 158, 85, -32, -82,
	-26, -70, -62, 153, 69, 158, 139, 153, -54, -78,
	-11, -11, -11, 150, 150, 165, -11, 161, -68, -18,
	-11, 156, -76, 85, -5, 161, 160, 162, 9, 161,
	-20, -21, -11, -22, 31, -11, 161, 9, 111, 9,
	161, 17, 159, -87, 160, -11, -11, -45, -15, 161,
	163, 159, -62, -11, 161, 17, -77, -11, 37, 140,
	-76, 161, 163, 161, -43, 85, 91, 50, 86, 85,
	159, 159, 69, 159, -11, 163, -62, -11, -62, -26,
	-12, -11, -33, -26, 161, 9, 161, 161, 159, 161,
	9, -11, 161, -50, -3, 31, -11, -66, -11, -53,
	158, 31, -11, 162, -14, -13, -15, 37, 140, 69,
	-10, -8, -3, 31, -11, -47, 160, -59, -67, -16,
	-17, -81, -79, 30, 141, 142, -6, 161, 161, 75,
	-3, 31, 159, 17, -11, -15, 160, 161, 163, 91,
	-11, 159, 163, 159, -78, -18, -45, 161, 162, -46,
	162, -46, 162, 161, 15, -15, 160, -76, -45, -87,
	-9, 123, 124, -59, 161, 9, -85, 37, -79, -3,
	31, 162, -45, -11, -76, 163, 104, 162, -66, 159,
	114, 115, -46, 113, -46, -48, -3, 31, -13, -76,
	163, 110, 160, 158, 161, -71, 126, -16, -86, 156,
	-45, 161, 159, 162, 161, -11, 31, 162, 159, 162,
	113, -45, 161, 161, 162, -58, -6, -45, -80, 31,
	-80, 160, 86, -49, -3, 31, 31, 162, -45, -45,
	162, 108, -48, 86, 35, 159, -88, -81, -88, -72,
	-30, 86, 37, 17, -45, -45, -45, 162, 161, -6,
	158, 158, 161, 9, 86, -11, 106, 158, -45, -45,
	-30, 162, -45, 159, 159, 159, -88, -88,
}
var yyDef = [...]int{

	4, -2, 1, 3, 10, 11, 15, 19, 20, 0,
	0, 0, 0, 247, 247, 247, 0, 212, 0, 31,
	0, 0, 0, 0, 37, 0, 0, 0, 5, 200,
	79, 0, -2, 246, 197, 0, -2, 263, 249, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	179, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	189, 218, 0, 192, 0, 256, 241, 261, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 0,
	0, 265, 0, -2, 0, 0, 225, 7, 0, 0,
	0, 0, 0, 200, 117, 0, 0, 248, 212, 5,
	0, 0, 0, 107, 108, 0, 110, 111, 0, 115,
	116, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 15, 0, 0, 41, 198, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 141,
	0, 247, 0, 0, 283, 0, 282, 286, 284, 288,
	0, 0, 126, -2, 0, 0, -2, 283, -2, 160,
	161, 162, 163, 0, 180, 181, 182, 183, 184, 185,
	186, 187, 247, 188, 0, 219, 220, 295, 297, 0,
	0, 191, 193, 195, 247, 0, 0, 221, 214, 215,
	213, 270, 0, 0, 310, 311, 0, 313, 314, 0,
	237, 0, 0, 0, 0, 267, 208, 0, 211, 283,
	0, 0, 9, 14, 18, 16, 17, 0, 0, 198,
	0, 118, 120, 0, 25, 26, 27, 28, 0, 29,
	0, 0, 30, 0, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	173, 0, 0, 178, 0, 48, -2, 0, 0, 13,
	0, 0, 39, 40, 198, 0, 0, 80, 0, 83,
	15, 124, 0, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 0, 0, 264, 279,
	0, 281, 0, 224, 283, 0, -2, 283, 0, 0,
	-2, 0, 190, 296, 293, 294, 0, 0, 0, 0,
	250, 0, 0, 0, -2, -2, 0, 2, 0, -2,
	-2, 121, 222, 0, 247, 0, 0, 0, 0, 315,
	317, 0, 0, 236, 239, 238, 0, 100, 0, 102,
	104, 0, 0, 6, 8, 0, 0, 117, 0, 0,
	106, 109, 112, 114, 0, 177, 0, 0, 0, 0,
	0, 0, 42, 0, -2, 0, 0, 0, -2, 0,
	257, 259, 260, 0, 0, 0, 285, 287, 0, 0,
	0, -2, 224, 217, 0, 304, 305, 0, 307, 299,
	300, 301, 0, 303, 194, 258, 209, 0, 210, 274,
	0, 0, 273, 275, 308, 0, 309, 312, 266, 101,
	0, 105, 223, 21, 75, 15, 0, 0, 119, 24,
	70, 70, 176, 33, 49, 0, -2, 0, 0, 283,
	12, 36, 64, 15, 198, 46, -2, 0, 85, 87,
	52, 92, 93, 0, 95, 96, 97, 0, 0, 0,
	77, 15, 280, 0, 123, -2, 283, 292, 298, 306,
	0, 277, 271, 272, 316, 103, 0, 0, 117, 0,
	70, 0, 70, 0, 0, -2, 283, 0, 0, 113,
	38, 0, 0, 0, 202, 91, 54, 53, 94, 78,
	15, 84, 81, 122, 0, 0, 0, 22, 0, 66,
	0, 0, 0, 0, 0, 34, 62, 15, 0, 0,
	-2, 0, 0, 15, 98, 98, 0, 88, 0, 55,
	82, 291, 302, 76, 0, 0, 15, 15, 67, 68,
	0, 0, 0, 58, 65, 0, 44, 0, 199, 0,
	199, 0, 89, 23, 60, 15, 15, 15, 73, 74,
	69, 0, 35, 0, 0, 47, 0, 99, 0, 0,
	205, 206, 0, 0, 0, 71, 72, 63, 0, 45,
	15, 15, 203, 0, 207, 90, 0, 15, 0, 0,
	204, 61, 0, 199, 199, 43, 51, 196,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:265
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:291
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:292
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:382
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:389
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:393
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:394
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:404
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:406
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:408
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:419
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:421
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:423
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:432
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:433
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:434
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:440
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.stmt = nil
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:457
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:461
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:467
		{
			yyVAL.stmt = ast.NewFunctionStatement(yyDollar[1].tok, yyDollar[2].num, yyDollar[3].tok, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:471
		{
			yyVAL.num = 0
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:472
		{
			yyVAL.num = 1
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:476
		{
			yyVAL.num = 0
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:477
		{
			yyVAL.num = 1
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:530
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:531
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:547
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:551
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:552
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:553
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:554
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:558
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:560
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:562
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:564
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:571
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:576
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:578
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:584
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:590
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:592
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:597
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:602
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:609
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:610
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:615
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:617
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:622
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:624
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:628
		{
			yyVAL.expr = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:633
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:634
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:638
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:639
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:640
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:644
		{
			yyVAL.expr = nil
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:645
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:649
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:650
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:655
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:657
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:661
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:662
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:666
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:667
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:672
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:676
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:677
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:681
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:682
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:811
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:815
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:816
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:820
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:824
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:825
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:829
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:830
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:847
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:854
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:856
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:858
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:860
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:861
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:863
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:865
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:867
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:869
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:871
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:873
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:875
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:877
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:879
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:881
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:883
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:885
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:886
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:887
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:888
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:893
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:910
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:911
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:912
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:913
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:914
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:915
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:917
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:919
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:921
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:923
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:925
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:927
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:929
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:931
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:933
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:935
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:936
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:937
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:955
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:956
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:957
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:958
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:959
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:960
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 196:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:963
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:972
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:976
		{
			yyVAL.expr = nil
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:980
		{
			yyVAL.expr = nil
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:984
		{
			yyVAL.num = 0
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:985
		{
			yyVAL.num = 1
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:989
		{
			yyVAL.expr = nil
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:990
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:994
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:995
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:999
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1000
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1005
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1007
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1009
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1011
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1015
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1016
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1020
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1026
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1031
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1032
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1033
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1037
		{
			yyVAL.expr = nil
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1038
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1043
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1044
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1048
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1049
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1050
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1055
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1056
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1057
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1058
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1059
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1060
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1061
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1062
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1067
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1069
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1071
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1075
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1076
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1080
		{
			yyVAL.expr = nil
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1081
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1085
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1090
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1091
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1095
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1096
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1097
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1102
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1104
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1106
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1108
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1110
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1111
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1116
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1118
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1120
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1124
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1125
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1126
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1131
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1133
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1140
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1142
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1144
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1146
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1148
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1153
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1154
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1158
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1159
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1165
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1169
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1170
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1175
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1177
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1182
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1184
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1186
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1188
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1190
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1192
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1197
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1199
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1201
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1203
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1208
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1210
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1212
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1214
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1216
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1218
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1219
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1223
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1224
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1225
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1226
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1231
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1232
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1234
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1236
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1238
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1240
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1242
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1246
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1248
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1252
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
