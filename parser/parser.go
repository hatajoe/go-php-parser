//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1258

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	69, 247,
	139, 247,
	153, 247,
	158, 247,
	-2, 242,
	-1, 33,
	160, 250,
	-2, 259,
	-1, 68,
	69, 249,
	139, 249,
	153, 249,
	158, 249,
	160, 252,
	-2, 237,
	-1, 92,
	153, 210,
	-2, 239,
	-1, 189,
	69, 247,
	139, 247,
	153, 247,
	158, 247,
	-2, 137,
	-1, 192,
	160, 252,
	-2, 249,
	-1, 194,
	69, 247,
	139, 247,
	153, 247,
	158, 247,
	-2, 139,
	-1, 287,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 161,
	-1, 288,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 162,
	-1, 289,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 163,
	-1, 290,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 164,
	-1, 291,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 165,
	-1, 292,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 166,
	-1, 293,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 167,
	-1, 294,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 168,
	-1, 295,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 169,
	-1, 302,
	9, 48,
	161, 48,
	-2, 247,
	-1, 340,
	9, 287,
	161, 287,
	163, 287,
	-2, 247,
	-1, 344,
	69, 248,
	139, 248,
	153, 248,
	158, 248,
	160, 251,
	-2, 171,
	-1, 359,
	160, 273,
	-2, 240,
	-1, 360,
	160, 275,
	-2, 265,
	-1, 364,
	160, 273,
	-2, 241,
	-1, 365,
	160, 275,
	-2, 266,
	-1, 411,
	69, 247,
	139, 247,
	153, 247,
	158, 247,
	-2, 122,
	-1, 424,
	160, 251,
	-2, 248,
	-1, 438,
	161, 83,
	-2, 88,
	-1, 470,
	15, 53,
	161, 53,
	-2, 247,
	-1, 488,
	9, 286,
	161, 286,
	163, 286,
	-2, 247,
	-1, 518,
	15, 54,
	161, 54,
	-2, 247,
	-1, 552,
	15, 56,
	161, 56,
	-2, 221,
}

const yyPrivate = 57344

const yyLast = 5170

var yyAct = [...]int{

	19, 99, 596, 599, 498, 92, 547, 496, 469, 256,
	499, 512, 356, 105, 105, 105, 384, 253, 118, 181,
	4, 305, 374, 117, 301, 332, 153, 101, 183, 114,
	64, 90, 111, 359, 346, 358, 333, 90, 185, 188,
	552, 213, 195, 196, 197, 198, 199, 505, 96, 200,
	201, 202, 203, 204, 205, 206, 567, 209, 491, 439,
	217, 218, 219, 425, 413, 244, 337, 104, 618, 606,
	190, 190, 68, 232, 233, 228, 235, 236, 30, 590,
	575, 108, 109, 269, 570, 266, 264, 564, 611, 539,
	528, 515, 513, 511, 467, 392, 517, 454, 449, 404,
	402, 254, 313, 258, 259, 106, 309, 581, 262, 334,
	90, 91, 192, 192, 107, 90, 261, 91, 189, 194,
	260, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 250, 297, 299,
	607, 303, 228, 574, 307, 214, 573, 349, 565, 246,
	362, 90, 315, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 311, 557, 329, 105, 331,
	190, 185, 242, 97, 98, 435, 63, 568, 533, 490,
	91, 456, 342, 426, 185, 91, 417, 554, 519, 489,
	336, 245, 112, 438, 391, 341, 500, 312, 310, 105,
	247, 234, 231, 343, 230, 208, 352, 190, 542, 543,
	215, 216, 192, 105, 542, 543, 180, 176, 302, 558,
	369, 375, 376, 361, 380, 377, 268, 465, 265, 263,
	610, 91, 516, 381, 151, 330, 385, 190, 185, 453,
	448, 405, 401, 347, 348, 471, 229, 177, 364, 192,
	363, 107, 150, 569, 436, 340, 149, 387, 397, 541,
	118, 103, 102, 100, 107, 434, 345, 615, 243, 347,
	107, 348, 348, 347, 609, 555, 152, 473, 563, 192,
	357, 367, 248, 398, 106, 354, 396, 395, 389, 400,
	371, 249, 368, 107, 90, 224, 223, 95, 560, 225,
	214, 408, 349, 409, 372, 214, 410, 501, 502, 370,
	214, 66, 349, 524, 525, 255, 350, 179, 492, 612,
	97, 98, 582, 229, 601, 416, 501, 502, 214, 185,
	420, 115, 185, 97, 98, 306, 178, 190, 594, 97,
	98, 214, 432, 237, 222, 214, 437, 241, 472, 94,
	212, 423, 441, 107, 464, 388, 335, 419, 154, 132,
	105, 445, 97, 98, 379, 215, 216, 536, 191, 378,
	215, 216, 221, 600, 91, 215, 216, 455, 214, 192,
	211, 226, 460, 258, 462, 411, 351, 446, 415, 593,
	466, 580, 461, 215, 216, 527, 430, 478, 458, 314,
	360, 365, 571, 542, 543, 238, 215, 216, 155, 487,
	215, 216, 602, 476, 440, 486, 474, 468, 418, 442,
	483, 156, 157, 190, 190, 406, 493, 444, 545, 542,
	543, 428, 431, 267, 503, 534, 393, 429, 239, 240,
	375, 112, 190, 215, 216, 385, 296, 158, 160, 159,
	338, 509, 131, 133, 134, 562, 146, 535, 226, 220,
	62, 508, 507, 146, 185, 192, 192, 514, 132, 521,
	579, 302, 470, 182, 184, 132, 529, 530, 598, 559,
	185, 522, 366, 520, 192, 257, 383, 495, 526, 110,
	488, 113, 190, 304, 28, 6, 503, 494, 576, 531,
	300, 537, 258, 116, 210, 373, 463, 29, 7, 457,
	185, 540, 583, 479, 2, 544, 550, 546, 427, 556,
	227, 34, 33, 93, 548, 35, 67, 65, 57, 551,
	503, 207, 561, 566, 192, 47, 193, 46, 190, 31,
	518, 572, 497, 106, 523, 443, 475, 578, 335, 447,
	577, 251, 107, 90, 3, 1, 95, 0, 0, 588,
	589, 0, 135, 136, 129, 130, 128, 131, 133, 134,
	592, 146, 0, 584, 0, 597, 503, 603, 604, 605,
	192, 548, 0, 132, 0, 0, 470, 0, 0, 0,
	608, 0, 0, 613, 72, 73, 74, 75, 76, 0,
	0, 616, 0, 59, 60, 617, 61, 619, 94, 0,
	0, 0, 0, 622, 0, 0, 0, 0, 0, 0,
	0, 97, 98, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 41,
	42, 0, 0, 0, 0, 43, 0, 44, 39, 40,
	48, 49, 50, 51, 52, 53, 54, 56, 0, 37,
	69, 38, 0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 17, 77, 78, 27, 90, 18, 0, 95,
	0, 0, 79, 80, 81, 86, 82, 83, 84, 85,
	55, 32, 9, 8, 0, 10, 0, 21, 0, 22,
	0, 0, 11, 0, 0, 0, 12, 13, 26, 89,
	0, 14, 24, 0, 0, 25, 0, 0, 15, 0,
	20, 70, 71, 72, 73, 74, 75, 76, 0, 0,
	36, 94, 59, 60, 0, 61, 0, 0, 0, 87,
	0, 0, 0, 0, 97, 98, 0, 0, 5, 621,
	45, 0, 23, 0, 58, 88, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 16, 0, 0, 0, 0,
	0, 17, 77, 78, 27, 90, 18, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	32, 9, 8, 0, 10, 0, 21, 0, 22, 0,
	0, 11, 0, 0, 0, 12, 13, 26, 89, 0,
	14, 24, 0, 0, 25, 0, 0, 15, 0, 20,
	70, 71, 72, 73, 74, 75, 76, 0, 0, 36,
	94, 59, 60, 0, 61, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 0, 0, 5, 620, 45,
	0, 23, 0, 58, 88, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 0,
	0, 0, 0, 43, 0, 44, 39, 40, 48, 49,
	50, 51, 52, 53, 54, 56, 0, 37, 69, 38,
	0, 0, 0, 0, 16, 0, 0, 0, 0, 0,
	17, 77, 78, 27, 90, 18, 0, 95, 0, 0,
	79, 80, 81, 86, 82, 83, 84, 85, 55, 32,
	9, 8, 0, 10, 614, 21, 0, 22, 0, 0,
	11, 0, 0, 0, 12, 13, 26, 89, 0, 14,
	24, 0, 0, 25, 0, 0, 15, 0, 20, 70,
	71, 72, 73, 74, 75, 76, 0, 0, 36, 94,
	59, 60, 0, 61, 0, 0, 0, 87, 0, 0,
	0, 0, 97, 98, 0, 0, 5, 0, 45, 0,
	23, 0, 58, 88, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 42, 0, 0,
	0, 0, 43, 0, 44, 39, 40, 48, 49, 50,
	51, 52, 53, 54, 56, 0, 37, 69, 38, 0,
	0, 0, 0, 16, 0, 0, 0, 0, 0, 17,
	77, 78, 27, 90, 18, 0, 95, 0, 0, 79,
	80, 81, 86, 82, 83, 84, 85, 55, 32, 9,
	8, 0, 10, 0, 21, 0, 22, 0, 0, 11,
	0, 0, 0, 12, 13, 26, 89, 0, 14, 24,
	0, 0, 25, 0, 0, 15, 0, 20, 70, 71,
	0, 72, 73, 74, 75, 76, 0, 36, 94, 0,
	59, 60, 0, 61, 0, 0, 87, 0, 0, 0,
	0, 97, 98, 0, 0, 5, 595, 45, 549, 23,
	0, 58, 88, 91, 129, 130, 128, 131, 133, 134,
	0, 146, 0, 0, 0, 0, 41, 42, 0, 0,
	0, 0, 43, 132, 44, 39, 40, 48, 49, 50,
	51, 52, 53, 54, 56, 0, 37, 69, 38, 0,
	0, 0, 0, 16, 0, 0, 0, 0, 0, 17,
	77, 78, 27, 90, 18, 0, 95, 0, 0, 79,
	80, 81, 86, 82, 83, 84, 85, 55, 32, 9,
	8, 0, 10, 0, 21, 0, 22, 0, 0, 11,
	0, 0, 0, 12, 13, 26, 89, 0, 14, 24,
	0, 0, 25, 0, 0, 15, 0, 20, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 36, 94, 59,
	60, 0, 61, 0, 0, 0, 87, 0, 0, 0,
	0, 97, 98, 0, 0, 5, 0, 45, 0, 23,
	0, 58, 88, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 42, 0, 0, 0,
	0, 43, 0, 44, 39, 40, 48, 49, 50, 51,
	52, 53, 54, 56, 0, 37, 69, 38, 0, 0,
	0, 0, 16, 0, 0, 0, 0, 0, 17, 77,
	78, 27, 90, 18, 0, 95, 0, 0, 79, 80,
	81, 86, 82, 83, 84, 85, 55, 32, 9, 8,
	0, 10, 0, 21, 591, 22, 0, 0, 11, 0,
	0, 0, 12, 13, 26, 89, 0, 14, 24, 0,
	0, 25, 0, 0, 15, 0, 20, 70, 71, 0,
	72, 73, 74, 75, 76, 0, 36, 94, 0, 59,
	60, 0, 61, 0, 0, 87, 0, 0, 0, 0,
	97, 98, 0, 0, 5, 0, 45, 585, 23, 0,
	58, 88, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 42, 0, 0, 0,
	0, 43, 0, 44, 39, 40, 48, 49, 50, 51,
	52, 53, 54, 56, 0, 37, 69, 38, 0, 0,
	0, 0, 16, 0, 0, 0, 0, 0, 17, 77,
	78, 27, 90, 18, 0, 95, 0, 0, 79, 80,
	81, 86, 82, 83, 84, 85, 55, 32, 9, 8,
	0, 10, 0, 21, 0, 22, 0, 0, 11, 0,
	0, 0, 12, 13, 26, 89, 0, 14, 24, 0,
	0, 25, 0, 0, 15, 0, 20, 70, 71, 72,
	73, 74, 75, 76, 0, 0, 36, 94, 59, 60,
	0, 61, 0, 0, 0, 87, 0, 0, 0, 0,
	97, 98, 0, 0, 5, 0, 45, 0, 23, 0,
	58, 88, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 42, 0, 0, 0, 0,
	43, 0, 44, 39, 40, 48, 49, 50, 51, 52,
	53, 54, 56, 0, 37, 69, 38, 0, 0, 0,
	0, 16, 0, 0, 0, 0, 0, 17, 77, 78,
	27, 90, 18, 0, 95, 0, 0, 79, 80, 81,
	86, 82, 83, 84, 85, 55, 32, 9, 8, 0,
	10, 0, 21, 0, 22, 553, 0, 11, 0, 0,
	0, 12, 13, 26, 89, 0, 14, 24, 0, 0,
	25, 0, 0, 15, 0, 20, 70, 71, 72, 73,
	74, 75, 76, 0, 0, 36, 94, 59, 60, 0,
	61, 0, 0, 0, 87, 0, 0, 0, 0, 97,
	98, 0, 0, 5, 0, 45, 0, 23, 0, 58,
	88, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 42, 0, 0, 0, 0, 43,
	0, 44, 39, 40, 48, 49, 50, 51, 52, 53,
	54, 56, 0, 37, 69, 38, 0, 0, 0, 0,
	16, 0, 0, 0, 0, 0, 17, 77, 78, 27,
	90, 18, 0, 95, 0, 0, 79, 80, 81, 86,
	82, 83, 84, 85, 55, 32, 9, 8, 538, 10,
	0, 21, 0, 22, 0, 0, 11, 0, 0, 0,
	12, 13, 26, 89, 0, 14, 24, 0, 0, 25,
	0, 0, 15, 0, 20, 70, 71, 0, 72, 73,
	74, 75, 76, 0, 36, 94, 0, 59, 60, 0,
	61, 0, 0, 87, 0, 0, 0, 0, 97, 98,
	0, 0, 5, 0, 45, 484, 23, 0, 58, 88,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 42, 0, 0, 0, 0, 43,
	0, 44, 39, 40, 48, 49, 50, 51, 52, 53,
	54, 56, 0, 37, 69, 38, 0, 0, 0, 0,
	16, 0, 0, 0, 0, 0, 17, 77, 78, 27,
	90, 18, 0, 95, 0, 0, 79, 80, 81, 86,
	82, 83, 84, 85, 55, 32, 9, 8, 0, 10,
	0, 21, 0, 22, 0, 0, 11, 0, 0, 0,
	12, 13, 26, 89, 0, 14, 24, 0, 0, 25,
	0, 0, 15, 0, 20, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 36, 94, 59, 60, 0, 61,
	0, 0, 0, 87, 0, 0, 0, 0, 97, 98,
	0, 0, 5, 0, 45, 0, 23, 0, 58, 88,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 0, 0, 0, 0, 43, 0,
	44, 39, 40, 48, 49, 50, 51, 52, 53, 54,
	56, 0, 37, 69, 38, 0, 0, 0, 482, 16,
	0, 0, 0, 0, 0, 17, 77, 78, 27, 90,
	18, 0, 95, 0, 0, 79, 80, 81, 86, 82,
	83, 84, 85, 55, 32, 9, 8, 0, 10, 0,
	21, 0, 22, 0, 0, 11, 0, 0, 0, 12,
	13, 26, 89, 0, 14, 24, 0, 0, 25, 0,
	0, 15, 0, 20, 70, 71, 0, 72, 73, 74,
	75, 76, 0, 36, 94, 0, 59, 60, 0, 61,
	0, 0, 87, 0, 0, 0, 0, 97, 98, 0,
	0, 5, 0, 45, 477, 23, 0, 58, 88, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 0, 0, 0, 0, 43, 0,
	44, 39, 40, 48, 49, 50, 51, 52, 53, 54,
	56, 0, 37, 69, 38, 0, 0, 0, 0, 16,
	0, 0, 0, 0, 0, 17, 77, 78, 27, 90,
	18, 0, 95, 0, 0, 79, 80, 81, 86, 82,
	83, 84, 85, 55, 32, 9, 8, 0, 10, 0,
	21, 0, 22, 0, 0, 11, 0, 0, 0, 12,
	13, 26, 89, 0, 14, 24, 0, 0, 25, 0,
	0, 15, 0, 20, 70, 71, 0, 72, 73, 74,
	75, 76, 0, 36, 94, 0, 59, 60, 0, 61,
	0, 0, 87, 0, 0, 0, 0, 97, 98, 0,
	0, 5, 0, 45, 459, 23, 0, 58, 88, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 0, 0, 0, 0, 43, 0,
	44, 39, 40, 48, 49, 50, 51, 52, 53, 54,
	56, 0, 37, 69, 38, 0, 0, 0, 0, 16,
	0, 0, 0, 0, 0, 17, 77, 78, 27, 90,
	18, 0, 95, 0, 0, 79, 80, 81, 86, 82,
	83, 84, 85, 55, 32, 9, 8, 0, 10, 0,
	21, 0, 22, 0, 0, 11, 0, 0, 0, 12,
	13, 26, 89, 0, 14, 24, 0, 0, 25, 0,
	0, 15, 0, 20, 70, 71, 72, 73, 74, 75,
	76, 0, 0, 36, 94, 59, 60, 0, 61, 0,
	0, 0, 87, 0, 0, 0, 0, 97, 98, 0,
	0, 5, 0, 45, 0, 23, 0, 58, 88, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 42, 0, 0, 0, 0, 43, 0, 44,
	39, 40, 48, 49, 50, 51, 52, 53, 54, 56,
	0, 37, 69, 38, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 17, 77, 78, 27, 90, 18,
	0, 95, 0, 0, 79, 80, 81, 86, 82, 83,
	84, 85, 55, 32, 9, 8, 0, 10, 0, 21,
	0, 22, 0, 0, 11, 0, 0, 0, 12, 13,
	26, 89, 0, 14, 24, 0, 0, 25, 0, 0,
	15, 0, 20, 70, 71, 72, 73, 74, 75, 76,
	0, 0, 36, 94, 59, 60, 0, 61, 0, 0,
	0, 87, 0, 0, 0, 0, 97, 98, 0, 0,
	5, 407, 45, 0, 23, 0, 58, 88, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 0, 0, 0, 0, 43, 0, 44, 39,
	40, 48, 49, 50, 51, 52, 53, 54, 56, 0,
	37, 69, 38, 0, 0, 0, 0, 16, 0, 0,
	0, 0, 0, 17, 77, 78, 27, 90, 18, 0,
	95, 0, 0, 79, 80, 81, 86, 82, 83, 84,
	85, 55, 32, 9, 8, 0, 10, 0, 21, 0,
	22, 0, 0, 11, 0, 0, 0, 12, 13, 26,
	89, 0, 14, 24, 0, 0, 25, 0, 0, 15,
	0, 20, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 36, 94, 59, 60, 0, 61, 0, 0, 0,
	87, 0, 0, 0, 0, 97, 98, 0, 0, 5,
	252, 45, 0, 23, 0, 58, 88, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	42, 0, 0, 0, 0, 43, 0, 44, 39, 40,
	48, 49, 50, 51, 52, 53, 54, 56, 0, 37,
	69, 38, 0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 17, 77, 78, 27, 90, 18, 0, 95,
	0, 0, 79, 80, 81, 86, 82, 83, 84, 85,
	55, 32, 9, 8, 0, 10, 0, 21, 0, 22,
	0, 0, 11, 0, 0, 0, 12, 13, 26, 89,
	0, 14, 24, 0, 0, 25, 0, 0, 15, 0,
	20, 70, 71, 72, 73, 74, 75, 76, 0, 0,
	36, 94, 59, 60, 0, 61, 0, 0, 0, 87,
	0, 0, 0, 0, 97, 98, 0, 0, 5, 0,
	45, 0, 23, 0, 58, 88, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 141, 142, 143, 144, 135, 136, 129,
	130, 128, 131, 133, 134, 0, 146, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 132, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 386, 186, 0, 0, 45,
	382, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	161, 162, 163, 164, 166, 167, 168, 169, 170, 171,
	172, 173, 165, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 187,
	94, 174, 175, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 0, 0, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 386, 421, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 422,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 0, 0, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 353,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 0, 316, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	298, 0, 0, 97, 98, 0, 0, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 0, 0,
	70, 71, 59, 60, 0, 61, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 97, 98, 0, 0, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 69,
	38, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 77, 78, 107, 90, 0, 0, 95, 0,
	0, 79, 80, 81, 86, 82, 83, 84, 85, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 71, 0, 0, 0, 0, 0, 0, 0, 36,
	94, 0, 0, 0, 0, 0, 0, 0, 87, 122,
	124, 123, 0, 97, 98, 0, 0, 0, 0, 45,
	0, 0, 0, 58, 88, 91, 0, 0, 0, 147,
	586, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 146, 122, 124, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 148, 120,
	121, 125, 127, 126, 139, 140, 137, 138, 145, 141,
	142, 143, 144, 135, 136, 129, 130, 128, 131, 133,
	134, 0, 146, 0, 122, 124, 123, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 148, 120, 121, 125,
	127, 126, 139, 140, 137, 138, 145, 141, 142, 143,
	144, 135, 136, 129, 130, 128, 131, 133, 134, 0,
	146, 0, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 587, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 148, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 145, 141, 142, 143, 144, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 146, 122,
	124, 123, 0, 0, 0, 0, 0, 0, 0, 532,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 146, 0, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 308, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 148,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 145,
	141, 142, 143, 144, 135, 136, 129, 130, 128, 131,
	133, 134, 0, 146, 122, 124, 123, 0, 0, 0,
	0, 0, 0, 0, 119, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 148, 120, 121, 125,
	127, 126, 139, 140, 137, 138, 145, 141, 142, 143,
	144, 135, 136, 129, 130, 128, 131, 133, 134, 0,
	146, 122, 124, 123, 0, 0, 0, 0, 0, 0,
	510, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 148, 120, 121, 125, 127, 126, 139,
	140, 137, 138, 145, 141, 142, 143, 144, 135, 136,
	129, 130, 128, 131, 133, 134, 0, 146, 122, 124,
	123, 0, 0, 0, 0, 0, 0, 0, 481, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	148, 120, 121, 125, 127, 126, 139, 140, 137, 138,
	145, 141, 142, 143, 144, 135, 136, 129, 130, 128,
	131, 133, 134, 0, 146, 122, 124, 123, 0, 0,
	0, 0, 0, 0, 0, 480, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 148, 120, 121,
	125, 127, 126, 139, 140, 137, 138, 145, 141, 142,
	143, 144, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 146, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 451, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 148, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 145, 141, 142, 143, 144, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 146, 122,
	124, 123, 0, 0, 0, 0, 0, 0, 0, 450,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 146, 122, 124, 123, 0,
	0, 0, 0, 0, 0, 0, 424, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 148, 120,
	121, 125, 127, 126, 139, 140, 137, 138, 145, 141,
	142, 143, 144, 135, 136, 129, 130, 128, 131, 133,
	134, 0, 146, 122, 124, 123, 0, 0, 0, 0,
	0, 0, 0, 412, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 148, 120, 121, 125, 127,
	126, 139, 140, 137, 138, 145, 141, 142, 143, 144,
	135, 136, 129, 130, 128, 131, 133, 134, 0, 146,
	122, 124, 123, 0, 0, 0, 0, 0, 0, 0,
	394, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 148, 120, 121, 125, 127, 126, 139, 140,
	137, 138, 145, 141, 142, 143, 144, 135, 136, 129,
	130, 128, 131, 133, 134, 0, 146, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 390, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 148,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 145,
	141, 142, 143, 144, 135, 136, 129, 130, 128, 131,
	133, 134, 0, 146, 122, 124, 123, 0, 0, 0,
	0, 0, 0, 0, 344, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 148, 120, 121, 125,
	127, 126, 139, 140, 137, 138, 145, 141, 142, 143,
	144, 135, 136, 129, 130, 128, 131, 133, 134, 0,
	146, 122, 124, 123, 0, 0, 0, 0, 0, 506,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 148, 120, 121, 125, 127, 126, 139,
	140, 137, 138, 145, 141, 142, 143, 144, 135, 136,
	129, 130, 128, 131, 133, 134, 0, 146, 122, 124,
	123, 0, 0, 0, 0, 0, 504, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	148, 120, 121, 125, 127, 126, 139, 140, 137, 138,
	145, 141, 142, 143, 144, 135, 136, 129, 130, 128,
	131, 133, 134, 0, 146, 122, 124, 123, 0, 0,
	0, 0, 0, 485, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 148, 120, 121,
	125, 127, 126, 139, 140, 137, 138, 145, 141, 142,
	143, 144, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 146, 122, 124, 123, 0, 0, 0, 0, 0,
	452, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 148, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 145, 141, 142, 143, 144, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 146, 122,
	124, 123, 0, 0, 0, 0, 0, 433, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	399, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 146, 122, 124, 123, 0,
	0, 339, 0, 403, 414, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 148, 120,
	121, 125, 127, 126, 139, 140, 137, 138, 145, 141,
	142, 143, 144, 135, 136, 129, 130, 128, 131, 133,
	134, 0, 146, 122, 124, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 148, 120, 121, 125, 127,
	126, 139, 140, 137, 138, 145, 141, 142, 143, 144,
	135, 136, 129, 130, 128, 131, 133, 134, 0, 146,
	124, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 123, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 147, 0, 148, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 145, 141, 142, 143, 144, 135,
	136, 129, 130, 128, 131, 133, 134, 355, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 147, 0, 148, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 145, 141, 142, 143, 144, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	132, 148, 120, 121, 125, 127, 126, 139, 140, 137,
	138, 145, 141, 142, 143, 144, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 148, 120,
	121, 125, 127, 126, 139, 140, 137, 138, 145, 141,
	142, 143, 144, 135, 136, 129, 130, 128, 131, 133,
	134, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 121, 125, 127, 126, 139,
	140, 137, 138, 145, 141, 142, 143, 144, 135, 136,
	129, 130, 128, 131, 133, 134, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	125, 127, 126, 139, 140, 137, 138, 145, 141, 142,
	143, 144, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 127, 126, 139, 140, 137, 138,
	145, 141, 142, 143, 144, 135, 136, 129, 130, 128,
	131, 133, 134, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 126, 139, 140,
	137, 138, 145, 141, 142, 143, 144, 135, 136, 129,
	130, 128, 131, 133, 134, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 139,
	140, 137, 138, 145, 141, 142, 143, 144, 135, 136,
	129, 130, 128, 131, 133, 134, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
}
var yyPact = [...]int{

	-1000, -1000, 2540, -1000, -1000, -1000, -1000, -1000, 113, 2540,
	112, 111, 3509, 3509, 3509, -55, 255, 3509, -1000, 3792,
	106, 102, 84, -1000, 128, 3509, 283, 387, 358, 384,
	2873, -1000, 67, -1000, -1000, 188, 66, 2789, 3509, 477,
	477, 3509, 3509, 3509, 3509, 3509, -1000, -1000, 3509, 3509,
	3509, 3509, 3509, 3509, 3509, 55, 3509, -1000, 302, 3509,
	3509, 3509, 345, -1000, 285, -1000, 153, 152, -1000, 29,
	54, 52, 3509, 3509, 51, 3509, 3509, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 265, 269, -1000,
	-1000, 24, 41, 41, 50, -1000, 137, 146, 278, 2411,
	3509, 222, 3509, 3509, -42, 4733, -1000, -1000, -46, -54,
	77, -1000, -1000, 76, -1000, 426, 74, -1000, 4733, -1000,
	3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509,
	3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509,
	3509, 3509, 3509, 3509, 3509, 3509, 29, 3389, 3509, 477,
	3509, 260, -1000, 3744, -56, -1000, 48, 2540, 47, -60,
	378, 3269, 3509, 3509, 3509, 3509, 3509, 3509, 3509, 3509,
	3509, 3509, 3509, 3509, -1000, -1000, 3509, 3509, 3509, -49,
	2789, -97, 451, -1000, -1000, 4686, 477, 45, -1000, -1000,
	285, 3509, -1000, 2789, -1000, 301, 301, 417, 301, 4263,
	301, 301, 301, 301, 301, 301, 301, -1000, 3509, 301,
	-130, 252, 234, -1000, 257, 3149, 477, 4899, 4862, 4899,
	-1000, -1000, 3509, 75, 75, 41, 149, 161, -1000, -1000,
	3509, 3509, 4733, 4733, 3509, 4733, 4733, 229, -1000, 224,
	69, 252, 3509, -1000, -1000, 2669, -1000, 2789, 280, 278,
	137, -1000, -1000, -1000, 4216, 44, -67, 437, 4733, 4169,
	-1000, -1000, -1000, -1000, -55, -1000, 255, 3509, -1000, 3509,
	4971, 5005, 4779, 4899, 4822, 5038, 5101, 5070, 410, 410,
	410, 417, 301, 417, 417, 1105, 1105, 2730, 2730, 2730,
	2730, 525, 525, 525, 525, 2730, -1000, 4639, 3509, 4936,
	91, -1000, -1000, 4592, 90, -1000, 418, 2282, -1000, -1000,
	3509, -1000, 3509, -1000, -1000, 4899, 477, 4899, 4899, 4899,
	4899, 4899, 4899, 4899, 4899, 4899, 4899, 4899, 4899, 4122,
	-99, 4545, 41, -1000, 3509, -1000, 35, 411, 2789, 3029,
	-1000, 2789, 4075, -100, -1000, 32, -1000, -1000, -1000, -1000,
	356, 267, 4498, 116, 105, 3509, 43, -104, 41, -1000,
	-1000, 3509, -1000, 41, -1000, -1000, -1000, -1000, -55, 3509,
	3509, -49, -55, 89, -1000, 4733, 4028, 3981, -1000, -1000,
	-1000, 4451, -1000, 88, -1000, 4733, 3509, 30, -1000, 137,
	2153, 3509, 3509, 3509, 206, -1000, -1000, 4733, -1000, 3509,
	4936, -68, 477, 218, 260, 2023, 3509, -1000, 3934, 3887,
	1893, -1000, 1764, -1000, -1000, -1000, 4404, 408, 3509, -1000,
	4733, 477, 39, 28, -1000, -1000, -1000, -105, -1000, -1000,
	237, -1000, -1000, -1000, -1000, 3509, -1000, 4899, 176, -1000,
	-1000, 4357, -1000, -1000, -116, 4310, -1000, -1000, -1000, 3509,
	-1000, -1000, -1000, -1000, 2909, 4733, -1000, -1000, -1000, -1000,
	3839, -69, 4733, -1000, -70, -71, 4936, -1000, -1000, 81,
	-1000, 477, 38, 2789, -1000, -1000, -1000, -1000, 4733, 200,
	2540, 374, -72, -1000, -1000, -1000, 3509, 4899, -1000, 2789,
	408, -1000, -1000, 3696, 27, 436, -1000, 340, -1000, -1000,
	195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1634,
	-73, 3509, 110, -1000, 325, -1000, 1117, 218, -1000, 2789,
	-123, 1505, -1000, -1000, 37, 127, -1000, -1000, -1000, 2540,
	4899, 15, 70, 182, 176, 132, -1000, -1000, -75, -1000,
	-3, -1000, 3509, 25, 104, -78, 299, -1000, -1000, -1000,
	-5, -8, -1000, -82, 189, -1000, 2540, 408, -1000, 370,
	-53, -1000, 246, -1000, -1000, 1376, 3649, -1000, -1000, -1000,
	-1000, -83, 1246, 1117, -1000, -1000, 313, -1000, 987, -1000,
	176, 297, 405, -1000, -1000, -1000, -1000, -1000, 2540, 2540,
	-1000, -93, -1000, -11, 189, -1000, 126, -1000, 79, -1000,
	-1000, 243, 3509, 858, 2540, 2540, -1000, 119, -1000, -1000,
	-1000, 297, -1000, 4733, -94, -1000, 729, -1000, -1000, 600,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 565, 564, 17, 48, 5, 561, 556, 554, 21,
	0, 67, 8, 24, 78, 7, 552, 16, 549, 32,
	29, 23, 547, 321, 309, 186, 545, 541, 538, 3,
	537, 35, 25, 536, 72, 30, 535, 533, 532, 531,
	530, 41, 528, 524, 1, 11, 523, 6, 522, 519,
	518, 517, 516, 515, 514, 513, 510, 508, 507, 505,
	504, 65, 503, 501, 499, 9, 497, 496, 495, 492,
	489, 488, 360, 484, 483, 19, 28, 22, 10, 480,
	4, 33, 470, 469, 467, 465, 12, 2,
}
var yyR1 = [...]int{

	0, 1, 81, 43, 43, 4, 4, 5, 5, 5,
	2, 62, 62, 44, 44, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	46, 46, 57, 57, 8, 8, 56, 56, 13, 84,
	84, 85, 85, 12, 12, 12, 12, 48, 48, 47,
	47, 7, 7, 52, 52, 52, 52, 45, 45, 45,
	45, 45, 49, 49, 60, 60, 59, 59, 51, 51,
	50, 50, 58, 58, 66, 66, 15, 15, 16, 16,
	80, 80, 78, 78, 78, 79, 79, 61, 61, 67,
	67, 17, 17, 64, 64, 19, 63, 63, 20, 20,
	9, 55, 55, 21, 65, 65, 68, 68, 22, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 82, 86, 87, 83, 83, 70,
	70, 71, 71, 29, 29, 30, 30, 30, 30, 23,
	23, 24, 24, 27, 27, 54, 54, 54, 69, 69,
	34, 34, 34, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 35,
	35, 35, 10, 10, 11, 11, 33, 36, 36, 36,
	37, 37, 37, 38, 38, 38, 38, 38, 38, 14,
	14, 14, 25, 25, 25, 39, 39, 40, 40, 40,
	40, 40, 40, 31, 31, 31, 32, 32, 32, 75,
	76, 76, 74, 74, 73, 73, 73, 73, 73, 73,
	72, 72, 72, 72, 41, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 26, 26, 26, 26, 26,
	26, 26, 53, 53, 77,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 0, 1, 3, 1, 3, 2,
	1, 3, 1, 2, 0, 1, 3, 1, 1, 5,
	7, 9, 5, 3, 3, 3, 3, 3, 3, 1,
	2, 5, 7, 9, 5, 1, 6, 3, 3, 2,
	0, 9, 1, 3, 0, 4, 1, 3, 1, 0,
	1, 0, 1, 1, 2, 4, 3, 1, 4, 1,
	4, 1, 4, 3, 4, 4, 5, 0, 5, 5,
	4, 4, 1, 4, 5, 6, 1, 3, 6, 7,
	3, 6, 1, 0, 1, 3, 4, 6, 0, 1,
	1, 2, 1, 1, 1, 0, 2, 2, 3, 1,
	3, 1, 2, 3, 1, 1, 3, 1, 1, 3,
	4, 3, 1, 1, 0, 1, 3, 1, 3, 6,
	5, 3, 4, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 3, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 3, 2, 1,
	2, 4, 2, 13, 1, 0, 0, 0, 1, 0,
	4, 3, 1, 1, 2, 2, 4, 4, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 0, 1,
	4, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 3, 1, 1, 1,
	3, 3, 1, 1, 0, 1, 1, 1, 3, 1,
	1, 3, 1, 1, 4, 4, 4, 4, 1, 1,
	1, 3, 1, 4, 2, 3, 3, 1, 4, 4,
	3, 3, 3, 1, 3, 1, 1, 3, 1, 1,
	0, 1, 3, 1, 3, 1, 4, 2, 6, 4,
	2, 2, 1, 2, 1, 4, 3, 3, 3, 6,
	3, 1, 1, 2, 1, 4, 4, 2, 2, 4,
	2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -43, -2, -3, 158, -59, -50, 103, 102,
	105, 112, 116, 117, 121, 128, 76, 82, 87, -10,
	130, 107, 109, 162, 122, 125, 118, 85, -60, -51,
	-14, -18, 101, -38, -39, -36, 140, 69, 71, 58,
	59, 49, 50, 55, 57, 160, -22, -26, 60, 61,
	62, 63, 64, 65, 66, 100, 67, -28, 164, 13,
	14, 16, -82, -25, -35, -30, -23, -33, -34, 70,
	131, 132, 4, 5, 6, 7, 8, 83, 84, 92,
	93, 94, 96, 97, 98, 99, 95, 149, 165, 119,
	86, 166, -5, -37, 141, 89, -4, 154, 155, -44,
	160, -3, 160, 160, -11, -10, 76, 85, -11, -11,
	-64, -19, -25, -63, -20, 86, -55, -21, -10, 162,
	33, 34, 10, 12, 11, 35, 37, 36, 51, 49,
	50, 52, 68, 53, 54, 47, 48, 40, 41, 38,
	39, 43, 44, 45, 46, 42, 56, 30, 32, 160,
	160, 160, 158, -10, 85, 31, 73, 74, 73, 75,
	74, 17, 18, 19, 20, 29, 21, 22, 23, 24,
	25, 26, 27, 28, 58, 59, 160, 69, 158, 139,
	160, -75, -74, -76, -73, -10, 37, 140, -10, -14,
	-35, 160, -34, 69, -14, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -27, 160, -10,
	-54, 88, -72, -41, 86, 151, 152, -10, -10, -10,
	-83, 37, 69, 153, 153, -24, -23, -40, -5, -25,
	160, 160, -10, -10, 160, -10, -10, 88, 150, -72,
	-72, 88, 158, -25, -61, 160, -61, 160, 155, 155,
	-4, -6, 159, -3, -10, 103, -65, -68, -10, -10,
	162, 162, 162, 162, 9, 162, 9, 17, 162, 9,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -24, -10, 31, -10,
	-56, -13, -14, -10, -62, -9, 85, -44, 162, 162,
	160, -3, 160, 162, 31, -10, 37, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-11, -10, -32, 85, 158, -25, -75, 163, 9, 15,
	-14, 160, -10, -75, 161, -11, 164, -41, -41, 88,
	69, 139, -10, 90, -14, 15, -86, -11, -31, -81,
	-25, 158, 85, -31, -81, -25, -69, -61, 153, 69,
	158, 139, 153, -53, -77, -10, -10, -10, 150, 150,
	165, -10, 161, -67, -17, -10, 156, -75, 85, -4,
	161, 160, 162, 9, 161, -19, -20, -10, -21, 31,
	-10, 161, 9, 111, 9, 161, 17, 159, -10, -10,
	-44, -14, 161, 163, 159, -61, -10, 161, 17, -76,
	-10, 37, 140, -75, 161, 163, 161, -42, 85, 91,
	50, 86, 85, 159, 159, 69, 159, -10, 160, 163,
	-61, -10, -61, -25, -11, -10, -32, -25, 161, 9,
	161, 161, 159, 161, 9, -10, 161, -49, -3, 31,
	-10, -65, -10, -52, 158, 31, -10, 162, -13, -12,
	-14, 37, 140, 69, -9, -7, -3, 31, -10, -46,
	161, 161, 75, -3, 31, 159, 17, -10, -14, 160,
	161, 163, 91, -10, -58, -66, -15, -16, -80, -78,
	30, 141, 142, -5, 159, 163, 159, -77, -17, -44,
	161, 162, -45, 162, -45, 162, 161, 15, -14, 160,
	-75, -44, -86, -8, 123, 124, -3, 31, 162, -44,
	-10, -75, 163, 161, 9, -84, 37, -78, 104, 162,
	-65, 159, 114, 115, -45, 113, -45, -47, -3, 31,
	-12, -75, 163, 110, 160, 158, -44, 161, 159, -70,
	126, -15, -85, 156, 162, 161, -10, 31, 162, 159,
	162, 113, -44, 161, 161, 162, -57, -5, -44, -79,
	31, 160, 86, -48, -3, 31, 31, 162, -44, -44,
	162, 108, -47, 86, 35, 159, -87, -80, -71, -29,
	86, 37, 17, -44, -44, -44, 162, 161, -5, 158,
	161, 9, 86, -10, 106, 158, -44, -29, 162, -44,
	159, 159, -87,
}
var yyDef = [...]int{

	4, -2, 1, 3, 10, 14, 17, 18, 0, 0,
	0, 0, 244, 244, 244, 0, 209, 0, 29, 0,
	0, 0, 0, 35, 0, 0, 0, 5, 76, 0,
	-2, 243, 0, -2, 260, 246, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 176, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 186, 215, 0,
	189, 0, 197, 253, 238, 258, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 194,
	262, 0, -2, 0, 0, 222, 7, 0, 0, 0,
	0, 0, 114, 0, 0, 245, 209, 5, 0, 0,
	0, 104, 105, 0, 107, 108, 0, 112, 113, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 138, 0, 244, 0, 0,
	280, 0, 279, 283, 281, 285, 0, 0, 123, -2,
	0, 0, -2, 280, -2, 157, 158, 159, 160, 0,
	177, 178, 179, 180, 181, 182, 183, 184, 244, 185,
	0, 216, 217, 292, 294, 0, 0, 188, 190, 192,
	195, 198, 244, 0, 0, 218, 211, 212, 210, 267,
	0, 0, 307, 308, 0, 310, 311, 0, 234, 0,
	0, 0, 0, 264, 205, 0, 208, 280, 0, 0,
	9, 13, 16, 15, 0, 0, 0, 115, 117, 0,
	23, 24, 25, 26, 0, 27, 0, 0, 28, 0,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 170, 0, 0, 175,
	0, 46, -2, 0, 0, 12, 0, 0, 37, 38,
	0, 77, 0, 80, 14, 121, 0, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 0,
	0, 0, 261, 276, 0, 278, 0, 221, 280, 0,
	-2, 280, 0, 0, -2, 0, 187, 293, 290, 291,
	0, 0, 0, 0, 247, 0, 0, 0, 0, -2,
	-2, 0, 2, 0, -2, -2, 118, 219, 0, 244,
	0, 0, 0, 0, 312, 314, 0, 0, 233, 236,
	235, 0, 97, 0, 99, 101, 0, 0, 6, 8,
	0, 0, 114, 0, 0, 103, 106, 109, 111, 0,
	174, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	0, -2, 0, 254, 256, 257, 0, 0, 0, 282,
	284, 0, 0, 0, -2, 221, 214, 0, 301, 302,
	0, 304, 296, 297, 298, 0, 300, 191, -2, 255,
	206, 0, 207, 271, 0, 0, 270, 272, 305, 0,
	306, 309, 263, 98, 0, 102, 220, 19, 72, 14,
	0, 0, 116, 22, 67, 67, 173, 31, 47, 0,
	-2, 0, 0, 280, 11, 34, 61, 14, 195, 44,
	0, 0, 0, 74, 14, 277, 0, 120, -2, 280,
	289, 295, 303, 0, 0, 82, 84, 49, 89, 90,
	0, 92, 93, 94, 274, 268, 269, 313, 100, 0,
	0, 114, 0, 67, 0, 67, 0, 0, -2, 280,
	0, 0, 110, 36, 0, 0, 75, 14, 81, 78,
	119, 0, 0, 199, 88, 51, 50, 91, 0, 20,
	0, 63, 0, 0, 0, 0, 0, 32, 59, 14,
	0, 0, -2, 0, 0, 14, 79, 288, 299, 95,
	0, 85, 0, 52, 73, 0, 0, 14, 14, 64,
	65, 0, 0, 0, 55, 62, 0, 42, 0, 196,
	0, 0, 86, 21, 57, 14, 14, 14, 70, 71,
	66, 0, 33, 0, 0, 45, 0, 96, 0, 202,
	203, 0, 0, 0, 68, 69, 60, 0, 43, 14,
	200, 0, 204, 87, 0, 14, 0, 201, 58, 0,
	196, 41, 193,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:265
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:291
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:382
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:389
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:393
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:404
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:406
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:408
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:419
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:421
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:423
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:432
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:433
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:434
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:440
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.stmt = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:457
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:461
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:474
		{
			yyVAL.num = 0
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:475
		{
			yyVAL.num = 1
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:479
		{
			yyVAL.num = 0
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:480
		{
			yyVAL.num = 1
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:533
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:534
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:535
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:540
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:544
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:545
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:549
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:550
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:554
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:555
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:556
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:557
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:561
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:563
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:565
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:567
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:569
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:573
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:574
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:579
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:581
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:587
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:593
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:595
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:600
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:605
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:612
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:613
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:618
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:620
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:625
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:627
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:631
		{
			yyVAL.expr = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:636
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:637
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:641
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:642
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:643
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:647
		{
			yyVAL.expr = nil
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:648
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:652
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:653
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:658
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:660
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:664
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:665
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:669
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:670
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:675
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:679
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:680
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:684
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:685
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:814
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:818
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:823
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:827
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:828
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:832
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:833
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:850
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:857
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:859
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:861
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:863
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:864
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:866
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:868
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:870
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:872
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:874
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:876
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:878
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:880
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:882
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:884
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:886
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:888
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:890
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:892
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:894
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:896
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:898
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:910
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:911
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:912
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:913
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:914
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:915
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:916
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:917
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:918
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:920
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:922
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:924
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:926
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:928
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:930
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:932
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:934
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:936
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:938
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:942
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:955
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:956
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:957
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:958
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:959
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:960
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:961
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:962
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:963
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 193:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:966
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:975
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:979
		{
			yyVAL.expr = nil
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:983
		{
			yyVAL.expr = nil
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:987
		{
			yyVAL.num = 0
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:988
		{
			yyVAL.num = 1
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:992
		{
			yyVAL.expr = nil
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:993
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:997
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:998
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1002
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1003
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1008
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1010
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1012
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1014
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1019
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1023
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1028
		{
			yyVAL.expr = nil
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1029
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1034
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1036
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1040
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1045
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1055
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1056
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1057
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1058
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1059
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1060
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1061
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1062
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1064
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1065
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1066
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1070
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1072
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1074
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1078
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1079
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1083
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1088
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1092
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1093
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1098
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1099
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1100
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1105
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1107
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1109
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1111
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1113
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1114
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1119
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1121
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1123
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1127
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1128
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1129
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1134
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1136
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1143
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1145
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1147
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1149
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1151
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1155
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1156
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1157
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1161
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1163
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1168
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1172
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1173
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1178
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1180
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1185
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1187
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1189
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1191
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1193
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1195
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1200
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1202
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1204
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1206
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1211
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1213
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1215
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1217
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1219
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1221
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1222
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1226
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1227
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1228
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1229
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1234
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1235
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1237
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1239
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1241
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1243
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1245
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1249
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1251
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1255
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
