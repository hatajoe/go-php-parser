// Code generated by goyacc -o parser.go -v parser.output parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1247

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 35,
	69, 362,
	139, 362,
	153, 362,
	158, 362,
	-2, 357,
	-1, 40,
	160, 365,
	-2, 374,
	-1, 76,
	69, 364,
	139, 364,
	153, 364,
	158, 364,
	160, 367,
	-2, 352,
	-1, 99,
	153, 325,
	-2, 354,
	-1, 203,
	69, 362,
	139, 362,
	153, 362,
	158, 362,
	-2, 251,
	-1, 206,
	160, 367,
	-2, 364,
	-1, 209,
	69, 362,
	139, 362,
	153, 362,
	158, 362,
	-2, 253,
	-1, 303,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 275,
	-1, 304,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 276,
	-1, 305,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 277,
	-1, 306,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 278,
	-1, 307,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 279,
	-1, 308,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 280,
	-1, 309,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 281,
	-1, 310,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 282,
	-1, 311,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 283,
	-1, 318,
	9, 126,
	161, 126,
	-2, 362,
	-1, 361,
	9, 402,
	161, 402,
	163, 402,
	-2, 362,
	-1, 365,
	69, 363,
	139, 363,
	153, 363,
	158, 363,
	160, 366,
	-2, 285,
	-1, 379,
	160, 388,
	-2, 355,
	-1, 380,
	160, 390,
	-2, 380,
	-1, 459,
	160, 388,
	-2, 356,
	-1, 460,
	160, 390,
	-2, 381,
	-1, 505,
	161, 172,
	-2, 177,
	-1, 513,
	69, 362,
	139, 362,
	153, 362,
	158, 362,
	-2, 236,
	-1, 526,
	160, 366,
	-2, 363,
	-1, 567,
	161, 172,
	-2, 177,
	-1, 572,
	15, 142,
	161, 142,
	-2, 362,
	-1, 582,
	161, 172,
	-2, 177,
	-1, 605,
	9, 401,
	161, 401,
	163, 401,
	-2, 362,
	-1, 626,
	15, 143,
	161, 143,
	-2, 362,
	-1, 665,
	15, 145,
	161, 145,
	-2, 336,
	-1, 707,
	120, 208,
	-2, 205,
}

const yyPrivate = 57344

const yyLast = 5881

var yyAct = [...]int{

	21, 106, 327, 109, 730, 762, 30, 740, 734, 709,
	660, 99, 587, 697, 676, 113, 113, 113, 670, 585,
	127, 571, 122, 271, 479, 588, 266, 583, 162, 4,
	195, 72, 321, 469, 353, 507, 317, 197, 108, 126,
	76, 329, 619, 119, 123, 199, 202, 228, 35, 210,
	211, 212, 213, 214, 112, 257, 215, 216, 217, 218,
	219, 220, 221, 367, 224, 103, 763, 232, 233, 234,
	116, 117, 378, 773, 758, 665, 612, 684, 204, 204,
	608, 245, 246, 207, 248, 249, 540, 206, 206, 241,
	97, 527, 115, 97, 515, 203, 209, 358, 285, 281,
	279, 775, 754, 748, 723, 693, 687, 681, 268, 651,
	30, 273, 274, 645, 625, 622, 354, 97, 122, 620,
	618, 569, 97, 487, 555, 550, 334, 500, 325, 498,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 259, 313, 315, 277,
	319, 104, 105, 323, 229, 276, 370, 241, 275, 749,
	98, 263, 692, 98, 691, 682, 336, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 355,
	204, 350, 113, 352, 255, 199, 679, 98, 332, 206,
	669, 659, 98, 635, 607, 557, 363, 318, 685, 199,
	654, 655, 713, 714, 715, 712, 711, 710, 528, 654,
	655, 519, 464, 700, 113, 357, 772, 757, 667, 230,
	231, 373, 204, 589, 627, 606, 113, 582, 680, 364,
	567, 206, 258, 475, 470, 471, 351, 505, 472, 361,
	537, 284, 280, 278, 753, 686, 476, 486, 362, 480,
	624, 199, 333, 204, 653, 708, 331, 260, 247, 71,
	244, 243, 206, 223, 368, 369, 554, 549, 366, 501,
	375, 497, 194, 190, 493, 492, 127, 120, 115, 160,
	377, 482, 466, 159, 462, 738, 191, 158, 368, 111,
	369, 369, 368, 379, 459, 110, 467, 107, 538, 766,
	458, 465, 765, 752, 751, 496, 675, 668, 641, 161,
	74, 674, 115, 490, 238, 494, 491, 30, 484, 504,
	261, 262, 510, 115, 511, 566, 463, 512, 237, 236,
	536, 330, 509, 371, 590, 591, 229, 242, 713, 714,
	715, 712, 711, 710, 508, 671, 518, 104, 105, 742,
	199, 522, 124, 199, 229, 37, 193, 165, 256, 204,
	506, 69, 70, 632, 633, 573, 269, 539, 206, 688,
	654, 655, 542, 609, 736, 192, 513, 741, 755, 590,
	591, 104, 105, 525, 701, 37, 124, 521, 239, 322,
	534, 708, 104, 105, 229, 115, 370, 575, 483, 517,
	473, 230, 231, 372, 207, 131, 133, 132, 235, 229,
	728, 250, 328, 115, 97, 242, 326, 102, 167, 230,
	231, 703, 141, 735, 541, 156, 719, 157, 129, 130,
	134, 136, 135, 148, 149, 146, 147, 154, 150, 151,
	152, 153, 144, 145, 138, 139, 137, 140, 142, 143,
	169, 155, 565, 356, 163, 113, 546, 638, 474, 230,
	231, 727, 227, 141, 170, 171, 239, 270, 574, 101,
	312, 166, 556, 251, 230, 231, 38, 561, 273, 563,
	282, 698, 104, 105, 644, 229, 568, 370, 205, 335,
	229, 547, 254, 580, 98, 164, 380, 460, 774, 532,
	594, 562, 559, 760, 543, 737, 30, 592, 168, 545,
	596, 604, 229, 603, 226, 657, 654, 655, 578, 520,
	204, 204, 502, 576, 155, 570, 283, 642, 610, 206,
	206, 600, 593, 636, 530, 533, 141, 318, 572, 120,
	531, 470, 172, 174, 173, 204, 480, 488, 359, 706,
	230, 231, 616, 673, 206, 230, 231, 720, 252, 253,
	637, 383, 605, 140, 142, 143, 199, 155, 384, 592,
	615, 629, 267, 630, 614, 5, 31, 230, 231, 141,
	707, 705, 196, 198, 592, 623, 640, 761, 733, 461,
	595, 592, 272, 646, 647, 204, 628, 199, 478, 621,
	634, 584, 118, 121, 206, 639, 320, 33, 8, 273,
	30, 739, 626, 694, 643, 316, 125, 225, 199, 468,
	704, 564, 34, 30, 9, 558, 716, 648, 581, 2,
	529, 240, 652, 41, 40, 100, 678, 663, 592, 42,
	30, 661, 75, 73, 677, 683, 672, 204, 664, 64,
	208, 222, 54, 656, 690, 658, 206, 207, 53, 36,
	696, 586, 631, 577, 572, 264, 115, 97, 689, 695,
	102, 6, 30, 3, 699, 1, 721, 722, 0, 0,
	702, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	30, 0, 726, 724, 732, 0, 0, 0, 0, 717,
	592, 731, 0, 0, 0, 0, 0, 743, 661, 0,
	744, 745, 746, 0, 0, 30, 30, 0, 0, 747,
	0, 0, 101, 544, 0, 0, 356, 548, 756, 0,
	750, 0, 0, 0, 759, 104, 105, 0, 30, 30,
	30, 205, 0, 767, 768, 0, 0, 98, 0, 0,
	0, 771, 0, 769, 0, 0, 770, 776, 777, 0,
	0, 30, 30, 0, 780, 782, 0, 0, 0, 781,
	30, 30, 0, 785, 786, 787, 133, 132, 788, 391,
	392, 393, 394, 395, 0, 396, 397, 398, 434, 435,
	0, 0, 0, 0, 0, 156, 0, 157, 129, 130,
	134, 136, 135, 148, 149, 146, 147, 154, 150, 151,
	152, 153, 144, 145, 138, 139, 137, 140, 142, 143,
	0, 155, 713, 714, 715, 712, 711, 710, 0, 0,
	0, 399, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 401, 0, 404, 405,
	406, 385, 386, 387, 388, 389, 390, 407, 0, 0,
	382, 97, 0, 0, 0, 0, 0, 454, 455, 456,
	450, 451, 453, 452, 457, 402, 403, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 437, 438, 439,
	440, 441, 429, 430, 431, 432, 433, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 0, 449,
	447, 448, 444, 445, 0, 436, 442, 443, 80, 81,
	82, 83, 84, 0, 0, 0, 0, 66, 67, 446,
	68, 0, 0, 381, 0, 0, 0, 0, 0, 0,
	0, 98, 150, 151, 152, 153, 144, 145, 138, 139,
	137, 140, 142, 143, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 48, 49, 0, 0, 141, 0, 50,
	0, 51, 46, 47, 55, 56, 57, 58, 59, 60,
	61, 63, 0, 44, 77, 45, 0, 0, 0, 0,
	18, 69, 70, 0, 0, 0, 19, 85, 86, 29,
	97, 20, 0, 102, 0, 0, 87, 88, 89, 94,
	90, 91, 92, 93, 62, 39, 11, 10, 0, 12,
	0, 23, 0, 24, 0, 0, 13, 0, 0, 0,
	14, 15, 28, 37, 0, 16, 26, 0, 0, 27,
	0, 0, 17, 0, 22, 78, 79, 0, 32, 80,
	81, 82, 83, 84, 43, 101, 0, 0, 66, 67,
	0, 68, 0, 95, 0, 0, 0, 0, 104, 105,
	0, 0, 7, 0, 52, 0, 25, 0, 65, 96,
	98, 0, 138, 139, 137, 140, 142, 143, 0, 155,
	0, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 141, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 18, 0, 0, 0, 0, 0, 19, 85, 86,
	29, 97, 20, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 39, 11, 10, 0,
	12, 0, 23, 0, 24, 0, 0, 13, 0, 0,
	0, 14, 15, 28, 37, 0, 16, 26, 0, 0,
	27, 0, 0, 17, 0, 22, 78, 79, 80, 81,
	82, 83, 84, 0, 0, 43, 101, 66, 67, 0,
	68, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 0, 7, 784, 52, 0, 25, 0, 65,
	96, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 49, 0, 0, 0, 0, 50,
	0, 51, 46, 47, 55, 56, 57, 58, 59, 60,
	61, 63, 0, 44, 77, 45, 0, 0, 0, 0,
	18, 0, 0, 0, 0, 0, 19, 85, 86, 29,
	97, 20, 0, 102, 0, 0, 87, 88, 89, 94,
	90, 91, 92, 93, 62, 39, 11, 10, 0, 12,
	0, 23, 0, 24, 0, 0, 13, 0, 0, 0,
	14, 15, 28, 37, 0, 16, 26, 0, 0, 27,
	0, 0, 17, 0, 22, 78, 79, 80, 81, 82,
	83, 84, 0, 0, 43, 101, 66, 67, 0, 68,
	0, 0, 0, 95, 0, 0, 0, 0, 104, 105,
	0, 0, 7, 783, 52, 0, 25, 0, 65, 96,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 49, 0, 0, 0, 0, 50, 0,
	51, 46, 47, 55, 56, 57, 58, 59, 60, 61,
	63, 0, 44, 77, 45, 0, 0, 0, 0, 18,
	0, 0, 0, 0, 0, 19, 85, 86, 29, 97,
	20, 0, 102, 0, 0, 87, 88, 89, 94, 90,
	91, 92, 93, 62, 39, 11, 10, 0, 12, 0,
	23, 0, 24, 0, 0, 13, 0, 0, 0, 14,
	15, 28, 37, 0, 16, 26, 0, 0, 27, 0,
	0, 17, 0, 22, 78, 79, 80, 81, 82, 83,
	84, 0, 0, 43, 101, 66, 67, 0, 68, 0,
	0, 0, 95, 0, 0, 0, 0, 104, 105, 0,
	0, 7, 779, 52, 0, 25, 0, 65, 96, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 49, 0, 0, 0, 0, 50, 0, 51,
	46, 47, 55, 56, 57, 58, 59, 60, 61, 63,
	0, 44, 77, 45, 0, 0, 0, 0, 18, 0,
	0, 0, 0, 0, 19, 85, 86, 29, 97, 20,
	0, 102, 0, 0, 87, 88, 89, 94, 90, 91,
	92, 93, 62, 39, 11, 10, 0, 12, 0, 23,
	0, 24, 0, 0, 13, 0, 0, 0, 14, 15,
	28, 37, 0, 16, 26, 0, 0, 27, 0, 0,
	17, 0, 22, 78, 79, 80, 81, 82, 83, 84,
	0, 0, 43, 101, 66, 67, 0, 68, 0, 0,
	0, 95, 0, 0, 0, 0, 104, 105, 0, 0,
	7, 778, 52, 0, 25, 0, 65, 96, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 49, 0, 0, 0, 0, 50, 0, 51, 46,
	47, 55, 56, 57, 58, 59, 60, 61, 63, 0,
	44, 77, 45, 0, 0, 0, 0, 18, 0, 0,
	0, 0, 0, 19, 85, 86, 29, 97, 20, 0,
	102, 0, 0, 87, 88, 89, 94, 90, 91, 92,
	93, 62, 39, 11, 10, 0, 12, 764, 23, 0,
	24, 0, 0, 13, 0, 0, 0, 14, 15, 28,
	37, 0, 16, 26, 0, 0, 27, 0, 0, 17,
	0, 22, 78, 79, 80, 81, 82, 83, 84, 0,
	0, 43, 101, 66, 67, 0, 68, 0, 0, 0,
	95, 0, 0, 0, 0, 104, 105, 0, 0, 7,
	0, 52, 0, 25, 0, 65, 96, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	49, 0, 0, 0, 0, 50, 0, 51, 46, 47,
	55, 56, 57, 58, 59, 60, 61, 63, 0, 44,
	77, 45, 0, 0, 0, 0, 18, 0, 0, 0,
	0, 0, 19, 85, 86, 29, 97, 20, 0, 102,
	0, 0, 87, 88, 89, 94, 90, 91, 92, 93,
	62, 39, 11, 10, 0, 12, 0, 23, 0, 24,
	0, 0, 13, 0, 0, 0, 14, 15, 28, 37,
	0, 16, 26, 0, 0, 27, 0, 0, 17, 0,
	22, 78, 79, 0, 80, 81, 82, 83, 84, 0,
	43, 101, 0, 66, 67, 0, 68, 0, 0, 95,
	0, 0, 0, 0, 104, 105, 0, 0, 7, 729,
	52, 662, 25, 0, 65, 96, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	49, 0, 0, 0, 0, 50, 0, 51, 46, 47,
	55, 56, 57, 58, 59, 60, 61, 63, 0, 44,
	77, 45, 0, 0, 0, 0, 18, 0, 0, 0,
	0, 0, 19, 85, 86, 29, 97, 20, 0, 102,
	0, 0, 87, 88, 89, 94, 90, 91, 92, 93,
	62, 39, 11, 10, 0, 12, 0, 23, 0, 24,
	0, 0, 13, 0, 0, 0, 14, 15, 28, 37,
	0, 16, 26, 0, 0, 27, 0, 0, 17, 0,
	22, 78, 79, 80, 81, 82, 83, 84, 0, 0,
	43, 101, 66, 67, 0, 68, 0, 0, 0, 95,
	0, 0, 0, 0, 104, 105, 0, 0, 7, 0,
	52, 0, 25, 0, 65, 96, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 49,
	0, 0, 0, 0, 50, 0, 51, 46, 47, 55,
	56, 57, 58, 59, 60, 61, 63, 0, 44, 77,
	45, 0, 0, 0, 0, 18, 0, 0, 0, 0,
	0, 19, 85, 86, 29, 97, 20, 0, 102, 0,
	0, 87, 88, 89, 94, 90, 91, 92, 93, 62,
	39, 11, 10, 0, 12, 0, 23, 725, 24, 0,
	0, 13, 0, 0, 0, 14, 15, 28, 37, 0,
	16, 26, 0, 0, 27, 0, 0, 17, 0, 22,
	78, 79, 0, 80, 81, 82, 83, 84, 0, 43,
	101, 0, 66, 67, 0, 68, 0, 0, 95, 0,
	0, 0, 0, 104, 105, 0, 0, 7, 0, 52,
	718, 25, 0, 65, 96, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 49,
	0, 0, 0, 0, 50, 0, 51, 46, 47, 55,
	56, 57, 58, 59, 60, 61, 63, 0, 44, 77,
	45, 0, 0, 0, 0, 18, 0, 0, 0, 0,
	0, 19, 85, 86, 29, 97, 20, 0, 102, 0,
	0, 87, 88, 89, 94, 90, 91, 92, 93, 62,
	39, 11, 10, 0, 12, 0, 23, 0, 24, 0,
	0, 13, 0, 0, 0, 14, 15, 28, 37, 0,
	16, 26, 0, 0, 27, 0, 0, 17, 0, 22,
	78, 79, 80, 81, 82, 83, 84, 0, 0, 43,
	101, 66, 67, 0, 68, 0, 0, 0, 95, 0,
	0, 0, 0, 104, 105, 0, 0, 7, 0, 52,
	0, 25, 0, 65, 96, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 49, 0,
	0, 0, 0, 50, 0, 51, 46, 47, 55, 56,
	57, 58, 59, 60, 61, 63, 0, 44, 77, 45,
	0, 0, 0, 0, 18, 0, 0, 0, 0, 0,
	19, 85, 86, 29, 97, 20, 0, 102, 0, 0,
	87, 88, 89, 94, 90, 91, 92, 93, 62, 39,
	11, 10, 0, 12, 0, 23, 0, 24, 666, 0,
	13, 0, 0, 0, 14, 15, 28, 37, 0, 16,
	26, 0, 0, 27, 0, 0, 17, 0, 22, 78,
	79, 80, 81, 82, 83, 84, 0, 0, 43, 101,
	66, 67, 0, 68, 0, 0, 0, 95, 0, 0,
	0, 0, 104, 105, 0, 0, 7, 0, 52, 0,
	25, 0, 65, 96, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 49, 0, 0,
	0, 0, 50, 0, 51, 46, 47, 55, 56, 57,
	58, 59, 60, 61, 63, 0, 44, 77, 45, 0,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 19,
	85, 86, 29, 97, 20, 0, 102, 0, 0, 87,
	88, 89, 94, 90, 91, 92, 93, 62, 39, 11,
	10, 650, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 37, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 78, 79,
	0, 80, 81, 82, 83, 84, 0, 43, 101, 0,
	66, 67, 0, 68, 0, 0, 95, 0, 0, 0,
	0, 104, 105, 0, 0, 7, 0, 52, 601, 25,
	0, 65, 96, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 49, 0, 0,
	0, 0, 50, 0, 51, 46, 47, 55, 56, 57,
	58, 59, 60, 61, 63, 0, 44, 77, 45, 0,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 19,
	85, 86, 29, 97, 20, 0, 102, 0, 0, 87,
	88, 89, 94, 90, 91, 92, 93, 62, 39, 11,
	10, 0, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 37, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 78, 79,
	80, 81, 82, 83, 84, 0, 0, 43, 101, 66,
	67, 0, 68, 0, 0, 0, 95, 0, 0, 0,
	0, 104, 105, 0, 0, 7, 0, 52, 0, 25,
	0, 65, 96, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 49, 0, 0, 0,
	0, 50, 0, 51, 46, 47, 55, 56, 57, 58,
	59, 60, 61, 63, 0, 44, 77, 45, 0, 0,
	0, 599, 18, 0, 0, 0, 0, 0, 19, 85,
	86, 29, 97, 20, 0, 102, 0, 0, 87, 88,
	89, 94, 90, 91, 92, 93, 62, 39, 11, 10,
	0, 12, 0, 23, 0, 24, 0, 0, 13, 0,
	0, 0, 14, 15, 28, 37, 0, 16, 26, 0,
	0, 27, 0, 0, 17, 0, 22, 78, 79, 0,
	80, 81, 82, 83, 84, 0, 43, 101, 0, 66,
	67, 0, 68, 0, 0, 95, 0, 0, 0, 0,
	104, 105, 0, 0, 7, 0, 52, 579, 25, 0,
	65, 96, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 49, 0, 0, 0,
	0, 50, 0, 51, 46, 47, 55, 56, 57, 58,
	59, 60, 61, 63, 0, 44, 77, 45, 0, 0,
	0, 0, 18, 0, 0, 0, 0, 0, 19, 85,
	86, 29, 97, 20, 0, 102, 0, 0, 87, 88,
	89, 94, 90, 91, 92, 93, 62, 39, 11, 10,
	0, 12, 0, 23, 0, 24, 0, 0, 13, 0,
	0, 0, 14, 15, 28, 37, 0, 16, 26, 0,
	0, 27, 0, 0, 17, 0, 22, 78, 79, 0,
	80, 81, 82, 83, 84, 0, 43, 101, 0, 66,
	67, 0, 68, 0, 0, 95, 0, 0, 0, 0,
	104, 105, 0, 0, 7, 0, 52, 560, 25, 0,
	65, 96, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 49, 0, 0, 0,
	0, 50, 0, 51, 46, 47, 55, 56, 57, 58,
	59, 60, 61, 63, 0, 44, 77, 45, 0, 0,
	0, 0, 18, 0, 0, 0, 0, 0, 19, 85,
	86, 29, 97, 20, 0, 102, 0, 0, 87, 88,
	89, 94, 90, 91, 92, 93, 62, 39, 11, 10,
	0, 12, 0, 23, 0, 24, 0, 0, 13, 0,
	0, 0, 14, 15, 28, 37, 0, 16, 26, 0,
	0, 27, 0, 0, 17, 0, 22, 78, 79, 80,
	81, 82, 83, 84, 0, 0, 43, 101, 66, 67,
	0, 68, 0, 0, 0, 95, 0, 0, 0, 0,
	104, 105, 0, 0, 7, 0, 52, 0, 25, 0,
	65, 96, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 18, 0, 0, 0, 0, 0, 19, 85, 86,
	29, 97, 20, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 39, 11, 10, 0,
	12, 0, 23, 0, 24, 0, 0, 13, 0, 0,
	0, 14, 15, 28, 37, 0, 16, 26, 0, 0,
	27, 0, 0, 17, 0, 22, 78, 79, 80, 81,
	82, 83, 84, 0, 0, 43, 101, 66, 67, 0,
	68, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 0, 7, 503, 52, 0, 25, 0, 65,
	96, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 49, 0, 0, 0, 0, 50,
	0, 51, 46, 47, 55, 56, 57, 58, 59, 60,
	61, 63, 0, 44, 77, 45, 0, 0, 0, 0,
	18, 0, 0, 0, 0, 0, 19, 85, 86, 29,
	97, 20, 0, 102, 0, 0, 87, 88, 89, 94,
	90, 91, 92, 93, 62, 39, 11, 10, 0, 12,
	0, 23, 0, 24, 0, 0, 13, 0, 0, 0,
	14, 15, 28, 37, 0, 16, 26, 0, 0, 27,
	0, 0, 17, 0, 22, 78, 79, 80, 81, 82,
	83, 84, 0, 0, 43, 101, 66, 67, 0, 68,
	0, 0, 0, 95, 0, 0, 0, 0, 104, 105,
	0, 0, 7, 265, 52, 0, 25, 0, 65, 96,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 49, 0, 0, 0, 0, 50, 0,
	51, 46, 47, 55, 56, 57, 58, 59, 60, 61,
	63, 0, 44, 77, 45, 0, 0, 0, 0, 18,
	0, 0, 0, 0, 0, 19, 85, 86, 29, 97,
	20, 0, 102, 0, 0, 87, 88, 89, 94, 90,
	91, 92, 93, 62, 39, 11, 10, 0, 12, 0,
	23, 0, 24, 0, 0, 13, 0, 0, 0, 14,
	15, 28, 37, 0, 16, 26, 0, 0, 27, 0,
	0, 17, 0, 22, 78, 79, 0, 0, 0, 0,
	0, 0, 0, 43, 101, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 104, 105, 0,
	0, 7, 0, 52, 132, 25, 0, 65, 96, 98,
	391, 392, 393, 394, 395, 0, 396, 397, 398, 434,
	435, 0, 156, 0, 157, 129, 130, 134, 136, 135,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 0,
	141, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 400, 401, 0, 404,
	405, 406, 385, 386, 387, 388, 389, 390, 407, 0,
	0, 382, 0, 0, 0, 0, 0, 0, 454, 455,
	456, 450, 451, 453, 452, 457, 402, 403, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 437, 438,
	439, 440, 441, 429, 430, 431, 432, 433, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 0,
	449, 447, 448, 444, 445, 0, 436, 442, 443, 80,
	81, 82, 83, 84, 0, 0, 0, 0, 66, 67,
	446, 68, 0, 156, 0, 157, 129, 130, 134, 136,
	135, 148, 149, 146, 147, 154, 150, 151, 152, 153,
	144, 145, 138, 139, 137, 140, 142, 143, 0, 155,
	0, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 141, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 175, 176, 177, 178,
	180, 181, 182, 183, 184, 185, 186, 187, 179, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 43, 101, 188, 189, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 481, 200, 0, 0, 52, 477, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 201, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 0, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 43, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 481, 523, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 524, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 0, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 374, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 43, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 337, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 43, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 314, 0, 0, 104,
	105, 0, 0, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 78, 79, 66, 67,
	0, 68, 0, 0, 0, 43, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 104,
	105, 0, 0, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 48, 49, 0, 0, 0, 0,
	50, 0, 51, 46, 47, 55, 56, 57, 58, 59,
	60, 61, 63, 0, 44, 77, 45, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 85, 86,
	115, 97, 0, 0, 102, 0, 0, 87, 88, 89,
	94, 90, 91, 92, 93, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 0,
	0, 0, 0, 0, 0, 43, 101, 0, 0, 0,
	0, 0, 0, 0, 95, 131, 133, 132, 0, 104,
	105, 0, 0, 0, 0, 52, 0, 0, 0, 65,
	96, 98, 0, 0, 0, 156, 0, 157, 129, 130,
	134, 136, 135, 148, 149, 146, 147, 154, 150, 151,
	152, 153, 144, 145, 138, 139, 137, 140, 142, 143,
	0, 155, 131, 133, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 157, 129, 130, 134, 136, 135,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 131,
	133, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 157, 129, 130, 134, 136, 135, 148, 149, 146,
	147, 154, 150, 151, 152, 153, 144, 145, 138, 139,
	137, 140, 142, 143, 0, 155, 0, 131, 133, 132,
	0, 0, 0, 0, 0, 0, 0, 141, 649, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 157,
	129, 130, 134, 136, 135, 148, 149, 146, 147, 154,
	150, 151, 152, 153, 144, 145, 138, 139, 137, 140,
	142, 143, 0, 155, 131, 133, 132, 0, 0, 0,
	0, 0, 0, 0, 324, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 157, 129, 130, 134,
	136, 135, 148, 149, 146, 147, 154, 150, 151, 152,
	153, 144, 145, 138, 139, 137, 140, 142, 143, 0,
	155, 131, 133, 132, 0, 0, 0, 0, 0, 0,
	0, 128, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 157, 129, 130, 134, 136, 135, 148,
	149, 146, 147, 154, 150, 151, 152, 153, 144, 145,
	138, 139, 137, 140, 142, 143, 0, 155, 131, 133,
	132, 0, 0, 0, 0, 0, 0, 0, 617, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	157, 129, 130, 134, 136, 135, 148, 149, 146, 147,
	154, 150, 151, 152, 153, 144, 145, 138, 139, 137,
	140, 142, 143, 0, 155, 131, 133, 132, 0, 0,
	0, 0, 0, 0, 0, 598, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 157, 129, 130,
	134, 136, 135, 148, 149, 146, 147, 154, 150, 151,
	152, 153, 144, 145, 138, 139, 137, 140, 142, 143,
	0, 155, 131, 133, 132, 0, 0, 0, 0, 0,
	0, 0, 597, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 157, 129, 130, 134, 136, 135,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 131,
	133, 132, 0, 0, 0, 0, 0, 0, 0, 552,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 157, 129, 130, 134, 136, 135, 148, 149, 146,
	147, 154, 150, 151, 152, 153, 144, 145, 138, 139,
	137, 140, 142, 143, 0, 155, 131, 133, 132, 0,
	0, 0, 0, 0, 0, 0, 551, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 157, 129,
	130, 134, 136, 135, 148, 149, 146, 147, 154, 150,
	151, 152, 153, 144, 145, 138, 139, 137, 140, 142,
	143, 0, 155, 131, 133, 132, 0, 0, 0, 0,
	0, 0, 0, 526, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 157, 129, 130, 134, 136,
	135, 148, 149, 146, 147, 154, 150, 151, 152, 153,
	144, 145, 138, 139, 137, 140, 142, 143, 0, 155,
	131, 133, 132, 0, 0, 0, 0, 0, 0, 0,
	514, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 157, 129, 130, 134, 136, 135, 148, 149,
	146, 147, 154, 150, 151, 152, 153, 144, 145, 138,
	139, 137, 140, 142, 143, 0, 155, 131, 133, 132,
	0, 0, 0, 0, 0, 0, 0, 489, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 157,
	129, 130, 134, 136, 135, 148, 149, 146, 147, 154,
	150, 151, 152, 153, 144, 145, 138, 139, 137, 140,
	142, 143, 0, 155, 131, 133, 132, 0, 0, 0,
	0, 0, 0, 0, 485, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 157, 129, 130, 134,
	136, 135, 148, 149, 146, 147, 154, 150, 151, 152,
	153, 144, 145, 138, 139, 137, 140, 142, 143, 0,
	155, 131, 133, 132, 0, 0, 0, 0, 0, 0,
	0, 365, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 157, 129, 130, 134, 136, 135, 148,
	149, 146, 147, 154, 150, 151, 152, 153, 144, 145,
	138, 139, 137, 140, 142, 143, 0, 155, 131, 133,
	132, 0, 0, 0, 0, 0, 613, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	157, 129, 130, 134, 136, 135, 148, 149, 146, 147,
	154, 150, 151, 152, 153, 144, 145, 138, 139, 137,
	140, 142, 143, 0, 155, 131, 133, 132, 0, 0,
	0, 0, 0, 611, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 157, 129, 130,
	134, 136, 135, 148, 149, 146, 147, 154, 150, 151,
	152, 153, 144, 145, 138, 139, 137, 140, 142, 143,
	0, 155, 131, 133, 132, 0, 0, 0, 0, 0,
	602, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 157, 129, 130, 134, 136, 135,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 131,
	133, 132, 0, 0, 0, 0, 0, 553, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 157, 129, 130, 134, 136, 135, 148, 149, 146,
	147, 154, 150, 151, 152, 153, 144, 145, 138, 139,
	137, 140, 142, 143, 0, 155, 131, 133, 132, 0,
	0, 0, 0, 0, 535, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 495, 157, 129,
	130, 134, 136, 135, 148, 149, 146, 147, 154, 150,
	151, 152, 153, 144, 145, 138, 139, 137, 140, 142,
	143, 0, 155, 131, 133, 132, 0, 0, 360, 0,
	499, 516, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 157, 129, 130, 134, 136,
	135, 148, 149, 146, 147, 154, 150, 151, 152, 153,
	144, 145, 138, 139, 137, 140, 142, 143, 0, 155,
	131, 133, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 157, 129, 130, 134, 136, 135, 148, 149,
	146, 147, 154, 150, 151, 152, 153, 144, 145, 138,
	139, 137, 140, 142, 143, 376, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	156, 0, 157, 129, 130, 134, 136, 135, 148, 149,
	146, 147, 154, 150, 151, 152, 153, 144, 145, 138,
	139, 137, 140, 142, 143, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 157,
	129, 130, 134, 136, 135, 148, 149, 146, 147, 154,
	150, 151, 152, 153, 144, 145, 138, 139, 137, 140,
	142, 143, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 130, 134, 136, 135,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 134, 136, 135, 148, 149, 146, 147, 154, 150,
	151, 152, 153, 144, 145, 138, 139, 137, 140, 142,
	143, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 136, 135, 148, 149, 146,
	147, 154, 150, 151, 152, 153, 144, 145, 138, 139,
	137, 140, 142, 143, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 135, 148,
	149, 146, 147, 154, 150, 151, 152, 153, 144, 145,
	138, 139, 137, 140, 142, 143, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	148, 149, 146, 147, 154, 150, 151, 152, 153, 144,
	145, 138, 139, 137, 140, 142, 143, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141,
}
var yyPact = [...]int{

	-1000, -1000, 924, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	147, 3253, 145, 139, 4395, 4395, 4395, 4, 276, 4395,
	-1000, 4629, 137, 133, 129, -1000, 161, 4395, 379, 474,
	444, 294, 375, 401, 479, 3639, -1000, -1000, -1000, 123,
	-1000, -1000, 227, 122, 3675, 4395, 591, 591, 4395, 4395,
	4395, 4395, 4395, -1000, -1000, 4395, 4395, 4395, 4395, 4395,
	4395, 4395, 113, 4395, -1000, 436, 4395, 4395, 4395, -1000,
	-1000, -1000, 349, -1000, 186, 185, -1000, 7, 111, 110,
	4395, 4395, 108, 4395, 4395, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 333, 414, -1000, 36, 82,
	82, 107, -1000, 175, 176, 320, 3124, 4395, 273, 444,
	4395, 4395, 6, 5570, 246, -1000, 3, -3, 91, -1000,
	-1000, 90, 444, -1000, 519, 89, -1000, 5570, -1000, 4395,
	4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
	4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
	4395, 4395, 4395, 4395, 4395, 7, 4275, 4395, 591, 4395,
	314, -1000, 4582, -34, -1000, 341, -1000, 337, -1000, 204,
	106, 3253, 102, -36, 468, 4155, 4395, 4395, 4395, 4395,
	4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, -1000, -1000,
	4395, 4395, 4395, 31, 3675, -66, 549, -1000, -1000, 5523,
	591, 98, -1000, -1000, 349, 4395, -1000, -1000, 3675, -1000,
	364, 364, 478, 364, 5100, 364, 364, 364, 364, 364,
	364, 364, -1000, 4395, 364, -101, 278, 409, -1000, 274,
	4035, 591, 3543, 5610, 3543, 4395, 785, 785, 82, 183,
	153, -1000, -1000, 4395, 4395, 5570, 5570, 4395, 5570, 5570,
	260, -1000, 318, 78, 278, 4395, -1000, -1000, 3555, -1000,
	3675, 323, 320, 175, -1000, -1000, -1000, -1000, 5053, 97,
	-1000, -39, 548, 5570, 5006, -1000, -1000, -1000, -1000, 4,
	-1000, 310, -1000, 4395, -1000, 4395, 5682, 5716, 775, 3543,
	3402, 5749, 5812, 5781, 521, 521, 521, 478, 364, 478,
	478, 1043, 1043, 909, 909, 909, 909, 3412, 3412, 3412,
	3412, 909, -1000, 5476, 4395, 5647, 120, -1000, -1000, 5429,
	118, -1000, 515, 2995, -1000, -1000, -1000, 87, 204, 216,
	237, 4395, -1000, 4395, -1000, -1000, 3543, 591, 3543, 3543,
	3543, 3543, 3543, 3543, 3543, 3543, 3543, 3543, 3543, 3543,
	4959, -69, 5382, 82, -1000, 4395, -1000, 60, 512, 3675,
	3915, -1000, 3675, 4912, -72, -1000, 57, -1000, -1000, -1000,
	-1000, 459, 315, 5335, 181, 149, 4395, -77, 82, -1000,
	-1000, 4395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 82, -1000,
	-1000, -1000, -1000, 4, 4395, 4395, 31, 4, 116, -1000,
	5570, 4865, 4818, -1000, -1000, -1000, 5288, -1000, 115, -1000,
	5570, 4395, 44, -1000, 175, 2866, 4395, 4395, 4395, 304,
	-1000, -1000, 80, 5570, -1000, 4395, 5647, -41, 591, 338,
	314, 2736, 4395, -1000, 77, 203, 216, -1000, 237, -1000,
	4771, 4724, 2606, -1000, 2477, -1000, -1000, -1000, 5241, 506,
	4395, -1000, 5570, 591, 75, 43, -1000, -1000, -1000, -83,
	-1000, -1000, 292, -1000, -1000, -1000, -1000, 4395, -1000, 3543,
	-1000, -1000, 5194, -1000, -1000, -87, 5147, -1000, -1000, -1000,
	4395, -1000, -1000, -1000, -1000, 3795, 5570, -1000, -1000, -1000,
	-1000, 4677, -42, 5570, -1000, -43, -47, 203, 5647, -1000,
	-1000, 99, -1000, 591, 74, 3675, -1000, -1000, -1000, -1000,
	5570, 250, 203, 42, 534, -1000, 430, -1000, -1000, 248,
	-1000, -1000, -1000, -1000, 160, 528, -1000, 3253, 463, -49,
	-1000, -1000, -1000, 4395, 3543, -1000, 3675, 506, -1000, -1000,
	4535, -1000, -1000, -1000, -1000, -1000, 2347, -53, 4395, 105,
	-1000, 412, -1000, 40, 1830, 338, -1000, 3675, -88, 2218,
	-1000, -1000, 68, 159, 39, 229, 203, 165, -1000, -1000,
	158, -1000, 237, -1000, -1000, -1000, 3253, 3543, 35, 79,
	-55, -1000, 14, -1000, 4395, 46, 96, -56, 266, 229,
	-1000, -1000, -1000, 13, 11, -1000, -57, 237, -1000, 460,
	460, 63, -1000, 308, -1000, -1000, 272, -1000, 3253, 506,
	-1000, -1000, 2089, 405, -1000, -1000, -1000, -1000, -58, 460,
	1959, 1830, -1000, -1000, 385, -1000, 1700, -1000, 203, -1000,
	347, 498, 136, -1000, -1000, 301, 239, 756, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3253, 3253, -1000, -1000, -59, -1000, 8, 237, -1000,
	156, -1000, 155, 93, -1000, -1000, 302, 4395, -1000, 65,
	-1000, 496, 3416, -1000, 1571, 3253, 3253, 154, -1000, 151,
	-1000, -1000, -1000, -1000, 347, -1000, 5570, -1000, 301, -1000,
	4395, 64, -1000, 491, -61, -1000, -1000, 1442, 1313, -1000,
	-1000, 5570, -1000, 3416, 4395, -1000, 1184, 1055, -1000, -1000,
	-1000, -1000, 5570, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 685, 683, 26, 582, 65, 11, 681, 675, 673,
	672, 32, 0, 54, 21, 36, 48, 41, 19, 671,
	24, 669, 43, 44, 7, 39, 668, 320, 324, 269,
	662, 661, 659, 8, 653, 72, 34, 652, 40, 31,
	649, 645, 644, 643, 641, 47, 640, 639, 1, 42,
	638, 14, 10, 636, 635, 634, 632, 631, 630, 629,
	627, 626, 625, 623, 27, 35, 621, 618, 617, 55,
	5, 616, 613, 612, 23, 611, 608, 602, 600, 599,
	18, 598, 472, 597, 593, 592, 30, 37, 591, 590,
	586, 33, 25, 13, 12, 9, 486, 66, 3, 578,
	571, 367, 570, 563, 559, 2, 4,
}
var yyR1 = [...]int{

	0, 1, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 100,
	100, 100, 100, 100, 100, 100, 97, 97, 47, 47,
	5, 5, 6, 6, 6, 2, 2, 2, 71, 71,
	48, 48, 8, 8, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 50, 50,
	63, 63, 10, 10, 62, 62, 15, 4, 102, 102,
	103, 103, 7, 7, 90, 90, 96, 96, 17, 17,
	65, 65, 14, 14, 14, 14, 53, 53, 52, 52,
	9, 9, 57, 57, 57, 57, 49, 49, 49, 49,
	49, 54, 54, 68, 68, 67, 67, 56, 56, 55,
	55, 64, 64, 75, 75, 18, 18, 19, 19, 94,
	94, 92, 92, 92, 93, 93, 69, 69, 76, 76,
	20, 20, 73, 73, 22, 72, 72, 23, 23, 51,
	51, 58, 58, 78, 78, 88, 88, 104, 104, 89,
	89, 95, 95, 95, 95, 95, 95, 66, 66, 24,
	24, 83, 83, 70, 11, 61, 61, 25, 74, 74,
	77, 77, 26, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 98,
	105, 106, 101, 101, 80, 80, 81, 81, 33, 33,
	34, 34, 34, 34, 27, 27, 28, 28, 31, 31,
	60, 60, 60, 79, 79, 38, 38, 38, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 39, 39, 39, 12, 12, 13,
	13, 37, 40, 40, 40, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 16, 16, 16, 29, 29, 29,
	43, 43, 44, 44, 44, 44, 44, 44, 35, 35,
	35, 36, 36, 36, 86, 87, 87, 85, 85, 84,
	84, 84, 84, 84, 84, 82, 82, 82, 82, 45,
	45, 45, 45, 45, 45, 45, 46, 46, 46, 46,
	30, 30, 30, 30, 30, 30, 30, 59, 59, 91,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 3, 1,
	2, 0, 1, 1, 3, 1, 1, 5, 7, 9,
	5, 3, 3, 3, 3, 3, 3, 1, 2, 5,
	7, 9, 5, 1, 6, 3, 3, 2, 0, 9,
	1, 3, 0, 4, 1, 3, 1, 13, 0, 1,
	0, 1, 9, 8, 1, 2, 1, 1, 0, 2,
	0, 2, 1, 2, 4, 3, 1, 4, 1, 4,
	1, 4, 3, 4, 4, 5, 0, 5, 5, 4,
	4, 1, 4, 5, 6, 1, 3, 6, 7, 3,
	6, 1, 0, 1, 3, 4, 6, 0, 1, 1,
	2, 1, 1, 1, 0, 2, 2, 3, 1, 3,
	1, 2, 3, 1, 1, 3, 1, 1, 3, 2,
	0, 3, 4, 1, 3, 1, 1, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	4, 3, 1, 4, 4, 3, 1, 1, 0, 1,
	3, 1, 3, 6, 5, 3, 4, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 3,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 3, 2, 1, 2, 4, 2, 13, 14, 1,
	0, 0, 0, 1, 0, 4, 3, 1, 1, 2,
	2, 4, 4, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 0, 1, 4, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 3, 1, 1, 1, 3, 3, 1, 1, 0,
	1, 1, 1, 3, 1, 1, 3, 1, 1, 4,
	4, 4, 4, 1, 1, 1, 3, 1, 4, 2,
	3, 3, 1, 4, 4, 3, 3, 3, 1, 3,
	1, 1, 3, 1, 1, 0, 1, 3, 1, 3,
	1, 4, 2, 6, 4, 2, 2, 1, 2, 1,
	4, 3, 3, 3, 6, 3, 1, 1, 2, 1,
	4, 4, 2, 2, 4, 2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -47, -2, -3, -4, -7, 158, -67, -55,
	103, 102, 105, 112, 116, 117, 121, 128, 76, 82,
	87, -12, 130, 107, 109, 162, 122, 125, 118, 85,
	-98, -90, 134, -68, -56, -16, -21, 119, -96, 101,
	-42, -43, -40, 140, 69, 71, 58, 59, 49, 50,
	55, 57, 160, -26, -30, 60, 61, 62, 63, 64,
	65, 66, 100, 67, -32, 164, 13, 14, 16, 77,
	78, -29, -39, -34, -27, -37, -38, 70, 131, 132,
	4, 5, 6, 7, 8, 83, 84, 92, 93, 94,
	96, 97, 98, 99, 95, 149, 165, 86, 166, -6,
	-41, 141, 89, -5, 154, 155, -48, 160, -3, -98,
	160, 160, -13, -12, 76, 85, -13, -13, -73, -22,
	-29, -72, -98, -23, 86, -61, -25, -12, 162, 33,
	34, 10, 12, 11, 35, 37, 36, 51, 49, 50,
	52, 68, 53, 54, 47, 48, 40, 41, 38, 39,
	43, 44, 45, 46, 42, 56, 30, 32, 160, 160,
	160, 158, -12, 85, 31, -101, 37, 134, -96, 85,
	73, 74, 73, 75, 74, 17, 18, 19, 20, 29,
	21, 22, 23, 24, 25, 26, 27, 28, 58, 59,
	160, 69, 158, 139, 160, -86, -85, -87, -84, -12,
	37, 140, -12, -16, -39, 160, -38, 76, 69, -16,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -31, 160, -12, -60, 88, -82, -45, 86,
	151, 152, -12, -12, -12, 69, 153, 153, -28, -27,
	-44, -6, -29, 160, 160, -12, -12, 160, -12, -12,
	88, 150, -82, -82, 88, 158, -29, -69, 160, -69,
	160, 155, 155, -5, -8, 159, -3, -4, -12, 103,
	-101, -74, -77, -12, -12, 162, 162, 162, 162, 9,
	162, 9, -101, 17, 162, 9, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -28, -12, 31, -12, -62, -15, -16, -12,
	-71, -11, 85, -48, 162, 162, 85, -105, 85, -17,
	137, 160, -3, 160, 162, 31, -12, 37, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -13, -12, -36, 85, 158, -29, -86, 163, 9,
	15, -16, 160, -12, -86, 161, -13, 164, -45, -45,
	88, 69, 139, -12, 90, -16, 15, -13, -35, -97,
	-29, 158, 85, -100, -99, 76, 77, 78, 79, 80,
	81, 4, 5, 6, 7, 8, 10, 11, 12, 56,
	70, 71, 100, 101, 73, 74, 75, 82, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 117,
	118, 119, 120, 121, 13, 14, 140, 112, 113, 114,
	115, 116, 141, 142, 137, 138, 154, 135, 136, 134,
	95, 96, 98, 97, 92, 93, 94, 99, -35, -97,
	-29, -79, -69, 153, 69, 158, 139, 153, -59, -91,
	-12, -12, -12, 150, 150, 165, -12, 161, -76, -20,
	-12, 156, -86, 85, -5, 161, 160, 162, 9, 161,
	-22, -23, -105, -12, -25, 31, -12, 161, 9, 111,
	9, 161, 17, 159, -105, 160, -17, -65, 138, -6,
	-12, -12, -48, -16, 161, 163, 159, -69, -12, 161,
	17, -87, -12, 37, 140, -86, 161, 163, 161, -46,
	85, 91, 50, 86, 85, 159, 159, 69, 159, -12,
	163, -69, -12, -69, -29, -13, -12, -36, -29, 161,
	9, 161, 161, 159, 161, 9, -12, 161, -54, -3,
	31, -12, -74, -12, -57, 158, 31, 160, -12, 162,
	-15, -14, -16, 37, 140, 69, -11, -9, -3, 31,
	-12, -50, 160, -64, -75, -18, -19, -94, -92, 30,
	141, 142, -6, -65, -105, -78, -6, 161, 161, 75,
	-3, 31, 159, 17, -12, -16, 160, 161, 163, 91,
	-12, 159, 163, 159, -91, -20, -48, 161, 162, -49,
	162, -49, 162, -64, 161, 15, -16, 160, -86, -48,
	-105, -10, 123, 124, -64, 161, 9, -102, 37, -92,
	-105, 158, 9, -3, 31, 162, -48, -12, -86, 163,
	104, 162, -74, 159, 114, 115, -49, 113, -49, 161,
	-52, -3, 31, -14, -86, 163, 110, 160, 158, 161,
	-80, 126, -18, -103, 156, 158, -51, -6, -48, 161,
	159, 162, 161, -12, 31, 162, 159, 162, 113, -80,
	-48, 161, 161, 162, -63, -6, -48, -93, 31, -93,
	160, 86, -51, 159, -58, -88, -104, -89, 129, -95,
	81, 80, 79, 76, 77, 78, -53, -3, 31, 31,
	162, -48, -48, 162, -93, 108, -52, 86, 35, 159,
	-106, -94, -106, -81, -33, 86, 37, 17, 159, -66,
	-24, 86, 120, -95, -48, -48, -48, -106, 162, 161,
	-6, 158, 158, 161, 9, 86, -12, 162, 9, -105,
	17, -83, -70, -97, 106, 158, 158, -48, -48, -33,
	-24, -12, 162, 9, 17, 162, -48, -48, 159, 159,
	-105, -70, -12, 159, 159, -106, -106, -105, -106,
}
var yyDef = [...]int{

	79, -2, 1, 78, 85, 86, 87, 91, 95, 96,
	0, 0, 0, 0, 359, 359, 359, 0, 324, 0,
	107, 0, 0, 0, 0, 113, 0, 0, 0, 80,
	312, 0, 0, 165, 0, -2, 358, 309, 134, 0,
	-2, 375, 361, 0, 395, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 290, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 300, 330, 0, 303, 0, 136,
	137, 368, 353, 373, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 0, 0, 377, 0, -2,
	0, 0, 337, 82, 0, 0, 0, 0, 0, 312,
	228, 0, 0, 360, 324, 80, 0, 0, 0, 193,
	194, 0, 312, 196, 197, 0, 226, 227, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 117, 310, 313, 0, 135, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 252,
	0, 359, 0, 0, 395, 0, 394, 398, 396, 400,
	0, 0, 237, -2, 0, 0, -2, 324, 395, -2,
	271, 272, 273, 274, 0, 291, 292, 293, 294, 295,
	296, 297, 298, 359, 299, 0, 331, 332, 407, 409,
	0, 0, 302, 304, 306, 359, 0, 0, 333, 326,
	327, 325, 382, 0, 0, 422, 423, 0, 425, 426,
	0, 349, 0, 0, 0, 0, 379, 320, 0, 323,
	395, 0, 0, 84, 90, 94, 92, 93, 0, 0,
	310, 0, 229, 231, 0, 101, 102, 103, 104, 0,
	105, 0, 310, 0, 106, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 284, 0, 0, 289, 0, 124, -2, 0,
	0, 89, 0, 0, 115, 116, 310, 0, 138, 140,
	0, 0, 166, 0, 169, 91, 235, 0, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 0, 0, 376, 391, 0, 393, 0, 336, 395,
	0, -2, 395, 0, 0, -2, 0, 301, 408, 405,
	406, 0, 0, 0, 0, 362, 0, 0, 0, -2,
	-2, 0, 76, 77, 69, 70, 71, 72, 73, 74,
	75, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 0, -2,
	-2, 232, 334, 0, 359, 0, 0, 0, 0, 427,
	429, 0, 0, 348, 351, 350, 0, 186, 0, 188,
	190, 0, 0, 81, 83, 0, 0, 228, 0, 0,
	192, 195, 0, 198, 225, 0, 288, 0, 0, 0,
	0, 0, 0, 118, 0, -2, 140, 310, 0, 139,
	0, 0, 0, -2, 0, 369, 371, 372, 0, 0,
	0, 397, 399, 0, 0, 0, -2, 336, 329, 0,
	416, 417, 0, 419, 411, 412, 413, 0, 415, 305,
	370, 321, 0, 322, 386, 0, 0, 385, 387, 420,
	0, 421, 424, 378, 187, 0, 191, 335, 97, 161,
	91, 0, 0, 230, 100, 156, 156, -2, 287, 109,
	125, 0, -2, 0, 0, 395, 88, 112, 150, 91,
	310, 122, -2, 0, 171, 173, 128, 178, 179, 0,
	181, 182, 183, 310, 0, 141, 203, 0, 0, 0,
	163, 91, 392, 0, 234, -2, 395, 404, 410, 418,
	0, 389, 383, 384, 428, 189, 0, 0, 228, 0,
	156, 0, 156, 0, 0, 0, -2, 395, 0, 0,
	224, 114, 0, 0, 0, 314, 177, 130, 129, 180,
	0, 200, 0, 164, 91, 170, 167, 233, 0, 0,
	0, 98, 0, 152, 0, 0, 0, 0, 0, 314,
	110, 148, 91, 0, 0, -2, 0, 0, 91, 184,
	184, 0, 174, 0, 131, 200, 207, 204, 168, 403,
	414, 162, 0, 0, 91, 91, 153, 154, 0, 184,
	0, 0, 144, 151, 0, 120, 0, 311, 0, 311,
	0, 175, 207, 133, 199, 0, 0, -2, 206, 209,
	211, 212, 213, 214, 215, 216, 99, 146, 91, 91,
	91, 159, 160, 155, 311, 0, 111, 0, 0, 123,
	0, 185, 0, 0, 317, 318, 0, 0, 132, 0,
	218, 310, 0, 210, 0, 157, 158, 0, 149, 0,
	121, 91, 91, 315, 0, 319, 176, 201, 0, 219,
	0, 0, 222, 0, 0, 91, 91, 0, 0, 316,
	217, 310, 202, 0, 0, 147, 0, 0, 311, 311,
	220, 221, 310, 311, 119, 127, 307, 223, 308,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:263
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:264
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:268
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:269
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:376
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:383
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:399
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:401
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:403
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 99:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:407
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:409
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:411
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:413
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:424
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:428
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:437
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:441
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.stmt = nil
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 127:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:462
		{
			yyVAL.stmt = ast.NewFunctionStatement(yyDollar[1].tok, yyDollar[2].num, yyDollar[3].tok, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:466
		{
			yyVAL.num = 0
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:467
		{
			yyVAL.num = 1
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:471
		{
			yyVAL.num = 0
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:472
		{
			yyVAL.num = 1
		}
	case 132:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:477
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement(yyDollar[1].exprs, yyDollar[2].tok, yyDollar[3].tok, yyDollar[4].expr, yyDollar[5].exprs, yyDollar[8].stmts)
		}
	case 133:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.go.y:479
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement([]ast.Expression{}, yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr, yyDollar[4].exprs, yyDollar[7].stmts)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:483
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:484
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:488
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:489
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:507
		{
			yyVAL.expr = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:508
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:519
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:520
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:524
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:525
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:526
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:527
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:546
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:547
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:548
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:549
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:553
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:555
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:557
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:559
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:561
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:565
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:571
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:573
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:579
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:585
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:587
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:592
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:597
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:604
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:605
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:610
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:612
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:617
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:619
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:623
		{
			yyVAL.expr = nil
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:624
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:628
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:629
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:633
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:634
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:635
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:639
		{
			yyVAL.expr = nil
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:640
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:644
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:645
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:650
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:652
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:656
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:657
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:661
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:662
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:667
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:671
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:672
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:676
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:677
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:682
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmt)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:684
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:689
		{
			yyVAL.stmt = ast.NewClassStatement(yyDollar[1].exprs, yyDollar[2].exprs)
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:691
		{
			yyVAL.stmt = ast.NewClassStatement(append(yyDollar[1].exprs, ast.NewConstantEncapsedStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal)), yyDollar[3].exprs)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:701
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:702
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:758
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:759
		{
			yyVAL.exprs = []ast.Expression{ast.NewVarLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:763
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:765
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:769
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:771
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:775
		{
			yyVAL.expr = ast.NewPublicLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:776
		{
			yyVAL.expr = ast.NewProtectedLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:777
		{
			yyVAL.expr = ast.NewPrivateLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:778
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:779
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:780
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:784
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:785
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:790
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:792
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:796
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:797
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:801
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:805
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:809
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:810
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:818
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:823
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:824
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:841
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:848
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:850
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:852
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:854
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:855
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:857
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:859
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:861
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:863
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:865
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:867
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:869
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:871
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:873
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:875
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:877
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:879
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:880
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:881
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:882
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:883
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:885
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:887
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:893
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:894
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:896
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:898
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:911
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:913
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:915
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:917
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:919
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:921
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:923
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:925
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:927
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:929
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:930
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:931
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:933
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:935
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:937
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:938
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:942
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 307:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:957
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts, false)
		}
	case 308:
		yyDollar = yyS[yypt-14 : yypt+1]
		//line parser.go.y:960
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[2].tok, yyDollar[3].num, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[9].expr, yyDollar[12].stmts, true)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:964
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:968
		{
			yyVAL.expr = nil
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:972
		{
			yyVAL.expr = nil
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:976
		{
			yyVAL.num = 0
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:977
		{
			yyVAL.num = 1
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:981
		{
			yyVAL.expr = nil
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:982
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:986
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:987
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:991
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:992
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:997
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:999
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1001
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1003
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1007
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1008
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1017
		{
			yyVAL.expr = nil
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1023
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1029
		{
			yyVAL.expr = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1034
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1036
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1040
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1043
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1044
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1045
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1048
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1049
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1050
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1055
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1059
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1061
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1067
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1072
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1073
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1077
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1081
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1082
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1087
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1088
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1096
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1098
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1100
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1102
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1108
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1110
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1112
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1116
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1117
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1118
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1123
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1125
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1130
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1132
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1134
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1136
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1138
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1140
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1145
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1150
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1151
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1157
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1161
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1167
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1169
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1174
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1176
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1178
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1180
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1182
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1184
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1189
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1191
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1193
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1195
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1200
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1202
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1204
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1206
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1208
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1210
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1211
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1215
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1216
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1217
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1218
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1223
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1224
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1226
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1228
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1230
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1232
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1234
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1238
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1240
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1244
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
