//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1264

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	69, 217,
	139, 217,
	153, 217,
	158, 217,
	-2, 212,
	-1, 33,
	160, 220,
	-2, 229,
	-1, 67,
	69, 219,
	139, 219,
	153, 219,
	158, 219,
	160, 222,
	-2, 207,
	-1, 90,
	153, 180,
	-2, 209,
	-1, 187,
	69, 217,
	139, 217,
	153, 217,
	158, 217,
	-2, 118,
	-1, 190,
	160, 222,
	-2, 219,
	-1, 192,
	69, 217,
	139, 217,
	153, 217,
	158, 217,
	-2, 120,
	-1, 283,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 142,
	-1, 284,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 143,
	-1, 285,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 144,
	-1, 286,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 145,
	-1, 287,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 146,
	-1, 288,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 147,
	-1, 289,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 148,
	-1, 290,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 149,
	-1, 291,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 150,
	-1, 298,
	9, 48,
	161, 48,
	-2, 217,
	-1, 336,
	9, 257,
	161, 257,
	163, 257,
	-2, 217,
	-1, 340,
	69, 218,
	139, 218,
	153, 218,
	158, 218,
	160, 221,
	-2, 152,
	-1, 354,
	160, 243,
	-2, 210,
	-1, 355,
	160, 245,
	-2, 235,
	-1, 359,
	160, 243,
	-2, 211,
	-1, 360,
	160, 245,
	-2, 236,
	-1, 406,
	69, 217,
	139, 217,
	153, 217,
	158, 217,
	-2, 103,
	-1, 419,
	160, 221,
	-2, 218,
	-1, 464,
	15, 49,
	161, 49,
	-2, 217,
	-1, 482,
	9, 256,
	161, 256,
	163, 256,
	-2, 217,
	-1, 502,
	15, 50,
	161, 50,
	-2, 217,
	-1, 531,
	15, 52,
	161, 52,
	-2, 191,
}

const yyPrivate = 57344

const yyLast = 4898

var yyAct = [...]int{

	19, 97, 526, 179, 252, 90, 369, 463, 301, 379,
	496, 297, 328, 103, 103, 103, 181, 115, 116, 112,
	109, 240, 211, 342, 249, 354, 151, 4, 353, 88,
	329, 88, 88, 102, 99, 357, 88, 531, 183, 186,
	63, 489, 193, 194, 195, 196, 197, 106, 107, 198,
	199, 200, 201, 202, 203, 204, 541, 207, 485, 433,
	215, 216, 217, 420, 408, 67, 333, 265, 574, 262,
	569, 560, 228, 229, 224, 231, 232, 260, 549, 544,
	188, 188, 538, 518, 62, 512, 499, 94, 501, 497,
	495, 461, 387, 309, 305, 258, 448, 257, 256, 250,
	110, 254, 255, 330, 238, 190, 190, 533, 356, 89,
	570, 89, 89, 242, 548, 443, 89, 30, 399, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 104, 293, 295, 397, 299,
	224, 547, 303, 225, 105, 88, 539, 187, 192, 536,
	311, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 484, 239, 325, 103, 327, 450, 183,
	307, 421, 332, 412, 246, 573, 503, 542, 188, 483,
	338, 241, 183, 521, 522, 339, 521, 522, 430, 386,
	337, 191, 308, 306, 243, 230, 227, 103, 104, 326,
	212, 226, 345, 190, 348, 206, 178, 105, 88, 103,
	264, 93, 261, 95, 96, 188, 364, 370, 371, 225,
	259, 372, 343, 344, 500, 89, 175, 174, 543, 376,
	341, 520, 380, 362, 183, 465, 359, 382, 447, 358,
	190, 149, 352, 148, 147, 188, 343, 101, 344, 344,
	343, 100, 331, 98, 392, 298, 116, 442, 244, 537,
	400, 431, 459, 92, 534, 213, 214, 467, 150, 363,
	190, 390, 391, 393, 104, 105, 95, 96, 429, 375,
	245, 220, 189, 105, 88, 395, 366, 93, 89, 219,
	396, 65, 336, 346, 355, 360, 177, 403, 221, 404,
	367, 212, 405, 345, 251, 365, 508, 509, 486, 212,
	564, 345, 545, 521, 522, 176, 113, 144, 212, 302,
	237, 411, 350, 384, 427, 183, 415, 105, 183, 130,
	212, 418, 233, 383, 152, 110, 210, 212, 466, 92,
	410, 414, 432, 188, 95, 96, 212, 435, 209, 154,
	155, 212, 95, 96, 218, 103, 439, 130, 189, 511,
	222, 563, 310, 347, 89, 434, 213, 214, 190, 440,
	436, 480, 449, 374, 213, 214, 153, 454, 254, 456,
	413, 401, 455, 213, 214, 460, 263, 388, 438, 458,
	425, 334, 472, 506, 234, 213, 214, 180, 468, 462,
	452, 373, 213, 214, 481, 524, 521, 522, 156, 158,
	157, 213, 214, 182, 361, 470, 213, 214, 253, 378,
	406, 487, 477, 235, 236, 423, 426, 108, 188, 188,
	111, 424, 300, 28, 370, 6, 222, 550, 437, 380,
	491, 331, 441, 292, 296, 493, 114, 188, 492, 208,
	368, 457, 29, 190, 190, 7, 451, 553, 183, 473,
	498, 504, 2, 505, 129, 131, 132, 422, 144, 223,
	513, 514, 190, 34, 183, 33, 91, 515, 35, 66,
	130, 64, 57, 205, 47, 46, 254, 31, 507, 510,
	519, 469, 247, 3, 183, 1, 188, 530, 523, 529,
	525, 0, 0, 535, 0, 298, 464, 0, 0, 0,
	0, 0, 540, 0, 0, 527, 0, 0, 0, 0,
	546, 190, 0, 0, 482, 0, 552, 0, 0, 551,
	0, 0, 188, 558, 559, 0, 0, 0, 0, 0,
	562, 71, 72, 73, 74, 75, 0, 566, 567, 568,
	59, 60, 0, 61, 554, 0, 0, 190, 0, 0,
	571, 0, 527, 0, 0, 575, 0, 0, 0, 0,
	0, 0, 0, 502, 127, 128, 126, 129, 131, 132,
	0, 144, 0, 0, 0, 0, 41, 42, 0, 0,
	0, 0, 43, 130, 44, 39, 40, 48, 49, 50,
	51, 52, 53, 54, 56, 0, 37, 68, 38, 464,
	0, 0, 0, 16, 0, 0, 0, 0, 0, 17,
	76, 77, 27, 88, 18, 0, 93, 0, 0, 78,
	79, 80, 85, 81, 82, 83, 84, 55, 32, 9,
	8, 0, 10, 0, 21, 0, 22, 0, 0, 11,
	0, 0, 0, 12, 13, 26, 0, 0, 14, 24,
	0, 0, 25, 0, 0, 15, 0, 20, 69, 70,
	71, 72, 73, 74, 75, 0, 0, 36, 92, 59,
	60, 0, 61, 0, 0, 0, 86, 0, 0, 0,
	0, 95, 96, 0, 0, 5, 576, 45, 0, 23,
	0, 58, 87, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 42, 0, 0, 0,
	0, 43, 0, 44, 39, 40, 48, 49, 50, 51,
	52, 53, 54, 56, 0, 37, 68, 38, 0, 0,
	0, 0, 16, 0, 0, 0, 0, 0, 17, 76,
	77, 27, 88, 18, 0, 93, 0, 0, 78, 79,
	80, 85, 81, 82, 83, 84, 55, 32, 9, 8,
	0, 10, 572, 21, 0, 22, 0, 0, 11, 0,
	0, 0, 12, 13, 26, 0, 0, 14, 24, 0,
	0, 25, 0, 0, 15, 0, 20, 69, 70, 71,
	72, 73, 74, 75, 0, 0, 36, 92, 59, 60,
	0, 61, 0, 0, 0, 86, 0, 0, 0, 0,
	95, 96, 0, 0, 5, 0, 45, 0, 23, 0,
	58, 87, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 42, 0, 0, 0, 0,
	43, 0, 44, 39, 40, 48, 49, 50, 51, 52,
	53, 54, 56, 0, 37, 68, 38, 0, 0, 0,
	0, 16, 0, 0, 0, 0, 0, 17, 76, 77,
	27, 88, 18, 0, 93, 0, 0, 78, 79, 80,
	85, 81, 82, 83, 84, 55, 32, 9, 8, 0,
	10, 0, 21, 0, 22, 0, 0, 11, 0, 0,
	0, 12, 13, 26, 0, 0, 14, 24, 0, 0,
	25, 0, 0, 15, 0, 20, 69, 70, 0, 71,
	72, 73, 74, 75, 0, 36, 92, 0, 59, 60,
	0, 61, 0, 0, 86, 0, 0, 0, 0, 95,
	96, 0, 0, 5, 565, 45, 528, 23, 0, 58,
	87, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 42, 0, 0, 0, 0,
	43, 0, 44, 39, 40, 48, 49, 50, 51, 52,
	53, 54, 56, 0, 37, 68, 38, 0, 0, 0,
	0, 16, 0, 0, 0, 0, 0, 17, 76, 77,
	27, 88, 18, 0, 93, 0, 0, 78, 79, 80,
	85, 81, 82, 83, 84, 55, 32, 9, 8, 0,
	10, 0, 21, 0, 22, 0, 0, 11, 0, 0,
	0, 12, 13, 26, 0, 0, 14, 24, 0, 0,
	25, 0, 0, 15, 0, 20, 69, 70, 71, 72,
	73, 74, 75, 0, 0, 36, 92, 59, 60, 0,
	61, 0, 0, 0, 86, 0, 0, 0, 0, 95,
	96, 0, 0, 5, 0, 45, 0, 23, 0, 58,
	87, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 42, 0, 0, 0, 0, 43,
	0, 44, 39, 40, 48, 49, 50, 51, 52, 53,
	54, 56, 0, 37, 68, 38, 0, 0, 0, 0,
	16, 0, 0, 0, 0, 0, 17, 76, 77, 27,
	88, 18, 0, 93, 0, 0, 78, 79, 80, 85,
	81, 82, 83, 84, 55, 32, 9, 8, 0, 10,
	0, 21, 561, 22, 0, 0, 11, 0, 0, 0,
	12, 13, 26, 0, 0, 14, 24, 0, 0, 25,
	0, 0, 15, 0, 20, 69, 70, 0, 71, 72,
	73, 74, 75, 0, 36, 92, 0, 59, 60, 0,
	61, 0, 0, 86, 0, 0, 0, 0, 95, 96,
	0, 0, 5, 0, 45, 555, 23, 0, 58, 87,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 42, 0, 0, 0, 0, 43,
	0, 44, 39, 40, 48, 49, 50, 51, 52, 53,
	54, 56, 0, 37, 68, 38, 0, 0, 0, 0,
	16, 0, 0, 0, 0, 0, 17, 76, 77, 27,
	88, 18, 0, 93, 0, 0, 78, 79, 80, 85,
	81, 82, 83, 84, 55, 32, 9, 8, 0, 10,
	0, 21, 0, 22, 0, 0, 11, 0, 0, 0,
	12, 13, 26, 0, 0, 14, 24, 0, 0, 25,
	0, 0, 15, 0, 20, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 36, 92, 59, 60, 0, 61,
	0, 0, 0, 86, 0, 0, 0, 0, 95, 96,
	0, 0, 5, 0, 45, 0, 23, 0, 58, 87,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 0, 0, 0, 0, 43, 0,
	44, 39, 40, 48, 49, 50, 51, 52, 53, 54,
	56, 0, 37, 68, 38, 0, 0, 0, 0, 16,
	0, 0, 0, 0, 0, 17, 76, 77, 27, 88,
	18, 0, 93, 0, 0, 78, 79, 80, 85, 81,
	82, 83, 84, 55, 32, 9, 8, 0, 10, 0,
	21, 0, 22, 532, 0, 11, 0, 0, 0, 12,
	13, 26, 0, 0, 14, 24, 0, 0, 25, 0,
	0, 15, 0, 20, 69, 70, 71, 72, 73, 74,
	75, 0, 0, 36, 92, 59, 60, 0, 61, 0,
	0, 0, 86, 0, 0, 0, 0, 95, 96, 0,
	0, 5, 0, 45, 0, 23, 0, 58, 87, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 42, 0, 0, 0, 0, 43, 0, 44,
	39, 40, 48, 49, 50, 51, 52, 53, 54, 56,
	0, 37, 68, 38, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 17, 76, 77, 27, 88, 18,
	0, 93, 0, 0, 78, 79, 80, 85, 81, 82,
	83, 84, 55, 32, 9, 8, 517, 10, 0, 21,
	0, 22, 0, 0, 11, 0, 0, 0, 12, 13,
	26, 0, 0, 14, 24, 0, 0, 25, 0, 0,
	15, 0, 20, 69, 70, 0, 71, 72, 73, 74,
	75, 0, 36, 92, 0, 59, 60, 0, 61, 0,
	0, 86, 0, 0, 0, 0, 95, 96, 0, 0,
	5, 0, 45, 478, 23, 0, 58, 87, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 42, 0, 0, 0, 0, 43, 0, 44,
	39, 40, 48, 49, 50, 51, 52, 53, 54, 56,
	0, 37, 68, 38, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 17, 76, 77, 27, 88, 18,
	0, 93, 0, 0, 78, 79, 80, 85, 81, 82,
	83, 84, 55, 32, 9, 8, 0, 10, 0, 21,
	0, 22, 0, 0, 11, 0, 0, 0, 12, 13,
	26, 0, 0, 14, 24, 0, 0, 25, 0, 0,
	15, 0, 20, 69, 70, 71, 72, 73, 74, 75,
	0, 0, 36, 92, 59, 60, 0, 61, 0, 0,
	0, 86, 0, 0, 0, 0, 95, 96, 0, 0,
	5, 0, 45, 0, 23, 0, 58, 87, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 0, 0, 0, 0, 43, 0, 44, 39,
	40, 48, 49, 50, 51, 52, 53, 54, 56, 0,
	37, 68, 38, 0, 0, 0, 476, 16, 0, 0,
	0, 0, 0, 17, 76, 77, 27, 88, 18, 0,
	93, 0, 0, 78, 79, 80, 85, 81, 82, 83,
	84, 55, 32, 9, 8, 0, 10, 0, 21, 0,
	22, 0, 0, 11, 0, 0, 0, 12, 13, 26,
	0, 0, 14, 24, 0, 0, 25, 0, 0, 15,
	0, 20, 69, 70, 0, 71, 72, 73, 74, 75,
	0, 36, 92, 0, 59, 60, 0, 61, 0, 0,
	86, 0, 0, 0, 0, 95, 96, 0, 0, 5,
	0, 45, 471, 23, 0, 58, 87, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 0, 0, 0, 0, 43, 0, 44, 39,
	40, 48, 49, 50, 51, 52, 53, 54, 56, 0,
	37, 68, 38, 0, 0, 0, 0, 16, 0, 0,
	0, 0, 0, 17, 76, 77, 27, 88, 18, 0,
	93, 0, 0, 78, 79, 80, 85, 81, 82, 83,
	84, 55, 32, 9, 8, 0, 10, 0, 21, 0,
	22, 0, 0, 11, 0, 0, 0, 12, 13, 26,
	0, 0, 14, 24, 0, 0, 25, 0, 0, 15,
	0, 20, 69, 70, 0, 71, 72, 73, 74, 75,
	0, 36, 92, 0, 59, 60, 0, 61, 0, 0,
	86, 0, 0, 0, 0, 95, 96, 0, 0, 5,
	0, 45, 453, 23, 0, 58, 87, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 0, 0, 0, 0, 43, 0, 44, 39,
	40, 48, 49, 50, 51, 52, 53, 54, 56, 0,
	37, 68, 38, 0, 0, 0, 0, 16, 0, 0,
	0, 0, 0, 17, 76, 77, 27, 88, 18, 0,
	93, 0, 0, 78, 79, 80, 85, 81, 82, 83,
	84, 55, 32, 9, 8, 0, 10, 0, 21, 0,
	22, 0, 0, 11, 0, 0, 0, 12, 13, 26,
	0, 0, 14, 24, 0, 0, 25, 0, 0, 15,
	0, 20, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 36, 92, 59, 60, 0, 61, 0, 0, 0,
	86, 0, 0, 0, 0, 95, 96, 0, 0, 5,
	0, 45, 0, 23, 0, 58, 87, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	42, 0, 0, 0, 0, 43, 0, 44, 39, 40,
	48, 49, 50, 51, 52, 53, 54, 56, 0, 37,
	68, 38, 0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 17, 76, 77, 27, 88, 18, 0, 93,
	0, 0, 78, 79, 80, 85, 81, 82, 83, 84,
	55, 32, 9, 8, 0, 10, 0, 21, 0, 22,
	0, 0, 11, 0, 0, 0, 12, 13, 26, 0,
	0, 14, 24, 0, 0, 25, 0, 0, 15, 0,
	20, 69, 70, 71, 72, 73, 74, 75, 0, 0,
	36, 92, 59, 60, 0, 61, 0, 0, 0, 86,
	0, 0, 0, 0, 95, 96, 0, 0, 5, 402,
	45, 0, 23, 0, 58, 87, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 42,
	0, 0, 0, 0, 43, 0, 44, 39, 40, 48,
	49, 50, 51, 52, 53, 54, 56, 0, 37, 68,
	38, 0, 0, 0, 0, 16, 0, 0, 0, 0,
	0, 17, 76, 77, 27, 88, 18, 0, 93, 0,
	0, 78, 79, 80, 85, 81, 82, 83, 84, 55,
	32, 9, 8, 0, 10, 0, 21, 0, 22, 0,
	0, 11, 0, 0, 0, 12, 13, 26, 0, 0,
	14, 24, 0, 0, 25, 0, 0, 15, 0, 20,
	69, 70, 71, 72, 73, 74, 75, 0, 0, 36,
	92, 59, 60, 0, 61, 0, 0, 0, 86, 0,
	0, 0, 0, 95, 96, 0, 0, 5, 248, 45,
	0, 23, 0, 58, 87, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 0,
	0, 0, 0, 43, 0, 44, 39, 40, 48, 49,
	50, 51, 52, 53, 54, 56, 0, 37, 68, 38,
	0, 0, 0, 0, 16, 0, 0, 0, 0, 0,
	17, 76, 77, 27, 88, 18, 0, 93, 0, 0,
	78, 79, 80, 85, 81, 82, 83, 84, 55, 32,
	9, 8, 0, 10, 0, 21, 0, 22, 0, 0,
	11, 0, 0, 0, 12, 13, 26, 0, 0, 14,
	24, 0, 0, 25, 0, 0, 15, 0, 20, 69,
	70, 71, 72, 73, 74, 75, 0, 0, 36, 92,
	59, 60, 0, 61, 0, 0, 0, 86, 0, 0,
	0, 0, 95, 96, 0, 0, 5, 0, 45, 0,
	23, 0, 58, 87, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 42, 0, 0,
	0, 0, 43, 0, 44, 39, 40, 48, 49, 50,
	51, 52, 53, 54, 56, 0, 37, 68, 38, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	76, 77, 105, 88, 0, 0, 93, 0, 0, 78,
	79, 80, 85, 81, 82, 83, 84, 55, 0, 0,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 0, 144, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 59, 60, 130, 61, 0, 69, 70,
	0, 0, 0, 0, 0, 0, 0, 36, 92, 0,
	0, 0, 0, 0, 0, 0, 86, 184, 0, 0,
	0, 95, 96, 381, 0, 0, 0, 45, 377, 41,
	42, 58, 87, 89, 0, 43, 0, 44, 39, 40,
	48, 49, 50, 51, 52, 53, 54, 56, 0, 37,
	68, 38, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 76, 77, 105, 88, 0, 0, 93,
	0, 0, 78, 79, 80, 85, 81, 82, 83, 84,
	55, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 0, 0, 0, 0, 0, 71, 72, 73, 74,
	75, 0, 130, 0, 0, 59, 60, 0, 61, 0,
	0, 69, 70, 0, 0, 0, 0, 0, 0, 0,
	185, 92, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 95, 96, 0, 0, 0, 0,
	45, 41, 42, 0, 58, 87, 89, 43, 0, 44,
	39, 40, 48, 49, 50, 51, 52, 53, 54, 56,
	0, 37, 68, 38, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 76, 77, 105, 88, 0,
	0, 93, 0, 0, 78, 79, 80, 85, 81, 82,
	83, 84, 55, 159, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 163, 0, 0, 0, 71,
	72, 73, 74, 75, 0, 0, 0, 0, 59, 60,
	0, 61, 0, 69, 70, 0, 0, 0, 0, 0,
	0, 0, 36, 92, 172, 173, 0, 0, 0, 0,
	0, 86, 416, 0, 0, 0, 95, 96, 381, 0,
	0, 0, 45, 0, 41, 42, 58, 87, 89, 0,
	43, 0, 44, 39, 40, 48, 49, 50, 51, 52,
	53, 54, 56, 0, 37, 68, 38, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 76, 77,
	105, 88, 0, 0, 93, 0, 0, 78, 79, 80,
	85, 81, 82, 83, 84, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 72, 73, 74, 75, 0, 0, 0, 0,
	59, 60, 0, 61, 0, 0, 69, 70, 0, 0,
	0, 0, 0, 0, 0, 417, 92, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 95,
	96, 0, 0, 0, 0, 45, 41, 42, 0, 58,
	87, 89, 43, 0, 44, 39, 40, 48, 49, 50,
	51, 52, 53, 54, 56, 0, 37, 68, 38, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	76, 77, 105, 88, 0, 0, 93, 349, 0, 78,
	79, 80, 85, 81, 82, 83, 84, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 59, 60, 0, 61, 0, 69, 70,
	0, 0, 0, 0, 0, 0, 0, 36, 92, 0,
	0, 0, 0, 0, 0, 0, 86, 312, 0, 0,
	0, 95, 96, 0, 0, 0, 0, 45, 0, 41,
	42, 58, 87, 89, 0, 43, 0, 44, 39, 40,
	48, 49, 50, 51, 52, 53, 54, 56, 0, 37,
	68, 38, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 76, 77, 105, 88, 0, 0, 93,
	0, 0, 78, 79, 80, 85, 81, 82, 83, 84,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 73, 74,
	75, 0, 0, 0, 0, 59, 60, 0, 61, 0,
	0, 69, 70, 0, 0, 0, 0, 0, 0, 0,
	36, 92, 0, 294, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 95, 96, 0, 0, 0, 0,
	45, 41, 42, 0, 58, 87, 89, 43, 0, 44,
	39, 40, 48, 49, 50, 51, 52, 53, 54, 56,
	0, 37, 68, 38, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 76, 77, 105, 88, 0,
	0, 93, 0, 0, 78, 79, 80, 85, 81, 82,
	83, 84, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	73, 74, 75, 0, 0, 0, 0, 59, 60, 0,
	61, 0, 0, 69, 70, 0, 0, 0, 0, 0,
	0, 0, 36, 92, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 95, 96, 0, 0,
	0, 0, 45, 41, 42, 0, 58, 87, 89, 43,
	0, 44, 39, 40, 48, 49, 50, 51, 52, 53,
	54, 56, 0, 37, 68, 38, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 76, 77, 105,
	88, 0, 0, 93, 0, 0, 78, 79, 80, 85,
	81, 82, 83, 84, 55, 145, 0, 146, 118, 119,
	123, 125, 124, 137, 138, 135, 136, 143, 139, 140,
	141, 142, 133, 134, 127, 128, 126, 129, 131, 132,
	0, 144, 0, 0, 0, 69, 70, 0, 0, 0,
	0, 0, 0, 130, 36, 92, 0, 0, 0, 0,
	0, 0, 0, 86, 120, 122, 121, 0, 95, 96,
	0, 0, 0, 0, 45, 0, 0, 0, 58, 87,
	89, 0, 0, 0, 145, 556, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 120, 122, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 146, 118, 119, 123, 125, 124, 137,
	138, 135, 136, 143, 139, 140, 141, 142, 133, 134,
	127, 128, 126, 129, 131, 132, 0, 144, 0, 120,
	122, 121, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 146, 118, 119, 123, 125, 124, 137, 138, 135,
	136, 143, 139, 140, 141, 142, 133, 134, 127, 128,
	126, 129, 131, 132, 0, 144, 0, 120, 122, 121,
	0, 0, 0, 0, 0, 0, 557, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 146,
	118, 119, 123, 125, 124, 137, 138, 135, 136, 143,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 0, 144, 120, 122, 121, 0, 0, 0,
	0, 0, 0, 0, 516, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 0, 120, 122, 121, 0, 0, 0, 0, 0,
	0, 304, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 146, 118, 119, 123, 125, 124,
	137, 138, 135, 136, 143, 139, 140, 141, 142, 133,
	134, 127, 128, 126, 129, 131, 132, 0, 144, 120,
	122, 121, 0, 0, 0, 0, 0, 0, 0, 117,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 146, 118, 119, 123, 125, 124, 137, 138, 135,
	136, 143, 139, 140, 141, 142, 133, 134, 127, 128,
	126, 129, 131, 132, 0, 144, 120, 122, 121, 0,
	0, 0, 0, 0, 0, 494, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 146, 118,
	119, 123, 125, 124, 137, 138, 135, 136, 143, 139,
	140, 141, 142, 133, 134, 127, 128, 126, 129, 131,
	132, 0, 144, 120, 122, 121, 0, 0, 0, 0,
	0, 0, 0, 475, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 146, 118, 119, 123, 125,
	124, 137, 138, 135, 136, 143, 139, 140, 141, 142,
	133, 134, 127, 128, 126, 129, 131, 132, 0, 144,
	120, 122, 121, 0, 0, 0, 0, 0, 0, 0,
	474, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 146, 118, 119, 123, 125, 124, 137, 138,
	135, 136, 143, 139, 140, 141, 142, 133, 134, 127,
	128, 126, 129, 131, 132, 0, 144, 120, 122, 121,
	0, 0, 0, 0, 0, 0, 0, 445, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 146,
	118, 119, 123, 125, 124, 137, 138, 135, 136, 143,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 0, 144, 120, 122, 121, 0, 0, 0,
	0, 0, 0, 0, 444, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 120, 122, 121, 0, 0, 0, 0, 0, 0,
	0, 419, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 146, 118, 119, 123, 125, 124, 137,
	138, 135, 136, 143, 139, 140, 141, 142, 133, 134,
	127, 128, 126, 129, 131, 132, 0, 144, 120, 122,
	121, 0, 0, 0, 0, 0, 0, 0, 407, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	146, 118, 119, 123, 125, 124, 137, 138, 135, 136,
	143, 139, 140, 141, 142, 133, 134, 127, 128, 126,
	129, 131, 132, 0, 144, 120, 122, 121, 0, 0,
	0, 0, 0, 0, 0, 389, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 146, 118, 119,
	123, 125, 124, 137, 138, 135, 136, 143, 139, 140,
	141, 142, 133, 134, 127, 128, 126, 129, 131, 132,
	0, 144, 120, 122, 121, 0, 0, 0, 0, 0,
	0, 0, 385, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 146, 118, 119, 123, 125, 124,
	137, 138, 135, 136, 143, 139, 140, 141, 142, 133,
	134, 127, 128, 126, 129, 131, 132, 0, 144, 120,
	122, 121, 0, 0, 0, 0, 0, 0, 0, 340,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 146, 118, 119, 123, 125, 124, 137, 138, 135,
	136, 143, 139, 140, 141, 142, 133, 134, 127, 128,
	126, 129, 131, 132, 0, 144, 120, 122, 121, 0,
	0, 0, 0, 0, 490, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 146, 118,
	119, 123, 125, 124, 137, 138, 135, 136, 143, 139,
	140, 141, 142, 133, 134, 127, 128, 126, 129, 131,
	132, 0, 144, 120, 122, 121, 0, 0, 0, 0,
	0, 488, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 146, 118, 119, 123, 125,
	124, 137, 138, 135, 136, 143, 139, 140, 141, 142,
	133, 134, 127, 128, 126, 129, 131, 132, 0, 144,
	120, 122, 121, 0, 0, 0, 0, 0, 479, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 146, 118, 119, 123, 125, 124, 137, 138,
	135, 136, 143, 139, 140, 141, 142, 133, 134, 127,
	128, 126, 129, 131, 132, 0, 144, 120, 122, 121,
	0, 0, 0, 0, 0, 446, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 146,
	118, 119, 123, 125, 124, 137, 138, 135, 136, 143,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 0, 144, 120, 122, 121, 0, 0, 0,
	0, 0, 428, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 394, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 120, 122, 121, 0, 0, 335, 0, 398, 409,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 146, 118, 119, 123, 125, 124, 137,
	138, 135, 136, 143, 139, 140, 141, 142, 133, 134,
	127, 128, 126, 129, 131, 132, 0, 144, 120, 122,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	146, 118, 119, 123, 125, 124, 137, 138, 135, 136,
	143, 139, 140, 141, 142, 133, 134, 127, 128, 126,
	129, 131, 132, 0, 144, 122, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 121,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 145, 0, 146,
	118, 119, 123, 125, 124, 137, 138, 135, 136, 143,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 351, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 145, 0, 146,
	118, 119, 123, 125, 124, 137, 138, 135, 136, 143,
	139, 140, 141, 142, 133, 134, 127, 128, 126, 129,
	131, 132, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 146, 118, 119, 123,
	125, 124, 137, 138, 135, 136, 143, 139, 140, 141,
	142, 133, 134, 127, 128, 126, 129, 131, 132, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 123, 125, 124, 137, 138, 135,
	136, 143, 139, 140, 141, 142, 133, 134, 127, 128,
	126, 129, 131, 132, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 123, 125,
	124, 137, 138, 135, 136, 143, 139, 140, 141, 142,
	133, 134, 127, 128, 126, 129, 131, 132, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 125, 124, 137, 138, 135, 136, 143, 139,
	140, 141, 142, 133, 134, 127, 128, 126, 129, 131,
	132, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 124, 137, 138, 135, 136,
	143, 139, 140, 141, 142, 133, 134, 127, 128, 126,
	129, 131, 132, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 137, 138, 135,
	136, 143, 139, 140, 141, 142, 133, 134, 127, 128,
	126, 129, 131, 132, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130,
}
var yyPact = [...]int{

	-1000, -1000, 2358, -1000, -1000, -1000, -1000, -1000, 103, 2358,
	101, 97, 3274, 3274, 3274, -57, 240, 3274, -1000, 3557,
	94, 93, 91, -1000, 120, 3274, 259, 355, 286, 345,
	2796, -1000, 77, -1000, -1000, 167, 56, 2600, 3274, 132,
	132, 3274, 3274, 3274, 3274, 3274, -1000, -1000, 3274, 3274,
	3274, 3274, 3274, 3274, 3274, 55, 3274, -1000, 270, 3274,
	3274, 3274, -1000, 295, -1000, 146, 138, -1000, 69, 51,
	46, 3274, 3274, 45, 3274, 3274, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 254, 242, -1000, -54,
	31, 31, 44, -1000, 113, 135, 252, 2229, 3274, 211,
	3274, 3274, -64, 4498, -1000, -1000, -65, -67, 68, -1000,
	-1000, 60, -1000, 379, 58, -1000, 4498, -1000, 3274, 3274,
	3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
	3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
	3274, 3274, 3274, 3274, 69, 3162, 3274, 132, 3274, 244,
	-1000, 3509, -68, -1000, 43, 2358, 42, -69, 341, 3050,
	3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
	3274, 3274, -1000, -1000, 3274, 3274, 3274, -55, 2600, -97,
	392, -1000, -1000, 4451, 132, 40, -1000, -1000, 295, 3274,
	-1000, 2600, -1000, 299, 299, 271, 299, 4028, 299, 299,
	299, 299, 299, 299, 299, -1000, 3274, 299, -141, 275,
	225, -1000, 234, 2937, 132, 3345, 4627, 3345, 3274, -50,
	-50, 31, 126, 157, -1000, -1000, 3274, 3274, 4498, 4498,
	3274, 4498, 4498, 261, -1000, 233, 124, 275, 3274, -1000,
	-1000, 2487, -1000, 2600, 258, 252, 113, -1000, -1000, -1000,
	3981, 39, -70, 388, 4498, 3934, -1000, -1000, -1000, -1000,
	-57, -1000, 240, 3274, -1000, 3274, 4699, 4733, 4544, 3345,
	4587, 4766, 4829, 4798, 422, 422, 422, 271, 299, 271,
	271, 535, 535, 2547, 2547, 2547, 2547, 2654, 2654, 2654,
	2654, 2547, -1000, 4404, 3274, 4664, 139, -1000, -1000, 4357,
	109, -1000, 374, 2100, -1000, -1000, 3274, -1000, 3274, -1000,
	-1000, 3345, 132, 3345, 3345, 3345, 3345, 3345, 3345, 3345,
	3345, 3345, 3345, 3345, 3345, 3887, -99, 4310, 31, -1000,
	3274, -1000, 22, 373, 2600, 2825, -1000, 2600, 3840, -100,
	-1000, 20, -1000, -1000, -1000, -1000, 350, 249, 4263, 129,
	112, 3274, -104, 31, -1000, -1000, 3274, -1000, 31, -1000,
	-1000, -1000, -1000, -57, 3274, 3274, -55, -57, 106, -1000,
	4498, 3793, 3746, -1000, -1000, -1000, 4216, -1000, 87, -1000,
	4498, 3274, 17, -1000, 113, 1971, 3274, 3274, 3274, 241,
	-1000, -1000, 4498, -1000, 3274, 4664, -71, 132, 208, 244,
	1841, 3274, -1000, 3699, 3652, 1711, -1000, 1582, -1000, -1000,
	-1000, 4169, 364, 3274, -1000, 4498, 132, 29, 12, -1000,
	-1000, -1000, -105, -1000, -1000, 227, -1000, -1000, -1000, -1000,
	3274, -1000, 3345, -1000, -1000, 4122, -1000, -1000, -122, 4075,
	-1000, -1000, -1000, 3274, -1000, -1000, -1000, -1000, 2712, 4498,
	-1000, -1000, -1000, -1000, 3604, -72, 4498, -1000, -73, -76,
	4664, -1000, -1000, 73, -1000, 132, 26, 2600, -1000, -1000,
	-1000, -1000, 4498, 193, 2358, 338, -77, -1000, -1000, -1000,
	3274, 3345, -1000, 2600, 364, -1000, -1000, 3461, -1000, -1000,
	-1000, -1000, -1000, 1452, -79, 3274, 82, -1000, 302, -1000,
	935, 208, -1000, 2600, -126, 1323, -1000, -1000, -53, 116,
	-1000, -1000, -1000, 2358, 3345, -2, 110, -80, -1000, -5,
	-1000, 3274, 25, 79, -83, 209, -1000, -1000, -1000, -10,
	-47, -1000, -84, 200, -1000, 2358, 364, -1000, -1000, 1194,
	3414, -1000, -1000, -1000, -1000, -91, 1064, 935, -1000, -1000,
	285, -1000, 805, -1000, -1000, -1000, -1000, -1000, 2358, 2358,
	-1000, -92, -1000, -51, 200, -1000, 676, 2358, 2358, -1000,
	27, -1000, -94, -1000, -1000, 547, -1000,
}
var yyPgo = [...]int{

	0, 505, 503, 24, 87, 5, 502, 501, 498, 8,
	0, 33, 7, 11, 117, 9, 497, 20, 19, 17,
	495, 301, 308, 84, 494, 493, 492, 491, 28, 12,
	489, 65, 40, 488, 486, 485, 483, 479, 22, 477,
	472, 1, 10, 469, 2, 467, 466, 465, 462, 461,
	460, 459, 456, 454, 447, 445, 443, 21, 442, 440,
	437, 4, 429, 428, 424, 346, 423, 407, 3, 16,
	6, 25, 403,
}
var yyR1 = [...]int{

	0, 1, 71, 40, 40, 4, 4, 5, 5, 5,
	2, 58, 58, 41, 41, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	43, 43, 54, 54, 8, 8, 53, 53, 13, 12,
	12, 12, 12, 45, 45, 44, 44, 7, 7, 49,
	49, 49, 49, 42, 42, 42, 42, 42, 46, 46,
	56, 56, 55, 55, 48, 48, 47, 47, 57, 57,
	62, 62, 15, 15, 60, 60, 17, 59, 59, 18,
	18, 9, 52, 52, 19, 61, 61, 63, 63, 20,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 72, 27, 27, 27, 27, 21,
	21, 22, 22, 25, 25, 51, 51, 51, 64, 64,
	31, 31, 31, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 32,
	32, 32, 10, 10, 11, 11, 30, 33, 33, 33,
	34, 34, 34, 35, 35, 35, 35, 35, 35, 14,
	14, 14, 23, 23, 23, 36, 36, 37, 37, 37,
	37, 37, 37, 28, 28, 28, 29, 29, 29, 68,
	69, 69, 67, 67, 66, 66, 66, 66, 66, 66,
	65, 65, 65, 65, 38, 38, 38, 38, 38, 38,
	38, 39, 39, 39, 39, 24, 24, 24, 24, 24,
	24, 24, 50, 50, 70,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 0, 1, 3, 1, 3, 2,
	1, 3, 1, 2, 0, 1, 3, 1, 1, 5,
	7, 9, 5, 3, 3, 3, 3, 3, 3, 1,
	2, 5, 7, 9, 5, 1, 6, 3, 3, 2,
	0, 9, 1, 3, 0, 4, 1, 3, 1, 1,
	2, 4, 3, 1, 4, 1, 4, 1, 4, 3,
	4, 4, 5, 0, 5, 5, 4, 4, 1, 4,
	5, 6, 1, 3, 6, 7, 3, 6, 2, 3,
	1, 3, 1, 2, 3, 1, 1, 3, 1, 1,
	3, 4, 3, 1, 1, 0, 1, 3, 1, 3,
	6, 5, 3, 4, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 3, 2,
	1, 2, 4, 2, 0, 2, 4, 4, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 0, 1,
	4, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 3, 1, 1, 1,
	3, 3, 1, 1, 0, 1, 1, 1, 3, 1,
	1, 3, 1, 1, 4, 4, 4, 4, 1, 1,
	1, 3, 1, 4, 2, 3, 3, 1, 4, 4,
	3, 3, 3, 1, 3, 1, 1, 3, 1, 1,
	0, 1, 3, 1, 3, 1, 4, 2, 6, 4,
	2, 2, 1, 2, 1, 4, 3, 3, 3, 6,
	3, 1, 1, 2, 1, 4, 4, 2, 2, 4,
	2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -40, -2, -3, 158, -55, -47, 103, 102,
	105, 112, 116, 117, 121, 128, 76, 82, 87, -10,
	130, 107, 109, 162, 122, 125, 118, 85, -56, -48,
	-14, -16, 101, -35, -36, -33, 140, 69, 71, 58,
	59, 49, 50, 55, 57, 160, -20, -24, 60, 61,
	62, 63, 64, 65, 66, 100, 67, -26, 164, 13,
	14, 16, -23, -32, -27, -21, -30, -31, 70, 131,
	132, 4, 5, 6, 7, 8, 83, 84, 92, 93,
	94, 96, 97, 98, 99, 95, 149, 165, 86, 166,
	-5, -34, 141, 89, -4, 154, 155, -41, 160, -3,
	160, 160, -11, -10, 76, 85, -11, -11, -60, -17,
	-23, -59, -18, 86, -52, -19, -10, 162, 33, 34,
	10, 12, 11, 35, 37, 36, 51, 49, 50, 52,
	68, 53, 54, 47, 48, 40, 41, 38, 39, 43,
	44, 45, 46, 42, 56, 30, 32, 160, 160, 160,
	158, -10, 85, 31, 73, 74, 73, 75, 74, 17,
	18, 19, 20, 29, 21, 22, 23, 24, 25, 26,
	27, 28, 58, 59, 160, 69, 158, 139, 160, -68,
	-67, -69, -66, -10, 37, 140, -10, -14, -32, 160,
	-31, 69, -14, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -25, 160, -10, -51, 88,
	-65, -38, 86, 151, 152, -10, -10, -10, 69, 153,
	153, -22, -21, -37, -5, -23, 160, 160, -10, -10,
	160, -10, -10, 88, 150, -65, -65, 88, 158, -23,
	-57, 160, -57, 160, 155, 155, -4, -6, 159, -3,
	-10, 103, -61, -63, -10, -10, 162, 162, 162, 162,
	9, 162, 9, 17, 162, 9, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -22, -10, 31, -10, -53, -13, -14, -10,
	-58, -9, 85, -41, 162, 162, 160, -3, 160, 162,
	31, -10, 37, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -11, -10, -29, 85,
	158, -23, -68, 163, 9, 15, -14, 160, -10, -68,
	161, -11, 164, -38, -38, 88, 69, 139, -10, 90,
	-14, 15, -11, -28, -71, -23, 158, 85, -28, -71,
	-23, -64, -57, 153, 69, 158, 139, 153, -50, -70,
	-10, -10, -10, 150, 150, 165, -10, 161, -62, -15,
	-10, 156, -68, 85, -4, 161, 160, 162, 9, 161,
	-17, -18, -10, -19, 31, -10, 161, 9, 111, 9,
	161, 17, 159, -10, -10, -41, -14, 161, 163, 159,
	-57, -10, 161, 17, -69, -10, 37, 140, -68, 161,
	163, 161, -39, 85, 91, 50, 86, 85, 159, 159,
	69, 159, -10, 163, -57, -10, -57, -23, -11, -10,
	-29, -23, 161, 9, 161, 161, 159, 161, 9, -10,
	161, -46, -3, 31, -10, -61, -10, -49, 158, 31,
	-10, 162, -13, -12, -14, 37, 140, 69, -9, -7,
	-3, 31, -10, -43, 161, 161, 75, -3, 31, 159,
	17, -10, -14, 160, 161, 163, 91, -10, 159, 163,
	159, -70, -15, -41, 161, 162, -42, 162, -42, 162,
	161, 15, -14, 160, -68, -41, -72, -8, 123, 124,
	-3, 31, 162, -41, -10, -68, 163, 104, 162, -61,
	159, 114, 115, -42, 113, -42, -44, -3, 31, -12,
	-68, 163, 110, 160, 158, -41, 161, 159, 162, 161,
	-10, 31, 162, 159, 162, 113, -41, 161, 161, 162,
	-54, -5, -41, -45, -3, 31, 31, 162, -41, -41,
	162, 108, -44, 86, 35, 159, -41, -41, -41, 162,
	161, -5, 106, 158, 162, -41, 159,
}
var yyDef = [...]int{

	4, -2, 1, 3, 10, 14, 17, 18, 0, 0,
	0, 0, 214, 214, 214, 0, 179, 0, 29, 0,
	0, 0, 0, 35, 0, 0, 0, 5, 72, 0,
	-2, 213, 0, -2, 230, 216, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 157, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 167, 185, 0,
	170, 0, 223, 208, 228, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 0, 0, 232, 0,
	-2, 0, 0, 192, 7, 0, 0, 0, 0, 0,
	95, 0, 0, 215, 179, 5, 0, 0, 0, 85,
	86, 0, 88, 89, 0, 93, 94, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 119, 0, 214, 0, 0, 250, 0,
	249, 253, 251, 255, 0, 0, 104, -2, 0, 0,
	-2, 250, -2, 138, 139, 140, 141, 0, 158, 159,
	160, 161, 162, 163, 164, 165, 214, 166, 0, 186,
	187, 262, 264, 0, 0, 169, 171, 173, 214, 0,
	0, 188, 181, 182, 180, 237, 0, 0, 277, 278,
	0, 280, 281, 0, 204, 0, 0, 0, 0, 234,
	175, 0, 178, 250, 0, 0, 9, 13, 16, 15,
	0, 0, 0, 96, 98, 0, 23, 24, 25, 26,
	0, 27, 0, 0, 28, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 151, 0, 0, 156, 0, 46, -2, 0,
	0, 12, 0, 0, 37, 38, 0, 73, 0, 76,
	14, 102, 0, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 0, 0, 0, 231, 246,
	0, 248, 0, 191, 250, 0, -2, 250, 0, 0,
	-2, 0, 168, 263, 260, 261, 0, 0, 0, 0,
	217, 0, 0, 0, -2, -2, 0, 2, 0, -2,
	-2, 99, 189, 0, 214, 0, 0, 0, 0, 282,
	284, 0, 0, 203, 206, 205, 0, 78, 0, 80,
	82, 0, 0, 6, 8, 0, 0, 95, 0, 0,
	84, 87, 90, 92, 0, 155, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, -2, 0, 224, 226,
	227, 0, 0, 0, 252, 254, 0, 0, 0, -2,
	191, 184, 0, 271, 272, 0, 274, 266, 267, 268,
	0, 270, 172, 225, 176, 0, 177, 241, 0, 0,
	240, 242, 275, 0, 276, 279, 233, 79, 0, 83,
	190, 19, 68, 14, 0, 0, 97, 22, 63, 63,
	154, 31, 47, 0, -2, 0, 0, 250, 11, 34,
	57, 14, 174, 44, 0, 0, 0, 70, 14, 247,
	0, 101, -2, 250, 259, 265, 273, 0, 244, 238,
	239, 283, 81, 0, 0, 95, 0, 63, 0, 63,
	0, 0, -2, 250, 0, 0, 91, 36, 0, 0,
	71, 14, 77, 74, 100, 0, 0, 0, 20, 0,
	59, 0, 0, 0, 0, 0, 32, 55, 14, 0,
	0, -2, 0, 0, 14, 75, 258, 269, 69, 0,
	0, 14, 14, 60, 61, 0, 0, 0, 51, 58,
	0, 42, 0, 21, 53, 14, 14, 14, 66, 67,
	62, 0, 33, 0, 0, 45, 0, 64, 65, 56,
	0, 43, 0, 14, 54, 0, 41,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:238
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:264
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:273
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:279
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:284
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:290
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:380
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:386
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:388
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:392
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:403
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:404
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:407
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:409
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:411
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:413
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:419
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:421
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:424
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:426
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:428
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:431
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:432
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:433
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:434
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:439
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:441
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:445
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:450
		{
			yyVAL.stmt = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:455
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:460
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:530
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:531
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:547
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:551
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:552
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:553
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:554
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:558
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:560
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:562
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:564
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:571
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:576
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:578
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:584
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:590
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:592
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:597
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:602
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:653
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:654
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:659
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:661
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:665
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:666
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:670
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:671
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:676
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:680
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:681
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:685
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:686
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:815
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:820
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:824
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:828
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:829
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:833
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:834
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:851
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:858
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:860
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:862
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:864
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:865
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:867
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:869
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:871
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:873
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:875
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:877
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:879
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:881
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:883
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:885
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:887
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:890
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:892
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:893
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:910
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:911
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:912
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:913
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:914
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:915
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:916
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:917
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:918
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:919
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:921
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:923
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:925
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:927
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:929
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:931
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:933
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:935
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:937
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:955
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:956
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:957
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:958
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:959
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:960
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:961
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:962
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:963
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:964
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:983
		{
			yyVAL.expr = nil
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1014
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1016
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1020
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1029
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1034
		{
			yyVAL.expr = nil
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1040
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = nil
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1057
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1058
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1059
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1060
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1061
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1062
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1064
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1065
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1066
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1067
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1068
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1069
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1070
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1071
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1072
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1076
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1078
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1080
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1085
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = nil
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1098
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1099
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1100
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1105
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1106
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1111
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1113
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1115
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1117
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1119
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1125
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1127
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1129
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1133
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1134
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1135
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1140
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1142
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1149
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1151
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1153
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1155
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1157
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1163
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1167
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1168
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1169
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1174
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1178
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1179
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1184
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1186
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1191
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1193
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1195
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1197
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1199
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1201
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1206
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1208
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1210
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1212
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1217
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1219
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1221
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1223
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1225
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1227
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1228
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1232
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1233
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1234
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1235
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1240
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1241
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1243
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1245
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1247
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1249
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1251
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1255
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1257
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
