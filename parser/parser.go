//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1248

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 34,
	69, 361,
	139, 361,
	153, 361,
	158, 361,
	-2, 356,
	-1, 39,
	160, 364,
	-2, 373,
	-1, 75,
	69, 363,
	139, 363,
	153, 363,
	158, 363,
	160, 366,
	-2, 351,
	-1, 98,
	153, 324,
	-2, 353,
	-1, 201,
	69, 361,
	139, 361,
	153, 361,
	158, 361,
	-2, 250,
	-1, 204,
	160, 366,
	-2, 363,
	-1, 207,
	69, 361,
	139, 361,
	153, 361,
	158, 361,
	-2, 252,
	-1, 301,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 274,
	-1, 302,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 275,
	-1, 303,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 276,
	-1, 304,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 277,
	-1, 305,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 278,
	-1, 306,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 279,
	-1, 307,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 280,
	-1, 308,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 281,
	-1, 309,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 282,
	-1, 316,
	9, 126,
	161, 126,
	-2, 361,
	-1, 357,
	9, 401,
	161, 401,
	163, 401,
	-2, 361,
	-1, 361,
	69, 362,
	139, 362,
	153, 362,
	158, 362,
	160, 365,
	-2, 284,
	-1, 375,
	160, 387,
	-2, 354,
	-1, 376,
	160, 389,
	-2, 379,
	-1, 455,
	160, 387,
	-2, 355,
	-1, 456,
	160, 389,
	-2, 380,
	-1, 501,
	161, 171,
	-2, 176,
	-1, 507,
	69, 361,
	139, 361,
	153, 361,
	158, 361,
	-2, 235,
	-1, 520,
	160, 365,
	-2, 362,
	-1, 561,
	161, 171,
	-2, 176,
	-1, 566,
	15, 141,
	161, 141,
	-2, 361,
	-1, 576,
	161, 171,
	-2, 176,
	-1, 598,
	9, 400,
	161, 400,
	163, 400,
	-2, 361,
	-1, 619,
	15, 142,
	161, 142,
	-2, 361,
	-1, 658,
	15, 144,
	161, 144,
	-2, 335,
	-1, 722,
	120, 207,
	-2, 204,
}

const yyPrivate = 57344

const yyLast = 5918

var yyAct = [...]int{

	21, 105, 325, 108, 760, 745, 30, 710, 714, 724,
	653, 689, 581, 663, 579, 112, 112, 112, 612, 565,
	126, 269, 121, 582, 475, 319, 577, 349, 161, 264,
	315, 193, 4, 465, 125, 195, 122, 118, 761, 374,
	71, 107, 96, 363, 197, 200, 350, 96, 208, 209,
	210, 211, 212, 102, 658, 213, 214, 215, 216, 217,
	218, 219, 605, 222, 255, 676, 230, 231, 232, 75,
	226, 601, 770, 534, 521, 756, 111, 34, 98, 509,
	243, 244, 354, 246, 247, 762, 202, 202, 96, 741,
	735, 703, 115, 116, 283, 279, 277, 685, 679, 673,
	644, 638, 615, 613, 618, 611, 563, 266, 549, 30,
	271, 272, 544, 496, 253, 204, 204, 121, 736, 351,
	494, 483, 97, 201, 207, 330, 323, 97, 275, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 239, 311, 313, 261, 317,
	274, 273, 321, 692, 257, 227, 684, 366, 97, 683,
	674, 671, 662, 652, 332, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 647, 648, 346,
	112, 348, 628, 197, 600, 660, 677, 551, 202, 328,
	522, 205, 513, 620, 359, 599, 576, 197, 70, 561,
	114, 96, 256, 531, 728, 729, 730, 727, 726, 725,
	501, 482, 112, 672, 353, 769, 119, 204, 755, 369,
	228, 229, 678, 239, 112, 316, 647, 648, 360, 202,
	532, 740, 466, 467, 471, 560, 468, 282, 278, 276,
	617, 358, 329, 327, 472, 258, 245, 476, 242, 197,
	548, 241, 221, 751, 543, 497, 347, 723, 204, 192,
	202, 750, 493, 375, 455, 454, 357, 460, 188, 103,
	104, 646, 489, 488, 126, 240, 159, 158, 157, 110,
	478, 97, 567, 583, 189, 364, 365, 718, 362, 204,
	109, 458, 106, 530, 739, 738, 254, 371, 668, 661,
	373, 160, 114, 492, 480, 486, 487, 667, 490, 364,
	73, 365, 365, 364, 569, 30, 259, 500, 504, 114,
	505, 205, 260, 506, 236, 459, 227, 235, 366, 234,
	114, 96, 227, 588, 101, 664, 367, 462, 114, 503,
	164, 206, 512, 747, 227, 123, 197, 516, 205, 197,
	227, 463, 366, 240, 191, 267, 461, 114, 96, 625,
	626, 101, 559, 533, 202, 227, 36, 252, 536, 602,
	746, 103, 104, 190, 225, 584, 585, 227, 36, 248,
	519, 515, 227, 742, 224, 568, 100, 237, 103, 104,
	352, 228, 229, 204, 584, 585, 469, 228, 229, 103,
	104, 507, 68, 69, 511, 203, 368, 103, 104, 228,
	229, 97, 708, 100, 470, 228, 229, 680, 647, 648,
	650, 647, 648, 716, 693, 526, 103, 104, 123, 535,
	228, 229, 203, 376, 456, 320, 528, 114, 97, 479,
	326, 249, 228, 229, 324, 162, 154, 228, 229, 268,
	233, 112, 540, 170, 172, 171, 168, 169, 140, 166,
	524, 527, 280, 707, 140, 237, 525, 631, 550, 250,
	251, 165, 715, 555, 271, 557, 119, 690, 37, 310,
	541, 637, 562, 728, 729, 730, 727, 726, 725, 574,
	139, 141, 142, 331, 154, 556, 163, 771, 758, 717,
	30, 553, 596, 514, 498, 597, 140, 281, 669, 537,
	167, 629, 570, 484, 355, 564, 265, 572, 721, 5,
	666, 630, 603, 379, 380, 202, 202, 539, 593, 31,
	722, 720, 194, 196, 759, 466, 713, 457, 634, 270,
	476, 474, 578, 117, 120, 318, 609, 32, 202, 8,
	744, 587, 686, 314, 204, 204, 124, 223, 464, 719,
	197, 558, 316, 566, 608, 622, 33, 623, 607, 614,
	586, 9, 589, 552, 696, 694, 575, 204, 616, 2,
	633, 523, 238, 40, 39, 598, 639, 640, 99, 41,
	197, 621, 74, 627, 72, 63, 220, 632, 202, 53,
	52, 35, 271, 30, 580, 502, 624, 571, 262, 6,
	636, 197, 3, 1, 0, 0, 30, 0, 0, 0,
	0, 641, 649, 645, 651, 0, 0, 204, 656, 670,
	586, 0, 0, 30, 665, 619, 0, 654, 675, 0,
	0, 0, 657, 0, 0, 586, 0, 682, 0, 202,
	0, 0, 586, 688, 0, 0, 681, 635, 538, 0,
	0, 352, 542, 0, 30, 691, 0, 0, 701, 702,
	0, 0, 0, 0, 0, 0, 30, 0, 204, 0,
	0, 0, 30, 704, 706, 0, 566, 0, 0, 712,
	731, 732, 733, 711, 697, 30, 30, 0, 586, 0,
	0, 0, 734, 654, 0, 0, 0, 0, 743, 0,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 748, 154, 0, 30, 30, 30, 0, 687,
	752, 753, 0, 0, 0, 140, 0, 0, 695, 757,
	754, 0, 763, 764, 0, 0, 30, 30, 0, 768,
	0, 0, 767, 0, 0, 0, 0, 30, 30, 586,
	0, 776, 778, 774, 775, 777, 0, 130, 132, 131,
	779, 780, 387, 388, 389, 390, 391, 737, 392, 393,
	394, 430, 431, 0, 0, 0, 0, 155, 699, 156,
	128, 129, 133, 135, 134, 147, 148, 145, 146, 153,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 0, 154, 143, 144, 137, 138, 136, 139,
	141, 142, 0, 154, 395, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 396, 397,
	0, 400, 401, 402, 381, 382, 383, 384, 385, 386,
	403, 0, 0, 378, 96, 0, 0, 0, 0, 0,
	450, 451, 452, 446, 447, 449, 448, 453, 398, 399,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	433, 434, 435, 436, 437, 425, 426, 427, 428, 429,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 0, 445, 443, 444, 440, 441, 0, 432, 438,
	439, 79, 80, 81, 82, 83, 0, 0, 0, 700,
	65, 66, 442, 67, 0, 0, 377, 0, 137, 138,
	136, 139, 141, 142, 97, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 48, 0, 0,
	0, 0, 49, 0, 50, 45, 46, 54, 55, 56,
	57, 58, 59, 60, 62, 0, 43, 76, 44, 0,
	0, 0, 0, 18, 68, 69, 0, 0, 0, 19,
	84, 85, 29, 96, 20, 0, 101, 0, 0, 86,
	87, 88, 93, 89, 90, 91, 92, 61, 38, 11,
	10, 0, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 36, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 77, 78,
	79, 80, 81, 82, 83, 0, 0, 42, 100, 65,
	66, 0, 67, 0, 0, 0, 94, 0, 0, 0,
	0, 103, 104, 0, 0, 7, 0, 51, 0, 25,
	0, 64, 95, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 18, 0, 0, 0, 0, 0, 19, 84,
	85, 29, 96, 20, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 38, 11, 10,
	0, 12, 0, 23, 0, 24, 0, 0, 13, 0,
	0, 0, 14, 15, 28, 36, 0, 16, 26, 0,
	0, 27, 0, 0, 17, 0, 22, 77, 78, 79,
	80, 81, 82, 83, 0, 0, 42, 100, 65, 66,
	0, 67, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 0, 7, 773, 51, 0, 25, 0,
	64, 95, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 48, 0, 0, 0, 0,
	49, 0, 50, 45, 46, 54, 55, 56, 57, 58,
	59, 60, 62, 0, 43, 76, 44, 0, 0, 0,
	0, 18, 0, 0, 0, 0, 0, 19, 84, 85,
	29, 96, 20, 0, 101, 0, 0, 86, 87, 88,
	93, 89, 90, 91, 92, 61, 38, 11, 10, 0,
	12, 0, 23, 0, 24, 0, 0, 13, 0, 0,
	0, 14, 15, 28, 36, 0, 16, 26, 0, 0,
	27, 0, 0, 17, 0, 22, 77, 78, 79, 80,
	81, 82, 83, 0, 0, 42, 100, 65, 66, 0,
	67, 0, 0, 0, 94, 0, 0, 0, 0, 103,
	104, 0, 0, 7, 772, 51, 0, 25, 0, 64,
	95, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 48, 0, 0, 0, 0, 49,
	0, 50, 45, 46, 54, 55, 56, 57, 58, 59,
	60, 62, 0, 43, 76, 44, 0, 0, 0, 0,
	18, 0, 0, 0, 0, 0, 19, 84, 85, 29,
	96, 20, 0, 101, 0, 0, 86, 87, 88, 93,
	89, 90, 91, 92, 61, 38, 11, 10, 0, 12,
	0, 23, 0, 24, 0, 0, 13, 0, 0, 0,
	14, 15, 28, 36, 0, 16, 26, 0, 0, 27,
	0, 0, 17, 0, 22, 77, 78, 79, 80, 81,
	82, 83, 0, 0, 42, 100, 65, 66, 0, 67,
	0, 0, 0, 94, 0, 0, 0, 0, 103, 104,
	0, 0, 7, 766, 51, 0, 25, 0, 64, 95,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 48, 0, 0, 0, 0, 49, 0,
	50, 45, 46, 54, 55, 56, 57, 58, 59, 60,
	62, 0, 43, 76, 44, 0, 0, 0, 0, 18,
	0, 0, 0, 0, 0, 19, 84, 85, 29, 96,
	20, 0, 101, 0, 0, 86, 87, 88, 93, 89,
	90, 91, 92, 61, 38, 11, 10, 0, 12, 0,
	23, 0, 24, 0, 0, 13, 0, 0, 0, 14,
	15, 28, 36, 0, 16, 26, 0, 0, 27, 0,
	0, 17, 0, 22, 77, 78, 79, 80, 81, 82,
	83, 0, 0, 42, 100, 65, 66, 0, 67, 0,
	0, 0, 94, 0, 0, 0, 0, 103, 104, 0,
	0, 7, 765, 51, 0, 25, 0, 64, 95, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 48, 0, 0, 0, 0, 49, 0, 50,
	45, 46, 54, 55, 56, 57, 58, 59, 60, 62,
	0, 43, 76, 44, 0, 0, 0, 0, 18, 0,
	0, 0, 0, 0, 19, 84, 85, 29, 96, 20,
	0, 101, 0, 0, 86, 87, 88, 93, 89, 90,
	91, 92, 61, 38, 11, 10, 0, 12, 749, 23,
	0, 24, 0, 0, 13, 0, 0, 0, 14, 15,
	28, 36, 0, 16, 26, 0, 0, 27, 0, 0,
	17, 0, 22, 77, 78, 79, 80, 81, 82, 83,
	0, 0, 42, 100, 65, 66, 0, 67, 0, 0,
	0, 94, 0, 0, 0, 0, 103, 104, 0, 0,
	7, 0, 51, 0, 25, 0, 64, 95, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 48, 0, 0, 0, 0, 49, 0, 50, 45,
	46, 54, 55, 56, 57, 58, 59, 60, 62, 0,
	43, 76, 44, 0, 0, 0, 0, 18, 0, 0,
	0, 0, 0, 19, 84, 85, 29, 96, 20, 0,
	101, 0, 0, 86, 87, 88, 93, 89, 90, 91,
	92, 61, 38, 11, 10, 0, 12, 0, 23, 0,
	24, 0, 0, 13, 0, 0, 0, 14, 15, 28,
	36, 0, 16, 26, 0, 0, 27, 0, 0, 17,
	0, 22, 77, 78, 0, 79, 80, 81, 82, 83,
	0, 42, 100, 0, 65, 66, 0, 67, 0, 0,
	94, 0, 0, 0, 0, 103, 104, 0, 0, 7,
	709, 51, 655, 25, 0, 64, 95, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 48, 0, 0, 0, 0, 49, 0, 50, 45,
	46, 54, 55, 56, 57, 58, 59, 60, 62, 0,
	43, 76, 44, 0, 0, 0, 0, 18, 0, 0,
	0, 0, 0, 19, 84, 85, 29, 96, 20, 0,
	101, 0, 0, 86, 87, 88, 93, 89, 90, 91,
	92, 61, 38, 11, 10, 0, 12, 0, 23, 0,
	24, 0, 0, 13, 0, 0, 0, 14, 15, 28,
	36, 0, 16, 26, 0, 0, 27, 0, 0, 17,
	0, 22, 77, 78, 79, 80, 81, 82, 83, 0,
	0, 42, 100, 65, 66, 0, 67, 0, 0, 0,
	94, 0, 0, 0, 0, 103, 104, 0, 0, 7,
	0, 51, 0, 25, 0, 64, 95, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	48, 0, 0, 0, 0, 49, 0, 50, 45, 46,
	54, 55, 56, 57, 58, 59, 60, 62, 0, 43,
	76, 44, 0, 0, 0, 0, 18, 0, 0, 0,
	0, 0, 19, 84, 85, 29, 96, 20, 0, 101,
	0, 0, 86, 87, 88, 93, 89, 90, 91, 92,
	61, 38, 11, 10, 0, 12, 0, 23, 705, 24,
	0, 0, 13, 0, 0, 0, 14, 15, 28, 36,
	0, 16, 26, 0, 0, 27, 0, 0, 17, 0,
	22, 77, 78, 0, 79, 80, 81, 82, 83, 0,
	42, 100, 0, 65, 66, 0, 67, 0, 0, 94,
	0, 0, 0, 0, 103, 104, 0, 0, 7, 0,
	51, 698, 25, 0, 64, 95, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	48, 0, 0, 0, 0, 49, 0, 50, 45, 46,
	54, 55, 56, 57, 58, 59, 60, 62, 0, 43,
	76, 44, 0, 0, 0, 0, 18, 0, 0, 0,
	0, 0, 19, 84, 85, 29, 96, 20, 0, 101,
	0, 0, 86, 87, 88, 93, 89, 90, 91, 92,
	61, 38, 11, 10, 0, 12, 0, 23, 0, 24,
	0, 0, 13, 0, 0, 0, 14, 15, 28, 36,
	0, 16, 26, 0, 0, 27, 0, 0, 17, 0,
	22, 77, 78, 79, 80, 81, 82, 83, 0, 0,
	42, 100, 65, 66, 0, 67, 0, 0, 0, 94,
	0, 0, 0, 0, 103, 104, 0, 0, 7, 0,
	51, 0, 25, 0, 64, 95, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 48,
	0, 0, 0, 0, 49, 0, 50, 45, 46, 54,
	55, 56, 57, 58, 59, 60, 62, 0, 43, 76,
	44, 0, 0, 0, 0, 18, 0, 0, 0, 0,
	0, 19, 84, 85, 29, 96, 20, 0, 101, 0,
	0, 86, 87, 88, 93, 89, 90, 91, 92, 61,
	38, 11, 10, 0, 12, 0, 23, 0, 24, 659,
	0, 13, 0, 0, 0, 14, 15, 28, 36, 0,
	16, 26, 0, 0, 27, 0, 0, 17, 0, 22,
	77, 78, 79, 80, 81, 82, 83, 0, 0, 42,
	100, 65, 66, 0, 67, 0, 0, 0, 94, 0,
	0, 0, 0, 103, 104, 0, 0, 7, 0, 51,
	0, 25, 0, 64, 95, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 48, 0,
	0, 0, 0, 49, 0, 50, 45, 46, 54, 55,
	56, 57, 58, 59, 60, 62, 0, 43, 76, 44,
	0, 0, 0, 0, 18, 0, 0, 0, 0, 0,
	19, 84, 85, 29, 96, 20, 0, 101, 0, 0,
	86, 87, 88, 93, 89, 90, 91, 92, 61, 38,
	11, 10, 643, 12, 0, 23, 0, 24, 0, 0,
	13, 0, 0, 0, 14, 15, 28, 36, 0, 16,
	26, 0, 0, 27, 0, 0, 17, 0, 22, 77,
	78, 0, 79, 80, 81, 82, 83, 0, 42, 100,
	0, 65, 66, 0, 67, 0, 0, 94, 0, 0,
	0, 0, 103, 104, 0, 0, 7, 0, 51, 594,
	25, 0, 64, 95, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 48, 0,
	0, 0, 0, 49, 0, 50, 45, 46, 54, 55,
	56, 57, 58, 59, 60, 62, 0, 43, 76, 44,
	0, 0, 0, 0, 18, 0, 0, 0, 0, 0,
	19, 84, 85, 29, 96, 20, 0, 101, 0, 0,
	86, 87, 88, 93, 89, 90, 91, 92, 61, 38,
	11, 10, 0, 12, 0, 23, 0, 24, 0, 0,
	13, 0, 0, 0, 14, 15, 28, 36, 0, 16,
	26, 0, 0, 27, 0, 0, 17, 0, 22, 77,
	78, 79, 80, 81, 82, 83, 0, 0, 42, 100,
	65, 66, 0, 67, 0, 0, 0, 94, 0, 0,
	0, 0, 103, 104, 0, 0, 7, 0, 51, 0,
	25, 0, 64, 95, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 48, 0, 0,
	0, 0, 49, 0, 50, 45, 46, 54, 55, 56,
	57, 58, 59, 60, 62, 0, 43, 76, 44, 0,
	0, 0, 592, 18, 0, 0, 0, 0, 0, 19,
	84, 85, 29, 96, 20, 0, 101, 0, 0, 86,
	87, 88, 93, 89, 90, 91, 92, 61, 38, 11,
	10, 0, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 36, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 77, 78,
	0, 79, 80, 81, 82, 83, 0, 42, 100, 0,
	65, 66, 0, 67, 0, 0, 94, 0, 0, 0,
	0, 103, 104, 0, 0, 7, 0, 51, 573, 25,
	0, 64, 95, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 48, 0, 0,
	0, 0, 49, 0, 50, 45, 46, 54, 55, 56,
	57, 58, 59, 60, 62, 0, 43, 76, 44, 0,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 19,
	84, 85, 29, 96, 20, 0, 101, 0, 0, 86,
	87, 88, 93, 89, 90, 91, 92, 61, 38, 11,
	10, 0, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 36, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 77, 78,
	0, 79, 80, 81, 82, 83, 0, 42, 100, 0,
	65, 66, 0, 67, 0, 0, 94, 0, 0, 0,
	0, 103, 104, 0, 0, 7, 0, 51, 554, 25,
	0, 64, 95, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 48, 0, 0,
	0, 0, 49, 0, 50, 45, 46, 54, 55, 56,
	57, 58, 59, 60, 62, 0, 43, 76, 44, 0,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 19,
	84, 85, 29, 96, 20, 0, 101, 0, 0, 86,
	87, 88, 93, 89, 90, 91, 92, 61, 38, 11,
	10, 0, 12, 0, 23, 0, 24, 0, 0, 13,
	0, 0, 0, 14, 15, 28, 36, 0, 16, 26,
	0, 0, 27, 0, 0, 17, 0, 22, 77, 78,
	79, 80, 81, 82, 83, 0, 0, 42, 100, 65,
	66, 0, 67, 0, 0, 0, 94, 0, 0, 0,
	0, 103, 104, 0, 0, 7, 0, 51, 0, 25,
	0, 64, 95, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 18, 0, 0, 0, 0, 0, 19, 84,
	85, 29, 96, 20, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 38, 11, 10,
	0, 12, 0, 23, 0, 24, 0, 0, 13, 0,
	0, 0, 14, 15, 28, 36, 0, 16, 26, 0,
	0, 27, 0, 0, 17, 0, 22, 77, 78, 79,
	80, 81, 82, 83, 0, 0, 42, 100, 65, 66,
	0, 67, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 0, 7, 499, 51, 0, 25, 0,
	64, 95, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 48, 0, 0, 0, 0,
	49, 0, 50, 45, 46, 54, 55, 56, 57, 58,
	59, 60, 62, 0, 43, 76, 44, 0, 0, 0,
	0, 18, 0, 0, 0, 0, 0, 19, 84, 85,
	29, 96, 20, 0, 101, 0, 0, 86, 87, 88,
	93, 89, 90, 91, 92, 61, 38, 11, 10, 0,
	12, 0, 23, 0, 24, 0, 0, 13, 0, 0,
	0, 14, 15, 28, 36, 0, 16, 26, 0, 0,
	27, 0, 0, 17, 0, 22, 77, 78, 79, 80,
	81, 82, 83, 0, 0, 42, 100, 65, 66, 0,
	67, 0, 0, 0, 94, 0, 0, 0, 0, 103,
	104, 0, 0, 7, 263, 51, 0, 25, 0, 64,
	95, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 48, 0, 0, 0, 0, 49,
	0, 50, 45, 46, 54, 55, 56, 57, 58, 59,
	60, 62, 0, 43, 76, 44, 0, 0, 0, 0,
	18, 0, 0, 0, 0, 0, 19, 84, 85, 29,
	96, 20, 0, 101, 0, 0, 86, 87, 88, 93,
	89, 90, 91, 92, 61, 38, 11, 10, 0, 12,
	0, 23, 0, 24, 0, 0, 13, 0, 0, 0,
	14, 15, 28, 36, 0, 16, 26, 0, 0, 27,
	0, 0, 17, 0, 22, 77, 78, 0, 0, 0,
	0, 0, 0, 0, 42, 100, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 103, 104,
	0, 0, 7, 0, 51, 131, 25, 0, 64, 95,
	97, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	430, 431, 0, 155, 0, 156, 128, 129, 133, 135,
	134, 147, 148, 145, 146, 153, 149, 150, 151, 152,
	143, 144, 137, 138, 136, 139, 141, 142, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 397, 0,
	400, 401, 402, 381, 382, 383, 384, 385, 386, 403,
	0, 0, 378, 0, 0, 0, 0, 0, 0, 450,
	451, 452, 446, 447, 449, 448, 453, 398, 399, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 433,
	434, 435, 436, 437, 425, 426, 427, 428, 429, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	0, 445, 443, 444, 440, 441, 0, 432, 438, 439,
	79, 80, 81, 82, 83, 0, 0, 0, 0, 65,
	66, 442, 67, 0, 155, 0, 156, 128, 129, 133,
	135, 134, 147, 148, 145, 146, 153, 149, 150, 151,
	152, 143, 144, 137, 138, 136, 139, 141, 142, 0,
	154, 0, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 140, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 173, 174, 175,
	176, 178, 179, 180, 181, 182, 183, 184, 185, 177,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 42, 100, 186, 187,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 477, 198, 0, 0, 51, 473, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 199, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 0, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 42, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 477, 517, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 518, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 0, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 370, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 42, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 333, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 42, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 312, 0, 0,
	103, 104, 0, 0, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 0, 0, 77, 78, 65,
	66, 0, 67, 0, 0, 0, 42, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	103, 104, 0, 0, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 47, 48, 0, 0, 0,
	0, 49, 0, 50, 45, 46, 54, 55, 56, 57,
	58, 59, 60, 62, 0, 43, 76, 44, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 84,
	85, 114, 96, 0, 0, 101, 0, 0, 86, 87,
	88, 93, 89, 90, 91, 92, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 0, 0, 0, 0, 0, 42, 100, 0, 0,
	0, 0, 0, 0, 0, 94, 130, 132, 131, 0,
	103, 104, 0, 0, 0, 0, 51, 0, 0, 0,
	64, 95, 97, 0, 0, 0, 155, 0, 156, 128,
	129, 133, 135, 134, 147, 148, 145, 146, 153, 149,
	150, 151, 152, 143, 144, 137, 138, 136, 139, 141,
	142, 0, 154, 130, 132, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 156, 128, 129, 133, 135,
	134, 147, 148, 145, 146, 153, 149, 150, 151, 152,
	143, 144, 137, 138, 136, 139, 141, 142, 0, 154,
	130, 132, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 156, 128, 129, 133, 135, 134, 147, 148,
	145, 146, 153, 149, 150, 151, 152, 143, 144, 137,
	138, 136, 139, 141, 142, 0, 154, 0, 130, 132,
	131, 0, 0, 0, 0, 0, 0, 0, 140, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	156, 128, 129, 133, 135, 134, 147, 148, 145, 146,
	153, 149, 150, 151, 152, 143, 144, 137, 138, 136,
	139, 141, 142, 0, 154, 130, 132, 131, 0, 0,
	0, 0, 0, 0, 0, 322, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 156, 128, 129,
	133, 135, 134, 147, 148, 145, 146, 153, 149, 150,
	151, 152, 143, 144, 137, 138, 136, 139, 141, 142,
	0, 154, 130, 132, 131, 0, 0, 0, 0, 0,
	0, 0, 127, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 156, 128, 129, 133, 135, 134,
	147, 148, 145, 146, 153, 149, 150, 151, 152, 143,
	144, 137, 138, 136, 139, 141, 142, 0, 154, 130,
	132, 131, 0, 0, 0, 0, 0, 0, 0, 610,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 156, 128, 129, 133, 135, 134, 147, 148, 145,
	146, 153, 149, 150, 151, 152, 143, 144, 137, 138,
	136, 139, 141, 142, 0, 154, 130, 132, 131, 0,
	0, 0, 0, 0, 0, 0, 591, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 156, 128,
	129, 133, 135, 134, 147, 148, 145, 146, 153, 149,
	150, 151, 152, 143, 144, 137, 138, 136, 139, 141,
	142, 0, 154, 130, 132, 131, 0, 0, 0, 0,
	0, 0, 0, 590, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 156, 128, 129, 133, 135,
	134, 147, 148, 145, 146, 153, 149, 150, 151, 152,
	143, 144, 137, 138, 136, 139, 141, 142, 0, 154,
	130, 132, 131, 0, 0, 0, 0, 0, 0, 0,
	546, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 156, 128, 129, 133, 135, 134, 147, 148,
	145, 146, 153, 149, 150, 151, 152, 143, 144, 137,
	138, 136, 139, 141, 142, 0, 154, 130, 132, 131,
	0, 0, 0, 0, 0, 0, 0, 545, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 156,
	128, 129, 133, 135, 134, 147, 148, 145, 146, 153,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 0, 154, 130, 132, 131, 0, 0, 0,
	0, 0, 0, 0, 520, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 156, 128, 129, 133,
	135, 134, 147, 148, 145, 146, 153, 149, 150, 151,
	152, 143, 144, 137, 138, 136, 139, 141, 142, 0,
	154, 130, 132, 131, 0, 0, 0, 0, 0, 0,
	0, 508, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 156, 128, 129, 133, 135, 134, 147,
	148, 145, 146, 153, 149, 150, 151, 152, 143, 144,
	137, 138, 136, 139, 141, 142, 0, 154, 130, 132,
	131, 0, 0, 0, 0, 0, 0, 0, 485, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	156, 128, 129, 133, 135, 134, 147, 148, 145, 146,
	153, 149, 150, 151, 152, 143, 144, 137, 138, 136,
	139, 141, 142, 0, 154, 130, 132, 131, 0, 0,
	0, 0, 0, 0, 0, 481, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 156, 128, 129,
	133, 135, 134, 147, 148, 145, 146, 153, 149, 150,
	151, 152, 143, 144, 137, 138, 136, 139, 141, 142,
	0, 154, 130, 132, 131, 0, 0, 0, 0, 0,
	0, 0, 361, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 156, 128, 129, 133, 135, 134,
	147, 148, 145, 146, 153, 149, 150, 151, 152, 143,
	144, 137, 138, 136, 139, 141, 142, 0, 154, 130,
	132, 131, 0, 0, 0, 0, 0, 606, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 156, 128, 129, 133, 135, 134, 147, 148, 145,
	146, 153, 149, 150, 151, 152, 143, 144, 137, 138,
	136, 139, 141, 142, 0, 154, 130, 132, 131, 0,
	0, 0, 0, 0, 604, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 156, 128,
	129, 133, 135, 134, 147, 148, 145, 146, 153, 149,
	150, 151, 152, 143, 144, 137, 138, 136, 139, 141,
	142, 0, 154, 130, 132, 131, 0, 0, 0, 0,
	0, 595, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 156, 128, 129, 133, 135,
	134, 147, 148, 145, 146, 153, 149, 150, 151, 152,
	143, 144, 137, 138, 136, 139, 141, 142, 0, 154,
	130, 132, 131, 0, 0, 0, 0, 0, 547, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 156, 128, 129, 133, 135, 134, 147, 148,
	145, 146, 153, 149, 150, 151, 152, 143, 144, 137,
	138, 136, 139, 141, 142, 0, 154, 130, 132, 131,
	0, 0, 0, 0, 0, 529, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 491, 156,
	128, 129, 133, 135, 134, 147, 148, 145, 146, 153,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 0, 154, 130, 132, 131, 0, 0, 356,
	0, 495, 510, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 156, 128, 129, 133,
	135, 134, 147, 148, 145, 146, 153, 149, 150, 151,
	152, 143, 144, 137, 138, 136, 139, 141, 142, 0,
	154, 130, 132, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 156, 128, 129, 133, 135, 134, 147,
	148, 145, 146, 153, 149, 150, 151, 152, 143, 144,
	137, 138, 136, 139, 141, 142, 0, 154, 132, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 156,
	128, 129, 133, 135, 134, 147, 148, 145, 146, 153,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 372, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 155, 0, 156,
	128, 129, 133, 135, 134, 147, 148, 145, 146, 153,
	149, 150, 151, 152, 143, 144, 137, 138, 136, 139,
	141, 142, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 156, 128, 129, 133,
	135, 134, 147, 148, 145, 146, 153, 149, 150, 151,
	152, 143, 144, 137, 138, 136, 139, 141, 142, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 129, 133, 135, 134, 147, 148, 145,
	146, 153, 149, 150, 151, 152, 143, 144, 137, 138,
	136, 139, 141, 142, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 133, 135,
	134, 147, 148, 145, 146, 153, 149, 150, 151, 152,
	143, 144, 137, 138, 136, 139, 141, 142, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 135, 134, 147, 148, 145, 146, 153, 149,
	150, 151, 152, 143, 144, 137, 138, 136, 139, 141,
	142, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 134, 147, 148, 145, 146,
	153, 149, 150, 151, 152, 143, 144, 137, 138, 136,
	139, 141, 142, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 147, 148, 145,
	146, 153, 149, 150, 151, 152, 143, 144, 137, 138,
	136, 139, 141, 142, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140,
}
var yyPact = [...]int{

	-1000, -1000, 917, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	142, 3244, 140, 129, 4386, 4386, 4386, 2, 269, 4386,
	-1000, 4620, 128, 127, 126, -1000, 153, 4386, 370, 475,
	444, 335, 393, 390, 3630, -1000, -1000, -1000, 118, -1000,
	-1000, 225, 109, 3666, 4386, 282, 282, 4386, 4386, 4386,
	4386, 4386, -1000, -1000, 4386, 4386, 4386, 4386, 4386, 4386,
	4386, 102, 4386, -1000, 306, 4386, 4386, 4386, -1000, -1000,
	-1000, 391, -1000, 186, 184, -1000, 125, 101, 98, 4386,
	4386, 96, 4386, 4386, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 301, 289, -1000, -44, 52, 52,
	95, -1000, 171, 177, 362, 3115, 4386, 262, 444, 4386,
	4386, -1, 5561, 257, -1000, -2, -34, 87, -1000, -1000,
	86, 444, -1000, 500, 85, -1000, 5561, -1000, 4386, 4386,
	4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386,
	4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386, 4386,
	4386, 4386, 4386, 4386, 125, 4266, 4386, 282, 4386, 360,
	-1000, 4573, -36, -1000, 369, -1000, 365, -1000, 93, 3244,
	92, -37, 472, 4146, 4386, 4386, 4386, 4386, 4386, 4386,
	4386, 4386, 4386, 4386, 4386, 4386, -1000, -1000, 4386, 4386,
	4386, -39, 3666, -81, 515, -1000, -1000, 5514, 282, 91,
	-1000, -1000, 391, 4386, -1000, -1000, 3666, -1000, 406, 406,
	400, 406, 5091, 406, 406, 406, 406, 406, 406, 406,
	-1000, 4386, 406, -121, 268, 250, -1000, 277, 4026, 282,
	3534, 5647, 3534, 4386, 778, 778, 52, 182, 208, -1000,
	-1000, 4386, 4386, 5561, 5561, 4386, 5561, 5561, 256, -1000,
	274, 79, 268, 4386, -1000, -1000, 3546, -1000, 3666, 364,
	362, 171, -1000, -1000, -1000, -1000, 5044, 61, -1000, -41,
	514, 5561, 4997, -1000, -1000, -1000, -1000, 2, -1000, 352,
	-1000, 4386, -1000, 4386, 5719, 5753, 5607, 3534, 3393, 5786,
	5849, 5818, 448, 448, 448, 400, 406, 400, 400, 889,
	889, 677, 677, 677, 677, 777, 777, 777, 777, 677,
	-1000, 5467, 4386, 5684, 111, -1000, -1000, 5420, 104, -1000,
	497, 2986, -1000, -1000, -1000, 60, 212, 4386, -1000, 4386,
	-1000, -1000, 3534, 282, 3534, 3534, 3534, 3534, 3534, 3534,
	3534, 3534, 3534, 3534, 3534, 3534, 4950, -84, 5373, 52,
	-1000, 4386, -1000, 41, 496, 3666, 3906, -1000, 3666, 4903,
	-89, -1000, 39, -1000, -1000, -1000, -1000, 385, 361, 5326,
	144, 81, 4386, -90, 52, -1000, -1000, 4386, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 52, -1000, -1000, -1000, -1000, 2,
	4386, 4386, -39, 2, 103, -1000, 5561, 4856, 4809, -1000,
	-1000, -1000, 5279, -1000, 99, -1000, 5561, 4386, 36, -1000,
	171, 2857, 4386, 4386, 4386, 214, -1000, -1000, 49, 5561,
	-1000, 4386, 5684, -56, 282, 255, 360, 2727, 4386, -1000,
	46, 263, 205, 227, 4762, 4715, 2597, -1000, 2468, -1000,
	-1000, -1000, 5232, 495, 4386, -1000, 5561, 282, 45, 33,
	-1000, -1000, -1000, -92, -1000, -1000, 288, -1000, -1000, -1000,
	-1000, 4386, -1000, 3534, -1000, -1000, 5185, -1000, -1000, -101,
	5138, -1000, -1000, -1000, 4386, -1000, -1000, -1000, -1000, 3786,
	5561, -1000, -1000, -1000, -1000, 4668, -57, 5561, -1000, -59,
	-60, 263, 5684, -1000, -1000, 89, -1000, 282, 43, 3666,
	-1000, -1000, -1000, -1000, 5561, 246, 263, 31, 512, -1000,
	440, -1000, -1000, 244, -1000, -1000, -1000, -1000, 227, -1000,
	3244, 460, -61, -1000, -1000, -1000, 4386, 3534, -1000, 3666,
	495, -1000, -1000, 4526, -1000, -1000, -1000, -1000, -1000, 2338,
	-62, 4386, 122, -1000, 317, -1000, 12, 1821, 255, -1000,
	3666, -109, 2209, -1000, -1000, 35, 151, 11, 219, 263,
	161, -1000, -1000, 150, 509, -1000, -1000, -1000, -1000, 3244,
	3534, 10, 64, -63, -1000, 9, -1000, 4386, 34, 73,
	-64, 314, 219, -1000, -1000, -1000, 8, 5, -1000, -65,
	227, -1000, 456, 456, 3, -1000, 348, -1000, -1000, 227,
	3244, 495, -1000, -1000, 2080, 767, -1000, -1000, -1000, -1000,
	-71, 456, 1950, 1821, -1000, -1000, 387, -1000, 1691, -1000,
	263, -1000, 396, 492, 138, -1000, -1000, -1000, -1000, -1000,
	-1000, 3244, 3244, -1000, -1000, -72, -1000, -43, 227, -1000,
	147, -1000, 146, 80, -1000, -1000, 307, 4386, -1000, -1000,
	294, 233, 417, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1562, 3244, 3244, 113, -1000, 105, -1000, -1000, -1000,
	-1000, 396, -1000, 5561, 66, -1000, 491, 3407, -1000, -77,
	-1000, -1000, 1433, 1304, -1000, -1000, 294, -1000, 4386, 63,
	-1000, 490, -1000, 1175, 1046, -1000, -1000, -1000, 5561, -1000,
	3407, 4386, -1000, -1000, -1000, -1000, -1000, -1000, 5561, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 623, 622, 29, 526, 53, 78, 619, 618, 617,
	616, 25, 0, 76, 19, 30, 77, 615, 14, 614,
	24, 611, 37, 36, 5, 34, 610, 320, 334, 208,
	609, 606, 605, 8, 604, 39, 27, 602, 69, 40,
	599, 598, 594, 593, 592, 70, 591, 589, 1, 18,
	586, 585, 10, 584, 583, 581, 576, 571, 569, 568,
	567, 566, 563, 562, 26, 561, 560, 559, 557, 64,
	4, 555, 554, 553, 21, 552, 551, 549, 548, 547,
	13, 546, 384, 544, 543, 542, 31, 35, 541, 540,
	539, 33, 23, 11, 12, 9, 488, 38, 3, 534,
	533, 350, 531, 530, 528, 2, 7,
}
var yyR1 = [...]int{

	0, 1, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 100,
	100, 100, 100, 100, 100, 100, 97, 97, 47, 47,
	5, 5, 6, 6, 6, 2, 2, 2, 71, 71,
	48, 48, 8, 8, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 50, 50,
	63, 63, 10, 10, 62, 62, 15, 4, 102, 102,
	103, 103, 7, 90, 90, 96, 96, 17, 17, 65,
	65, 14, 14, 14, 14, 53, 53, 52, 52, 9,
	9, 57, 57, 57, 57, 49, 49, 49, 49, 49,
	54, 54, 68, 68, 67, 67, 56, 56, 55, 55,
	64, 64, 75, 75, 18, 18, 19, 19, 94, 94,
	92, 92, 92, 93, 93, 69, 69, 76, 76, 20,
	20, 73, 73, 22, 72, 72, 23, 23, 51, 51,
	58, 58, 78, 78, 88, 88, 104, 104, 89, 89,
	95, 95, 95, 95, 95, 95, 66, 66, 24, 24,
	83, 83, 70, 11, 61, 61, 25, 74, 74, 77,
	77, 26, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 98, 105,
	106, 101, 101, 80, 80, 81, 81, 33, 33, 34,
	34, 34, 34, 27, 27, 28, 28, 31, 31, 60,
	60, 60, 79, 79, 38, 38, 38, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 39, 39, 39, 12, 12, 13, 13,
	37, 40, 40, 40, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 16, 16, 16, 29, 29, 29, 43,
	43, 44, 44, 44, 44, 44, 44, 35, 35, 35,
	36, 36, 36, 86, 87, 87, 85, 85, 84, 84,
	84, 84, 84, 84, 82, 82, 82, 82, 45, 45,
	45, 45, 45, 45, 45, 46, 46, 46, 46, 30,
	30, 30, 30, 30, 30, 30, 59, 59, 91,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 3, 1,
	2, 0, 1, 1, 3, 1, 1, 5, 7, 9,
	5, 3, 3, 3, 3, 3, 3, 1, 2, 5,
	7, 9, 5, 1, 6, 3, 3, 2, 0, 9,
	1, 3, 0, 4, 1, 3, 1, 13, 0, 1,
	0, 1, 9, 1, 2, 1, 1, 0, 2, 0,
	2, 1, 2, 4, 3, 1, 4, 1, 4, 1,
	4, 3, 4, 4, 5, 0, 5, 5, 4, 4,
	1, 4, 5, 6, 1, 3, 6, 7, 3, 6,
	1, 0, 1, 3, 4, 6, 0, 1, 1, 2,
	1, 1, 1, 0, 2, 2, 3, 1, 3, 1,
	2, 3, 1, 1, 3, 1, 1, 3, 2, 0,
	3, 4, 1, 3, 1, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 4,
	3, 1, 4, 4, 3, 1, 1, 0, 1, 3,
	1, 3, 6, 5, 3, 4, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 3, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	3, 2, 1, 2, 4, 2, 13, 14, 1, 0,
	0, 0, 1, 0, 4, 3, 1, 1, 2, 2,
	4, 4, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 0, 1, 4, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	3, 1, 1, 1, 3, 3, 1, 1, 0, 1,
	1, 1, 3, 1, 1, 3, 1, 1, 4, 4,
	4, 4, 1, 1, 1, 3, 1, 4, 2, 3,
	3, 1, 4, 4, 3, 3, 3, 1, 3, 1,
	1, 3, 1, 1, 0, 1, 3, 1, 3, 1,
	4, 2, 6, 4, 2, 2, 1, 2, 1, 4,
	3, 3, 3, 6, 3, 1, 1, 2, 1, 4,
	4, 2, 2, 4, 2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -47, -2, -3, -4, -7, 158, -67, -55,
	103, 102, 105, 112, 116, 117, 121, 128, 76, 82,
	87, -12, 130, 107, 109, 162, 122, 125, 118, 85,
	-98, -90, -68, -56, -16, -21, 119, -96, 101, -42,
	-43, -40, 140, 69, 71, 58, 59, 49, 50, 55,
	57, 160, -26, -30, 60, 61, 62, 63, 64, 65,
	66, 100, 67, -32, 164, 13, 14, 16, 77, 78,
	-29, -39, -34, -27, -37, -38, 70, 131, 132, 4,
	5, 6, 7, 8, 83, 84, 92, 93, 94, 96,
	97, 98, 99, 95, 149, 165, 86, 166, -6, -41,
	141, 89, -5, 154, 155, -48, 160, -3, -98, 160,
	160, -13, -12, 76, 85, -13, -13, -73, -22, -29,
	-72, -98, -23, 86, -61, -25, -12, 162, 33, 34,
	10, 12, 11, 35, 37, 36, 51, 49, 50, 52,
	68, 53, 54, 47, 48, 40, 41, 38, 39, 43,
	44, 45, 46, 42, 56, 30, 32, 160, 160, 160,
	158, -12, 85, 31, -101, 37, 134, -96, 73, 74,
	73, 75, 74, 17, 18, 19, 20, 29, 21, 22,
	23, 24, 25, 26, 27, 28, 58, 59, 160, 69,
	158, 139, 160, -86, -85, -87, -84, -12, 37, 140,
	-12, -16, -39, 160, -38, 76, 69, -16, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-31, 160, -12, -60, 88, -82, -45, 86, 151, 152,
	-12, -12, -12, 69, 153, 153, -28, -27, -44, -6,
	-29, 160, 160, -12, -12, 160, -12, -12, 88, 150,
	-82, -82, 88, 158, -29, -69, 160, -69, 160, 155,
	155, -5, -8, 159, -3, -4, -12, 103, -101, -74,
	-77, -12, -12, 162, 162, 162, 162, 9, 162, 9,
	-101, 17, 162, 9, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-28, -12, 31, -12, -62, -15, -16, -12, -71, -11,
	85, -48, 162, 162, 85, -105, 85, 160, -3, 160,
	162, 31, -12, 37, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -13, -12, -36,
	85, 158, -29, -86, 163, 9, 15, -16, 160, -12,
	-86, 161, -13, 164, -45, -45, 88, 69, 139, -12,
	90, -16, 15, -13, -35, -97, -29, 158, 85, -100,
	-99, 76, 77, 78, 79, 80, 81, 4, 5, 6,
	7, 8, 10, 11, 12, 56, 70, 71, 100, 101,
	73, 74, 75, 82, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 117, 118, 119, 120, 121,
	13, 14, 140, 112, 113, 114, 115, 116, 141, 142,
	137, 138, 154, 135, 136, 134, 95, 96, 98, 97,
	92, 93, 94, 99, -35, -97, -29, -79, -69, 153,
	69, 158, 139, 153, -59, -91, -12, -12, -12, 150,
	150, 165, -12, 161, -76, -20, -12, 156, -86, 85,
	-5, 161, 160, 162, 9, 161, -22, -23, -105, -12,
	-25, 31, -12, 161, 9, 111, 9, 161, 17, 159,
	-105, 160, -17, 137, -12, -12, -48, -16, 161, 163,
	159, -69, -12, 161, 17, -87, -12, 37, 140, -86,
	161, 163, 161, -46, 85, 91, 50, 86, 85, 159,
	159, 69, 159, -12, 163, -69, -12, -69, -29, -13,
	-12, -36, -29, 161, 9, 161, 161, 159, 161, 9,
	-12, 161, -54, -3, 31, -12, -74, -12, -57, 158,
	31, 160, -12, 162, -15, -14, -16, 37, 140, 69,
	-11, -9, -3, 31, -12, -50, 160, -64, -75, -18,
	-19, -94, -92, 30, 141, 142, -6, -65, 138, -6,
	161, 161, 75, -3, 31, 159, 17, -12, -16, 160,
	161, 163, 91, -12, 159, 163, 159, -91, -20, -48,
	161, 162, -49, 162, -49, 162, -64, 161, 15, -16,
	160, -86, -48, -105, -10, 123, 124, -64, 161, 9,
	-102, 37, -92, -105, -78, -6, -3, 31, 162, -48,
	-12, -86, 163, 104, 162, -74, 159, 114, 115, -49,
	113, -49, 161, -52, -3, 31, -14, -86, 163, 110,
	160, 158, 161, -80, 126, -18, -103, 156, 158, 9,
	-48, 161, 159, 162, 161, -12, 31, 162, 159, 162,
	113, -80, -48, 161, 161, 162, -63, -6, -48, -93,
	31, -93, 160, 86, -51, -6, -53, -3, 31, 31,
	162, -48, -48, 162, -93, 108, -52, 86, 35, 159,
	-106, -94, -106, -81, -33, 86, 37, 17, 159, -58,
	-88, -104, -89, 129, -95, 81, 80, 79, 76, 77,
	78, -48, -48, -48, -106, 162, 161, -6, 158, 158,
	161, 9, 86, -12, -66, -24, 86, 120, -95, 106,
	158, 158, -48, -48, -33, 162, 9, -105, 17, -83,
	-70, -97, 162, -48, -48, 159, 159, -24, -12, 162,
	9, 17, 159, 159, -106, -106, -105, -70, -12, -106,
	-105,
}
var yyDef = [...]int{

	79, -2, 1, 78, 85, 86, 87, 91, 95, 96,
	0, 0, 0, 0, 358, 358, 358, 0, 323, 0,
	107, 0, 0, 0, 0, 113, 0, 0, 0, 80,
	311, 0, 164, 0, -2, 357, 308, 133, 0, -2,
	374, 360, 0, 394, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 0, 0, 0, 0, 0, 0,
	0, 327, 0, 299, 329, 0, 302, 0, 135, 136,
	367, 352, 372, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 0, 0, 376, 0, -2, 0,
	0, 336, 82, 0, 0, 0, 0, 0, 311, 227,
	0, 0, 359, 323, 80, 0, 0, 0, 192, 193,
	0, 311, 195, 196, 0, 225, 226, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 117, 309, 312, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 251, 0, 358,
	0, 0, 394, 0, 393, 397, 395, 399, 0, 0,
	236, -2, 0, 0, -2, 323, 394, -2, 270, 271,
	272, 273, 0, 290, 291, 292, 293, 294, 295, 296,
	297, 358, 298, 0, 330, 331, 406, 408, 0, 0,
	301, 303, 305, 358, 0, 0, 332, 325, 326, 324,
	381, 0, 0, 421, 422, 0, 424, 425, 0, 348,
	0, 0, 0, 0, 378, 319, 0, 322, 394, 0,
	0, 84, 90, 94, 92, 93, 0, 0, 309, 0,
	228, 230, 0, 101, 102, 103, 104, 0, 105, 0,
	309, 0, 106, 0, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	283, 0, 0, 288, 0, 124, -2, 0, 0, 89,
	0, 0, 115, 116, 309, 0, 137, 0, 165, 0,
	168, 91, 234, 0, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 0, 0, 0, 375,
	390, 0, 392, 0, 335, 394, 0, -2, 394, 0,
	0, -2, 0, 300, 407, 404, 405, 0, 0, 0,
	0, 361, 0, 0, 0, -2, -2, 0, 76, 77,
	69, 70, 71, 72, 73, 74, 75, 2, 3, 4,
	5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 0, -2, -2, 231, 333, 0,
	358, 0, 0, 0, 0, 426, 428, 0, 0, 347,
	350, 349, 0, 185, 0, 187, 189, 0, 0, 81,
	83, 0, 0, 227, 0, 0, 191, 194, 0, 197,
	224, 0, 287, 0, 0, 0, 0, 0, 0, 118,
	0, -2, 139, 0, 0, 0, 0, -2, 0, 368,
	370, 371, 0, 0, 0, 396, 398, 0, 0, 0,
	-2, 335, 328, 0, 415, 416, 0, 418, 410, 411,
	412, 0, 414, 304, 369, 320, 0, 321, 385, 0,
	0, 384, 386, 419, 0, 420, 423, 377, 186, 0,
	190, 334, 97, 160, 91, 0, 0, 229, 100, 155,
	155, -2, 286, 109, 125, 0, -2, 0, 0, 394,
	88, 112, 149, 91, 309, 122, -2, 0, 170, 172,
	128, 177, 178, 0, 180, 181, 182, 309, 0, 138,
	0, 0, 0, 162, 91, 391, 0, 233, -2, 394,
	403, 409, 417, 0, 388, 382, 383, 427, 188, 0,
	0, 227, 0, 155, 0, 155, 0, 0, 0, -2,
	394, 0, 0, 223, 114, 0, 0, 0, 313, 176,
	130, 129, 179, 0, 140, 202, 163, 91, 169, 166,
	232, 0, 0, 0, 98, 0, 151, 0, 0, 0,
	0, 0, 313, 110, 147, 91, 0, 0, -2, 0,
	0, 91, 183, 183, 0, 173, 0, 131, 199, 0,
	167, 402, 413, 161, 0, 0, 91, 91, 152, 153,
	0, 183, 0, 0, 143, 150, 0, 120, 0, 310,
	0, 310, 0, 174, 206, 203, 99, 145, 91, 91,
	91, 158, 159, 154, 310, 0, 111, 0, 0, 123,
	0, 184, 0, 0, 316, 317, 0, 0, 132, 198,
	0, 0, -2, 205, 208, 210, 211, 212, 213, 214,
	215, 0, 156, 157, 0, 148, 0, 121, 91, 91,
	314, 0, 318, 175, 0, 217, 309, 0, 209, 0,
	91, 91, 0, 0, 315, 200, 0, 218, 0, 0,
	221, 0, 146, 0, 0, 310, 310, 216, 309, 201,
	0, 0, 310, 119, 127, 306, 219, 220, 309, 307,
	222,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:263
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:264
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:268
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:269
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:376
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:383
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:399
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:401
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:403
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 99:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:407
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:409
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:411
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:413
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:424
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:428
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:437
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:441
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.stmt = nil
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 127:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:462
		{
			yyVAL.stmt = ast.NewFunctionStatement(yyDollar[1].tok, yyDollar[2].num, yyDollar[3].tok, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:466
		{
			yyVAL.num = 0
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:467
		{
			yyVAL.num = 1
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:471
		{
			yyVAL.num = 0
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:472
		{
			yyVAL.num = 1
		}
	case 132:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:477
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement(yyDollar[1].exprs, yyDollar[2].tok, yyDollar[3].tok, yyDollar[4].expr, yyDollar[5].exprs, yyDollar[8].stmts)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:484
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:485
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:489
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:490
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:508
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:509
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:520
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:521
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:525
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:526
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:527
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:528
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:533
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:538
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:543
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:547
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:548
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:549
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:550
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:554
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:556
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:558
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:560
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:562
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:567
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:572
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:574
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:580
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:586
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:588
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:593
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:598
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:605
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:606
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:611
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:613
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:618
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:620
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:624
		{
			yyVAL.expr = nil
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:625
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:630
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:634
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:635
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:636
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:640
		{
			yyVAL.expr = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:641
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:645
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:646
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:651
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:653
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:657
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:658
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:662
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:663
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:668
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:672
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:673
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:677
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:678
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:683
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmt)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:685
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:690
		{
			yyVAL.stmt = ast.NewClassStatement(yyDollar[1].exprs, yyDollar[2].exprs)
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:692
		{
			yyVAL.stmt = ast.NewClassStatement(append(yyDollar[1].exprs, ast.NewConstantEncapsedStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal)), yyDollar[3].exprs)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:702
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:703
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:759
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:760
		{
			yyVAL.exprs = []ast.Expression{ast.NewVarLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:764
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:766
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:770
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:772
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:776
		{
			yyVAL.expr = ast.NewPublicLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:777
		{
			yyVAL.expr = ast.NewProtectedLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:778
		{
			yyVAL.expr = ast.NewPrivateLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:779
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:780
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:781
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:785
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:786
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:791
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:793
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:797
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:798
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:802
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:806
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:810
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:811
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:815
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:820
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:824
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:825
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:842
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:849
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:851
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:853
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:855
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:856
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:858
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:860
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:862
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:864
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:866
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:868
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:870
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:872
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:874
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:876
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:878
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:880
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:881
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:882
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:883
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:884
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:886
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:888
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:890
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:892
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:894
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:896
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:898
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:910
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:912
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:914
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:916
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:918
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:920
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:922
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:924
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:926
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:928
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:930
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:931
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:932
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:934
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:936
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:938
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:942
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:955
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 306:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:958
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts, false)
		}
	case 307:
		yyDollar = yyS[yypt-14 : yypt+1]
		//line parser.go.y:961
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[2].tok, yyDollar[3].num, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[9].expr, yyDollar[12].stmts, true)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:965
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:969
		{
			yyVAL.expr = nil
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:973
		{
			yyVAL.expr = nil
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:977
		{
			yyVAL.num = 0
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:978
		{
			yyVAL.num = 1
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:982
		{
			yyVAL.expr = nil
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:983
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:987
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:988
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:992
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:993
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:998
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1000
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1002
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1004
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1008
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1014
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.expr = nil
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1019
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1026
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1030
		{
			yyVAL.expr = nil
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1031
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1036
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1037
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1043
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1044
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1045
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1048
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1049
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1050
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1055
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1056
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1060
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1062
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1064
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1069
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1073
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1074
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1078
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1082
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1083
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1088
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1095
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1097
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1099
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1101
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1103
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1111
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1113
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1117
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1118
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1119
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1124
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1126
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1131
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1133
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1135
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1137
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1139
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1141
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1146
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1151
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1152
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1153
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1158
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1163
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1168
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1170
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1175
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1177
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1179
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1181
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1183
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1185
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1190
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1192
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1194
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1196
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1201
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1203
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1205
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1207
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1209
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1211
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1212
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1216
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1217
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1218
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1219
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1224
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1225
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1227
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1229
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1231
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1233
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1235
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1239
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1241
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1245
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
