// Code generated by goyacc -o parser.go -v parser.output parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/hatajoe/go-php-parser/ast"
	"github.com/hatajoe/go-php-parser/lexer"
	"github.com/hatajoe/go-php-parser/token"
	"log"
)

//line parser.go.y:13
type yySymType struct {
	yys     int
	program *ast.Program
	stmts   []ast.Statement
	stmt    ast.Statement
	exprs   []ast.Expression
	expr    ast.Expression
	num     int
	tok     *token.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_ECHO = 57405
const T_LNUMBER = 57406
const T_DNUMBER = 57407
const T_STRING = 57408
const T_VARIABLE = 57409
const T_INLINE_HTML = 57410
const T_ENCAPSED_AND_WHITESPACE = 57411
const T_CONSTANT_ENCAPSED_STRING = 57412
const T_STRING_VARNAME = 57413
const T_NUM_STRING = 57414
const T_LINE = 57415
const T_FILE = 57416
const T_DIR = 57417
const T_CLASS_C = 57418
const T_TRAIT_C = 57419
const T_METHOD_C = 57420
const T_FUNC_C = 57421
const T_NS_C = 57422
const T_EXIT = 57423
const T_IF = 57424
const T_DO = 57425
const T_WHILE = 57426
const T_ENDWHILE = 57427
const T_FOR = 57428
const T_ENDFOR = 57429
const T_FOREACH = 57430
const T_ENDFOREACH = 57431
const T_DECLARE = 57432
const T_ENDDECLARE = 57433
const T_AS = 57434
const T_SWITCH = 57435
const T_ENDSWITCH = 57436
const T_CASE = 57437
const T_DEFAULT = 57438
const T_BREAK = 57439
const T_CONTINUE = 57440
const T_GOTO = 57441
const T_FUNCTION = 57442
const T_CONST = 57443
const T_RETURN = 57444
const T_TRY = 57445
const T_CATCH = 57446
const T_FINALLY = 57447
const T_THROW = 57448
const T_USE = 57449
const T_INSTEADOF = 57450
const T_GLOBAL = 57451
const T_VAR = 57452
const T_UNSET = 57453
const T_ISSET = 57454
const T_EMPTY = 57455
const T_HALT_COMPILER = 57456
const T_CLASS = 57457
const T_TRAIT = 57458
const T_INTERFACE = 57459
const T_EXTENDS = 57460
const T_IMPLEMENTS = 57461
const T_OBJECT_OPERATOR = 57462
const T_LIST = 57463
const T_ARRAY = 57464
const T_CALLABLE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_SEPARATOR = 57478
const T_ELLIPSIS = 57479
const T_ERROR = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_ECHO",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_VARIABLE",
	"T_INLINE_HTML",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_STRING_VARNAME",
	"T_NUM_STRING",
	"T_LINE",
	"T_FILE",
	"T_DIR",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_NS_C",
	"T_EXIT",
	"T_IF",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_ERROR",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"']'",
	"'`'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1247

type LexerWrapper struct {
	l         *lexer.Lexer
	recentLit string
	recentPos token.Position
	program   *ast.Program
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok := l.l.Scan()
	if tok.Type == token.EOF {
		return 0
	}
	lval.tok = tok
	l.recentLit = tok.Literal
	l.recentPos = tok.Position
	return int(tok.Type)
}

func (l *LexerWrapper) Error(e string) {
	log.Fatalf("Line %d, Column %d: %q %s", l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
}

func Parse(l *lexer.Lexer) *ast.Program {
	w := LexerWrapper{l: l}
	if yyParse(&w) != 0 {
		panic("Parse error")
	}
	return w.program
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	69, 365,
	139, 365,
	153, 365,
	158, 365,
	-2, 360,
	-1, 42,
	160, 368,
	-2, 377,
	-1, 78,
	69, 367,
	139, 367,
	153, 367,
	158, 367,
	160, 370,
	-2, 355,
	-1, 101,
	153, 328,
	-2, 357,
	-1, 206,
	69, 365,
	139, 365,
	153, 365,
	158, 365,
	-2, 254,
	-1, 209,
	160, 370,
	-2, 367,
	-1, 212,
	69, 365,
	139, 365,
	153, 365,
	158, 365,
	-2, 256,
	-1, 307,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 278,
	-1, 308,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 279,
	-1, 309,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 280,
	-1, 310,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 281,
	-1, 311,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 282,
	-1, 312,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 283,
	-1, 313,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 284,
	-1, 314,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 285,
	-1, 315,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 286,
	-1, 322,
	9, 128,
	161, 128,
	-2, 365,
	-1, 366,
	9, 405,
	161, 405,
	163, 405,
	-2, 365,
	-1, 370,
	69, 366,
	139, 366,
	153, 366,
	158, 366,
	160, 369,
	-2, 288,
	-1, 384,
	160, 391,
	-2, 358,
	-1, 385,
	160, 393,
	-2, 383,
	-1, 464,
	160, 391,
	-2, 359,
	-1, 465,
	160, 393,
	-2, 384,
	-1, 510,
	161, 175,
	-2, 180,
	-1, 519,
	69, 365,
	139, 365,
	153, 365,
	158, 365,
	-2, 239,
	-1, 532,
	160, 369,
	-2, 366,
	-1, 573,
	161, 175,
	-2, 180,
	-1, 578,
	15, 145,
	161, 145,
	-2, 365,
	-1, 588,
	161, 175,
	-2, 180,
	-1, 612,
	9, 404,
	161, 404,
	163, 404,
	-2, 365,
	-1, 633,
	15, 146,
	161, 146,
	-2, 365,
	-1, 654,
	120, 211,
	-2, 208,
	-1, 685,
	15, 148,
	161, 148,
	-2, 339,
}

const yyPrivate = 57344

const yyLast = 6115

var yyAct = [...]int{

	22, 108, 331, 111, 750, 754, 31, 699, 734, 680,
	101, 690, 593, 722, 603, 577, 115, 115, 115, 656,
	591, 129, 626, 124, 594, 512, 484, 269, 474, 164,
	4, 321, 275, 198, 589, 325, 333, 358, 200, 128,
	110, 125, 121, 99, 383, 74, 735, 202, 205, 78,
	105, 213, 214, 215, 216, 217, 37, 372, 218, 219,
	220, 221, 222, 223, 224, 685, 227, 260, 619, 235,
	236, 237, 762, 730, 709, 114, 615, 546, 533, 521,
	363, 787, 289, 248, 249, 285, 251, 252, 359, 99,
	244, 99, 118, 119, 207, 207, 768, 283, 209, 209,
	774, 743, 718, 712, 706, 206, 212, 671, 665, 632,
	272, 629, 31, 277, 278, 258, 627, 231, 625, 769,
	124, 210, 575, 100, 660, 661, 662, 659, 658, 657,
	117, 99, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 266, 317,
	319, 360, 323, 492, 232, 327, 375, 717, 244, 100,
	262, 100, 561, 339, 329, 335, 556, 655, 281, 341,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 280, 279, 355, 115, 357, 716, 202, 106,
	107, 505, 337, 707, 503, 710, 207, 758, 704, 368,
	209, 100, 202, 689, 73, 679, 642, 322, 660, 661,
	662, 659, 658, 657, 705, 761, 729, 115, 614, 233,
	234, 362, 563, 122, 378, 288, 674, 675, 284, 115,
	534, 525, 725, 480, 687, 369, 634, 475, 476, 207,
	282, 477, 773, 209, 572, 631, 613, 588, 211, 481,
	366, 573, 485, 261, 202, 210, 674, 675, 469, 543,
	356, 655, 510, 579, 117, 99, 491, 367, 104, 338,
	207, 711, 76, 336, 209, 463, 384, 464, 498, 497,
	129, 380, 263, 250, 245, 247, 246, 487, 226, 197,
	194, 728, 371, 595, 193, 581, 162, 161, 160, 467,
	113, 673, 210, 112, 382, 259, 489, 109, 544, 501,
	782, 117, 99, 781, 560, 104, 495, 496, 555, 499,
	103, 31, 772, 509, 771, 695, 688, 516, 471, 517,
	648, 515, 518, 106, 107, 514, 163, 373, 374, 208,
	117, 264, 472, 506, 241, 100, 502, 470, 117, 542,
	117, 524, 242, 694, 265, 202, 528, 232, 202, 511,
	196, 373, 245, 374, 374, 373, 580, 103, 232, 468,
	375, 571, 545, 232, 513, 253, 240, 548, 207, 195,
	106, 107, 209, 239, 334, 232, 208, 375, 232, 519,
	257, 531, 100, 527, 376, 660, 661, 662, 659, 658,
	657, 361, 232, 691, 596, 597, 596, 597, 167, 106,
	107, 39, 71, 72, 639, 640, 523, 106, 107, 106,
	107, 478, 233, 234, 232, 701, 229, 273, 616, 126,
	242, 230, 479, 233, 234, 748, 756, 254, 233, 234,
	538, 547, 775, 326, 385, 465, 700, 726, 655, 126,
	233, 234, 540, 233, 234, 713, 674, 675, 117, 488,
	115, 552, 39, 332, 377, 330, 172, 233, 234, 169,
	677, 674, 675, 171, 165, 536, 539, 562, 650, 173,
	174, 537, 567, 277, 569, 755, 747, 238, 122, 233,
	234, 574, 660, 661, 662, 659, 658, 657, 586, 553,
	143, 157, 316, 645, 168, 600, 723, 664, 565, 40,
	340, 598, 31, 143, 602, 568, 166, 611, 763, 757,
	274, 549, 610, 732, 584, 576, 526, 599, 507, 255,
	256, 582, 287, 286, 617, 551, 649, 643, 607, 207,
	207, 493, 170, 209, 209, 364, 271, 475, 653, 6,
	322, 578, 485, 175, 177, 176, 270, 693, 623, 5,
	644, 388, 389, 32, 654, 207, 142, 144, 145, 209,
	157, 652, 202, 199, 598, 621, 612, 636, 622, 637,
	201, 733, 143, 753, 466, 628, 601, 276, 483, 598,
	590, 120, 647, 123, 324, 35, 598, 9, 630, 698,
	666, 667, 719, 320, 202, 635, 127, 228, 473, 651,
	646, 570, 36, 641, 10, 207, 277, 31, 564, 209,
	736, 587, 663, 2, 535, 202, 633, 243, 43, 42,
	31, 102, 44, 77, 75, 66, 225, 668, 683, 56,
	676, 55, 678, 38, 598, 592, 638, 583, 672, 681,
	697, 267, 7, 696, 692, 3, 703, 1, 684, 0,
	31, 0, 0, 0, 702, 708, 0, 0, 207, 0,
	0, 0, 209, 550, 715, 0, 361, 554, 0, 578,
	721, 714, 0, 0, 0, 0, 0, 0, 720, 0,
	0, 0, 0, 731, 724, 0, 0, 31, 0, 0,
	727, 741, 742, 140, 141, 139, 142, 144, 145, 31,
	157, 0, 0, 0, 0, 31, 746, 0, 744, 752,
	0, 0, 143, 760, 598, 737, 751, 0, 759, 0,
	764, 765, 766, 0, 681, 31, 31, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 776, 770,
	0, 0, 0, 777, 779, 0, 0, 0, 31, 31,
	31, 778, 0, 783, 784, 0, 0, 0, 0, 0,
	785, 0, 786, 788, 789, 0, 0, 31, 31, 133,
	135, 134, 31, 31, 0, 794, 795, 796, 396, 397,
	398, 399, 400, 0, 401, 402, 403, 439, 440, 158,
	0, 159, 131, 132, 136, 138, 137, 150, 151, 148,
	149, 156, 152, 153, 154, 155, 146, 147, 140, 141,
	139, 142, 144, 145, 0, 157, 146, 147, 140, 141,
	139, 142, 144, 145, 0, 157, 0, 143, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 405, 406, 0, 409, 410, 411,
	390, 391, 392, 393, 394, 395, 412, 0, 0, 387,
	99, 0, 0, 0, 0, 0, 459, 460, 461, 455,
	456, 458, 457, 462, 407, 408, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 442, 443, 444, 445,
	446, 434, 435, 436, 437, 438, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 0, 454, 452,
	453, 449, 450, 0, 441, 447, 448, 82, 83, 84,
	85, 86, 669, 0, 0, 0, 68, 69, 451, 70,
	0, 0, 386, 0, 0, 0, 0, 0, 0, 0,
	100, 152, 153, 154, 155, 146, 147, 140, 141, 139,
	142, 144, 145, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 50, 51, 0, 0, 143, 0, 52, 0,
	53, 48, 49, 57, 58, 59, 60, 61, 62, 63,
	65, 0, 46, 79, 47, 0, 0, 0, 0, 19,
	71, 72, 0, 0, 0, 20, 87, 88, 30, 99,
	21, 0, 104, 0, 0, 89, 90, 91, 96, 92,
	93, 94, 95, 64, 41, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 39, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 80, 81, 0, 33, 82, 83,
	84, 85, 86, 45, 103, 0, 0, 68, 69, 0,
	70, 0, 97, 0, 0, 0, 0, 106, 107, 0,
	0, 8, 793, 54, 0, 26, 0, 67, 98, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 51, 0, 0, 0, 0, 52,
	0, 53, 48, 49, 57, 58, 59, 60, 61, 62,
	63, 65, 0, 46, 79, 47, 0, 0, 0, 0,
	19, 71, 72, 0, 0, 0, 20, 87, 88, 30,
	99, 21, 0, 104, 0, 0, 89, 90, 91, 96,
	92, 93, 94, 95, 64, 41, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 39, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 80, 81, 0, 33, 82,
	83, 84, 85, 86, 45, 103, 0, 0, 68, 69,
	0, 70, 0, 97, 0, 0, 0, 0, 106, 107,
	0, 0, 8, 792, 54, 0, 26, 0, 67, 98,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 51, 0, 0, 0, 0,
	52, 0, 53, 48, 49, 57, 58, 59, 60, 61,
	62, 63, 65, 0, 46, 79, 47, 0, 0, 0,
	0, 19, 71, 72, 0, 0, 0, 20, 87, 88,
	30, 99, 21, 0, 104, 0, 0, 89, 90, 91,
	96, 92, 93, 94, 95, 64, 41, 12, 11, 0,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 39, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 80, 81, 0, 33,
	82, 83, 84, 85, 86, 45, 103, 0, 0, 68,
	69, 0, 70, 0, 97, 0, 0, 0, 0, 106,
	107, 0, 0, 8, 791, 54, 0, 26, 0, 67,
	98, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 51, 0, 0, 0,
	0, 52, 0, 53, 48, 49, 57, 58, 59, 60,
	61, 62, 63, 65, 0, 46, 79, 47, 0, 0,
	0, 0, 19, 71, 72, 0, 0, 0, 20, 87,
	88, 30, 99, 21, 0, 104, 0, 0, 89, 90,
	91, 96, 92, 93, 94, 95, 64, 41, 12, 11,
	0, 13, 0, 24, 0, 25, 0, 0, 14, 0,
	0, 0, 15, 16, 29, 39, 0, 17, 27, 0,
	0, 28, 0, 0, 18, 0, 23, 80, 81, 0,
	33, 82, 83, 84, 85, 86, 45, 103, 0, 0,
	68, 69, 0, 70, 0, 97, 0, 0, 0, 0,
	106, 107, 0, 0, 8, 790, 54, 0, 26, 0,
	67, 98, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 51, 0, 0,
	0, 0, 52, 0, 53, 48, 49, 57, 58, 59,
	60, 61, 62, 63, 65, 0, 46, 79, 47, 0,
	0, 0, 0, 19, 71, 72, 0, 0, 0, 20,
	87, 88, 30, 99, 21, 0, 104, 0, 0, 89,
	90, 91, 96, 92, 93, 94, 95, 64, 41, 12,
	11, 0, 13, 780, 24, 0, 25, 0, 0, 14,
	0, 0, 0, 15, 16, 29, 39, 0, 17, 27,
	0, 0, 28, 0, 0, 18, 0, 23, 80, 81,
	0, 33, 82, 83, 84, 85, 86, 45, 103, 0,
	0, 68, 69, 0, 70, 0, 97, 0, 0, 0,
	0, 106, 107, 0, 0, 8, 0, 54, 0, 26,
	0, 67, 98, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 51, 0,
	0, 0, 0, 52, 0, 53, 48, 49, 57, 58,
	59, 60, 61, 62, 63, 65, 0, 46, 79, 47,
	0, 0, 0, 0, 19, 71, 72, 0, 0, 0,
	20, 87, 88, 30, 99, 21, 0, 104, 0, 0,
	89, 90, 91, 96, 92, 93, 94, 95, 64, 41,
	12, 11, 0, 13, 0, 24, 0, 25, 0, 0,
	14, 0, 0, 0, 15, 16, 29, 39, 0, 17,
	27, 0, 0, 28, 0, 0, 18, 0, 23, 80,
	81, 0, 33, 82, 83, 84, 85, 86, 45, 103,
	0, 0, 68, 69, 0, 70, 0, 97, 0, 0,
	0, 0, 106, 107, 0, 0, 8, 749, 54, 0,
	26, 0, 67, 98, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 51,
	0, 0, 0, 0, 52, 0, 53, 48, 49, 57,
	58, 59, 60, 61, 62, 63, 65, 0, 46, 79,
	47, 0, 0, 0, 0, 19, 71, 72, 0, 0,
	0, 20, 87, 88, 30, 99, 21, 0, 104, 0,
	0, 89, 90, 91, 96, 92, 93, 94, 95, 64,
	41, 12, 11, 0, 13, 0, 24, 745, 25, 0,
	0, 14, 0, 0, 0, 15, 16, 29, 39, 0,
	17, 27, 0, 0, 28, 0, 0, 18, 0, 23,
	80, 81, 0, 33, 82, 83, 84, 85, 86, 45,
	103, 0, 0, 68, 69, 0, 70, 0, 97, 0,
	0, 0, 0, 106, 107, 0, 0, 8, 0, 54,
	0, 26, 0, 67, 98, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	51, 0, 0, 0, 0, 52, 0, 53, 48, 49,
	57, 58, 59, 60, 61, 62, 63, 65, 0, 46,
	79, 47, 0, 0, 0, 0, 19, 71, 72, 0,
	0, 0, 20, 87, 88, 30, 99, 21, 0, 104,
	0, 0, 89, 90, 91, 96, 92, 93, 94, 95,
	64, 41, 12, 11, 0, 13, 0, 24, 0, 25,
	686, 0, 14, 0, 0, 0, 15, 16, 29, 39,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 80, 81, 0, 33, 82, 83, 84, 85, 86,
	45, 103, 0, 0, 68, 69, 0, 70, 0, 97,
	0, 0, 0, 0, 106, 107, 0, 0, 8, 0,
	54, 0, 26, 0, 67, 98, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 0, 0, 0, 19, 71, 72,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 670, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 0, 33, 82, 83, 84, 85,
	86, 45, 103, 0, 0, 68, 69, 0, 70, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 0, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 606, 19, 71,
	72, 0, 0, 0, 20, 87, 88, 30, 99, 21,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 41, 12, 11, 0, 13, 0, 24,
	0, 25, 0, 0, 14, 0, 0, 0, 15, 16,
	29, 39, 0, 17, 27, 0, 0, 28, 0, 0,
	18, 0, 23, 80, 81, 0, 33, 82, 83, 84,
	85, 86, 45, 103, 0, 0, 68, 69, 0, 70,
	0, 97, 0, 0, 0, 0, 106, 107, 0, 0,
	8, 0, 54, 0, 26, 0, 67, 98, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 51, 0, 0, 0, 0, 52, 0,
	53, 48, 49, 57, 58, 59, 60, 61, 62, 63,
	65, 0, 46, 79, 47, 0, 0, 0, 0, 19,
	71, 72, 0, 0, 0, 20, 87, 88, 30, 99,
	21, 0, 104, 0, 0, 89, 90, 91, 96, 92,
	93, 94, 95, 64, 41, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 39, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 80, 81, 0, 33, 82, 83,
	84, 85, 86, 45, 103, 0, 0, 68, 69, 0,
	70, 0, 97, 0, 0, 0, 0, 106, 107, 0,
	0, 8, 508, 54, 0, 26, 0, 67, 98, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 51, 0, 0, 0, 0, 52,
	0, 53, 48, 49, 57, 58, 59, 60, 61, 62,
	63, 65, 0, 46, 79, 47, 0, 0, 0, 0,
	19, 71, 72, 0, 0, 0, 20, 87, 88, 30,
	99, 21, 0, 104, 0, 0, 89, 90, 91, 96,
	92, 93, 94, 95, 64, 41, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 39, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 80, 81, 0, 33, 82,
	83, 84, 85, 86, 45, 103, 0, 0, 68, 69,
	0, 70, 0, 97, 0, 0, 0, 0, 106, 107,
	0, 0, 8, 268, 54, 0, 26, 0, 67, 98,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 51, 0, 0, 0, 0,
	52, 0, 53, 48, 49, 57, 58, 59, 60, 61,
	62, 63, 65, 0, 46, 79, 47, 0, 0, 0,
	0, 19, 71, 72, 0, 0, 0, 20, 87, 88,
	30, 99, 21, 0, 104, 0, 0, 89, 90, 91,
	96, 92, 93, 94, 95, 64, 41, 12, 11, 0,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 39, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 80, 81, 0, 33,
	34, 0, 0, 0, 0, 45, 103, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 106,
	107, 0, 0, 8, 0, 54, 0, 26, 134, 67,
	98, 100, 82, 83, 84, 85, 86, 0, 0, 0,
	0, 68, 69, 0, 70, 0, 158, 0, 159, 131,
	132, 136, 138, 137, 150, 151, 148, 149, 156, 152,
	153, 154, 155, 146, 147, 140, 141, 139, 142, 144,
	145, 0, 157, 0, 0, 0, 0, 50, 51, 0,
	0, 0, 0, 52, 143, 53, 48, 49, 57, 58,
	59, 60, 61, 62, 63, 65, 0, 46, 79, 47,
	0, 0, 0, 0, 19, 71, 72, 0, 0, 0,
	20, 87, 88, 30, 99, 21, 0, 104, 0, 0,
	89, 90, 91, 96, 92, 93, 94, 95, 64, 41,
	12, 11, 0, 13, 0, 24, 0, 25, 0, 0,
	14, 0, 0, 0, 15, 16, 29, 39, 0, 17,
	27, 0, 0, 28, 0, 0, 18, 0, 23, 80,
	81, 0, 33, 0, 0, 0, 0, 0, 45, 103,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 106, 107, 0, 0, 8, 0, 54, 0,
	26, 0, 67, 98, 100, 82, 83, 84, 85, 86,
	0, 0, 0, 0, 68, 69, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 682, 178, 179, 180, 181, 183, 184, 185,
	186, 187, 188, 189, 190, 182, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 191, 192, 0, 19, 0, 0,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 0, 82, 83, 84, 85, 86,
	0, 45, 103, 0, 68, 69, 0, 70, 0, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 738, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 0, 82, 83, 84, 85, 86,
	0, 45, 103, 0, 68, 69, 0, 70, 0, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 608, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 0, 82, 83, 84, 85, 86,
	0, 45, 103, 0, 68, 69, 0, 70, 0, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 585, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 0, 82, 83, 84, 85, 86,
	0, 45, 103, 0, 68, 69, 0, 70, 0, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 566, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 0, 0, 0, 52, 0, 53, 48,
	49, 57, 58, 59, 60, 61, 62, 63, 65, 0,
	46, 79, 47, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 20, 87, 88, 30, 99, 21, 0,
	104, 0, 0, 89, 90, 91, 96, 92, 93, 94,
	95, 64, 41, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	39, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 80, 81, 82, 83, 84, 85, 86, 0,
	0, 45, 103, 68, 69, 0, 70, 0, 0, 0,
	97, 0, 0, 0, 0, 106, 107, 0, 0, 8,
	0, 54, 0, 26, 0, 67, 98, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	51, 0, 0, 0, 0, 52, 0, 53, 48, 49,
	57, 58, 59, 60, 61, 62, 63, 65, 0, 46,
	79, 47, 0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 20, 87, 88, 30, 99, 21, 0, 104,
	0, 0, 89, 90, 91, 96, 92, 93, 94, 95,
	64, 41, 12, 11, 0, 13, 0, 24, 0, 25,
	0, 0, 14, 0, 0, 0, 15, 16, 29, 39,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 80, 81, 0, 0, 0, 0, 0, 0, 0,
	45, 103, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 106, 107, 0, 0, 8, 0,
	54, 0, 26, 381, 67, 98, 100, 396, 397, 398,
	399, 400, 0, 401, 402, 403, 439, 440, 158, 0,
	159, 131, 132, 136, 138, 137, 150, 151, 148, 149,
	156, 152, 153, 154, 155, 146, 147, 140, 141, 139,
	142, 144, 145, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 405, 406, 0, 409, 410, 411, 390,
	391, 392, 393, 394, 395, 412, 0, 0, 387, 0,
	0, 0, 0, 0, 0, 459, 460, 461, 455, 456,
	458, 457, 462, 407, 408, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 422, 442, 443, 444, 445, 446,
	434, 435, 436, 437, 438, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 0, 454, 452, 453,
	449, 450, 0, 441, 447, 448, 82, 83, 84, 85,
	86, 0, 0, 0, 0, 68, 69, 451, 70, 0,
	158, 0, 159, 131, 132, 136, 138, 137, 150, 151,
	148, 149, 156, 152, 153, 154, 155, 146, 147, 140,
	141, 139, 142, 144, 145, 0, 157, 0, 0, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 143, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 486, 203,
	0, 0, 54, 482, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 204, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 0, 0,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 486, 529,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 530, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 0, 0,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 379, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 0, 342,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 318, 0, 0, 106, 107, 0, 0,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 0, 0, 80, 81, 68, 69, 0, 70, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 106, 107, 0, 0,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 50, 51, 0, 0, 0, 0, 52, 0, 53,
	48, 49, 57, 58, 59, 60, 61, 62, 63, 65,
	0, 46, 79, 47, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 87, 88, 117, 99, 0,
	0, 104, 0, 0, 89, 90, 91, 96, 92, 93,
	94, 95, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 81, 0, 0, 0, 0, 0,
	0, 0, 45, 103, 0, 0, 0, 0, 0, 0,
	0, 97, 133, 135, 134, 0, 106, 107, 0, 0,
	0, 0, 54, 0, 0, 0, 67, 98, 100, 0,
	0, 0, 158, 739, 159, 131, 132, 136, 138, 137,
	150, 151, 148, 149, 156, 152, 153, 154, 155, 146,
	147, 140, 141, 139, 142, 144, 145, 0, 157, 133,
	135, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 159, 131, 132, 136, 138, 137, 150, 151, 148,
	149, 156, 152, 153, 154, 155, 146, 147, 140, 141,
	139, 142, 144, 145, 0, 157, 0, 133, 135, 134,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 159,
	131, 132, 136, 138, 137, 150, 151, 148, 149, 156,
	152, 153, 154, 155, 146, 147, 140, 141, 139, 142,
	144, 145, 0, 157, 133, 135, 134, 0, 0, 0,
	0, 0, 0, 0, 740, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 159, 131, 132, 136,
	138, 137, 150, 151, 148, 149, 156, 152, 153, 154,
	155, 146, 147, 140, 141, 139, 142, 144, 145, 0,
	157, 0, 133, 135, 134, 0, 0, 0, 0, 0,
	0, 328, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 159, 131, 132, 136, 138, 137,
	150, 151, 148, 149, 156, 152, 153, 154, 155, 146,
	147, 140, 141, 139, 142, 144, 145, 0, 157, 133,
	135, 134, 0, 0, 0, 0, 0, 0, 0, 130,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 159, 131, 132, 136, 138, 137, 150, 151, 148,
	149, 156, 152, 153, 154, 155, 146, 147, 140, 141,
	139, 142, 144, 145, 0, 157, 133, 135, 134, 0,
	0, 0, 0, 0, 0, 624, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 159, 131,
	132, 136, 138, 137, 150, 151, 148, 149, 156, 152,
	153, 154, 155, 146, 147, 140, 141, 139, 142, 144,
	145, 0, 157, 133, 135, 134, 0, 0, 0, 0,
	0, 0, 0, 605, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 0, 159, 131, 132, 136, 138,
	137, 150, 151, 148, 149, 156, 152, 153, 154, 155,
	146, 147, 140, 141, 139, 142, 144, 145, 0, 157,
	133, 135, 134, 0, 0, 0, 0, 0, 0, 0,
	604, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 159, 131, 132, 136, 138, 137, 150, 151,
	148, 149, 156, 152, 153, 154, 155, 146, 147, 140,
	141, 139, 142, 144, 145, 0, 157, 133, 135, 134,
	0, 0, 0, 0, 0, 0, 0, 558, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 159,
	131, 132, 136, 138, 137, 150, 151, 148, 149, 156,
	152, 153, 154, 155, 146, 147, 140, 141, 139, 142,
	144, 145, 0, 157, 133, 135, 134, 0, 0, 0,
	0, 0, 0, 0, 557, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 159, 131, 132, 136,
	138, 137, 150, 151, 148, 149, 156, 152, 153, 154,
	155, 146, 147, 140, 141, 139, 142, 144, 145, 0,
	157, 133, 135, 134, 0, 0, 0, 0, 0, 0,
	0, 532, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 159, 131, 132, 136, 138, 137, 150,
	151, 148, 149, 156, 152, 153, 154, 155, 146, 147,
	140, 141, 139, 142, 144, 145, 0, 157, 133, 135,
	134, 0, 0, 0, 0, 0, 0, 0, 520, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	159, 131, 132, 136, 138, 137, 150, 151, 148, 149,
	156, 152, 153, 154, 155, 146, 147, 140, 141, 139,
	142, 144, 145, 0, 157, 133, 135, 134, 0, 0,
	0, 0, 0, 0, 0, 494, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 159, 131, 132,
	136, 138, 137, 150, 151, 148, 149, 156, 152, 153,
	154, 155, 146, 147, 140, 141, 139, 142, 144, 145,
	0, 157, 133, 135, 134, 0, 0, 0, 0, 0,
	0, 0, 490, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 159, 131, 132, 136, 138, 137,
	150, 151, 148, 149, 156, 152, 153, 154, 155, 146,
	147, 140, 141, 139, 142, 144, 145, 0, 157, 133,
	135, 134, 0, 0, 0, 0, 0, 0, 0, 370,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 159, 131, 132, 136, 138, 137, 150, 151, 148,
	149, 156, 152, 153, 154, 155, 146, 147, 140, 141,
	139, 142, 144, 145, 0, 157, 133, 135, 134, 0,
	0, 0, 0, 0, 620, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 159, 131,
	132, 136, 138, 137, 150, 151, 148, 149, 156, 152,
	153, 154, 155, 146, 147, 140, 141, 139, 142, 144,
	145, 0, 157, 133, 135, 134, 0, 0, 0, 0,
	0, 618, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 0, 159, 131, 132, 136, 138,
	137, 150, 151, 148, 149, 156, 152, 153, 154, 155,
	146, 147, 140, 141, 139, 142, 144, 145, 0, 157,
	133, 135, 134, 0, 0, 0, 0, 0, 609, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 159, 131, 132, 136, 138, 137, 150, 151,
	148, 149, 156, 152, 153, 154, 155, 146, 147, 140,
	141, 139, 142, 144, 145, 0, 157, 133, 135, 134,
	0, 0, 0, 0, 0, 559, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 159,
	131, 132, 136, 138, 137, 150, 151, 148, 149, 156,
	152, 153, 154, 155, 146, 147, 140, 141, 139, 142,
	144, 145, 0, 157, 133, 135, 134, 0, 0, 0,
	0, 0, 541, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 500, 159, 131, 132, 136,
	138, 137, 150, 151, 148, 149, 156, 152, 153, 154,
	155, 146, 147, 140, 141, 139, 142, 144, 145, 0,
	157, 133, 135, 134, 0, 0, 365, 0, 504, 522,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 159, 131, 132, 136, 138, 137, 150,
	151, 148, 149, 156, 152, 153, 154, 155, 146, 147,
	140, 141, 139, 142, 144, 145, 0, 157, 133, 135,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	159, 131, 132, 136, 138, 137, 150, 151, 148, 149,
	156, 152, 153, 154, 155, 146, 147, 140, 141, 139,
	142, 144, 145, 0, 157, 135, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 159, 131, 132, 136,
	138, 137, 150, 151, 148, 149, 156, 152, 153, 154,
	155, 146, 147, 140, 141, 139, 142, 144, 145, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 159, 131, 132, 136, 138, 137, 150,
	151, 148, 149, 156, 152, 153, 154, 155, 146, 147,
	140, 141, 139, 142, 144, 145, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	132, 136, 138, 137, 150, 151, 148, 149, 156, 152,
	153, 154, 155, 146, 147, 140, 141, 139, 142, 144,
	145, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 136, 138, 137, 150, 151,
	148, 149, 156, 152, 153, 154, 155, 146, 147, 140,
	141, 139, 142, 144, 145, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 138,
	137, 150, 151, 148, 149, 156, 152, 153, 154, 155,
	146, 147, 140, 141, 139, 142, 144, 145, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 137, 150, 151, 148, 149, 156, 152, 153,
	154, 155, 146, 147, 140, 141, 139, 142, 144, 145,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 150, 151, 148, 149, 156, 152,
	153, 154, 155, 146, 147, 140, 141, 139, 142, 144,
	145, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143,
}
var yyPact = [...]int{

	-1000, -1000, 2505, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 157, 3480, 153, 150, 4622, 4622, 4622, 5, 353,
	4622, -1000, 4857, 148, 147, 146, -1000, 188, 4622, 399,
	495, 477, 345, 398, 391, 416, 490, 2846, -1000, -1000,
	-1000, 144, -1000, -1000, 231, 139, 3902, 4622, 189, 189,
	4622, 4622, 4622, 4622, 4622, -1000, -1000, 4622, 4622, 4622,
	4622, 4622, 4622, 4622, 138, 4622, -1000, 348, 4622, 4622,
	4622, -1000, -1000, -1000, 428, -1000, 240, 233, -1000, 45,
	136, 135, 4622, 4622, 133, 4622, 4622, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 297, 312, -1000,
	-43, 103, 103, 132, -1000, 196, 209, 383, 2374, 4622,
	334, 477, 4622, 4622, 31, 5798, 302, -1000, 30, 16,
	88, -1000, -1000, 76, 477, -1000, 525, 73, -1000, 5798,
	-1000, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622,
	4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622,
	4622, 4622, 4622, 4622, 4622, 4622, 4622, 45, 4502, 4622,
	189, 4622, 368, -1000, 4809, 12, -1000, 390, -1000, 388,
	-1000, 257, -1000, 123, 3480, 119, 11, 489, 4382, 4622,
	4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622,
	4622, -1000, -1000, 4622, 4622, 4622, 3, 3902, -83, 546,
	-1000, -1000, 5751, 189, 117, -1000, -1000, 428, 4622, -1000,
	-1000, 3902, -1000, 442, 442, 455, 442, 5328, 442, 442,
	442, 442, 442, 442, 442, -1000, 4622, 442, -107, 326,
	309, -1000, 335, 4262, 189, 3770, 3628, 3770, 4622, 794,
	794, 103, 226, 199, -1000, -1000, 4622, 4622, 5798, 5798,
	4622, 5798, 5798, 281, -1000, 292, 78, 326, 4622, -1000,
	-1000, 3782, -1000, 3902, 384, 383, 196, -1000, -1000, -1000,
	-1000, -1000, 5281, 116, -1000, 1, 542, 5798, 5234, -1000,
	-1000, -1000, -1000, 5, -1000, 373, -1000, 4622, -1000, 4622,
	5916, 5950, 5844, 3770, 2656, 5983, 6046, 6015, 524, 524,
	524, 455, 442, 455, 455, 664, 664, 918, 918, 918,
	918, 789, 789, 789, 789, 918, -1000, 5704, 4622, 5881,
	195, -1000, -1000, 5657, 192, -1000, 521, 2243, -1000, -1000,
	-1000, 112, 257, 246, 265, 183, 4622, -1000, 4622, -1000,
	-1000, 3770, 189, 3770, 3770, 3770, 3770, 3770, 3770, 3770,
	3770, 3770, 3770, 3770, 3770, 5187, -84, 5610, 103, -1000,
	4622, -1000, 80, 519, 3902, 4142, -1000, 3902, 5140, -85,
	-1000, 79, -1000, -1000, -1000, -1000, 400, 377, 5563, 200,
	159, 4622, -86, 103, -1000, -1000, 4622, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 103, -1000, -1000, -1000, -1000, 5, 4622,
	4622, 3, 5, 167, -1000, 5798, 5093, 5046, -1000, -1000,
	-1000, 5516, -1000, 163, -1000, 5798, 4622, 71, -1000, 196,
	3351, 4622, 4622, 4622, 223, -1000, -1000, 101, 5798, -1000,
	4622, 5881, -40, 189, 236, 368, 3221, 4622, -1000, 97,
	273, 246, -1000, 265, -1000, -1000, 4999, 4952, 2112, -1000,
	3091, -1000, -1000, -1000, 5469, 515, 4622, -1000, 5798, 189,
	96, 67, -1000, -1000, -1000, -87, -1000, -1000, 347, -1000,
	-1000, -1000, -1000, 4622, -1000, 3770, -1000, -1000, 5422, -1000,
	-1000, -95, 5375, -1000, -1000, -1000, 4622, -1000, -1000, -1000,
	-1000, 4022, 5798, -1000, -1000, -1000, -1000, 4904, -44, 5798,
	-1000, -46, -51, 273, 5881, -1000, -1000, 94, -1000, 189,
	86, 3902, -1000, -1000, -1000, -1000, 5798, 301, 273, 55,
	538, -1000, 476, -1000, -1000, 275, -1000, -1000, -1000, -1000,
	182, 537, -1000, 329, 3480, 486, -54, -1000, -1000, -1000,
	4622, 3770, -1000, 3902, 515, -1000, -1000, 779, -1000, -1000,
	-1000, -1000, -1000, 1981, -55, 4622, 152, -1000, 367, -1000,
	54, 2831, 236, -1000, 3902, -98, 1850, -1000, -1000, 84,
	178, 52, 287, 273, 207, -1000, -1000, 177, -1000, 265,
	-1000, -1000, 370, 315, 426, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2668, 3770, 47, 65,
	-58, -1000, 42, -1000, 4622, 43, 122, -59, 352, 287,
	-1000, -1000, -1000, 36, 6, -1000, -60, 265, -1000, 485,
	485, 82, -1000, 371, -1000, -1000, 142, -1000, 64, -1000,
	516, 3643, -1000, 2668, 515, -1000, -1000, 2961, 4762, -1000,
	-1000, -1000, -1000, -61, 485, 1719, 2831, -1000, -1000, 410,
	-1000, 1588, -1000, 273, -1000, 409, 512, 48, -1000, -1000,
	370, -1000, 4622, 63, -1000, 511, -1000, -1000, -1000, -1000,
	-1000, 2668, 2668, -1000, -1000, -66, -1000, -42, 265, -1000,
	176, -1000, 174, 91, -1000, -1000, 366, 4622, -1000, -1000,
	5798, -1000, 3643, 4622, 1457, 2668, 2668, 165, -1000, 162,
	-1000, -1000, -1000, -1000, 409, -1000, 5798, -1000, -1000, 5798,
	-81, -1000, -1000, 1326, 1195, -1000, -1000, -1000, 1064, 933,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 667, 665, 27, 566, 50, 10, 556, 662, 661,
	657, 656, 35, 0, 75, 15, 31, 56, 36, 20,
	655, 26, 653, 42, 41, 7, 39, 651, 282, 354,
	214, 649, 646, 645, 5, 644, 44, 37, 643, 49,
	45, 642, 641, 639, 638, 637, 117, 634, 633, 1,
	22, 631, 14, 9, 630, 628, 624, 622, 621, 619,
	618, 617, 616, 613, 612, 34, 25, 609, 607, 605,
	67, 8, 604, 603, 601, 32, 600, 598, 597, 596,
	594, 11, 593, 441, 591, 590, 583, 33, 38, 581,
	574, 573, 28, 24, 13, 12, 19, 519, 46, 3,
	572, 571, 418, 570, 567, 558, 2, 4,
}
var yyR1 = [...]int{

	0, 1, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 101,
	101, 101, 101, 101, 101, 101, 98, 98, 48, 48,
	5, 5, 6, 6, 6, 2, 2, 2, 2, 72,
	72, 49, 49, 9, 9, 9, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	51, 51, 64, 64, 11, 11, 63, 63, 16, 4,
	103, 103, 104, 104, 7, 7, 91, 91, 97, 97,
	8, 18, 18, 66, 66, 15, 15, 15, 15, 54,
	54, 53, 53, 10, 10, 58, 58, 58, 58, 50,
	50, 50, 50, 50, 55, 55, 69, 69, 68, 68,
	57, 57, 56, 56, 65, 65, 76, 76, 19, 19,
	20, 20, 95, 95, 93, 93, 93, 94, 94, 70,
	70, 77, 77, 21, 21, 74, 74, 23, 73, 73,
	24, 24, 52, 52, 59, 59, 79, 79, 89, 89,
	105, 105, 90, 90, 96, 96, 96, 96, 96, 96,
	67, 67, 25, 25, 84, 84, 71, 12, 62, 62,
	26, 75, 75, 78, 78, 27, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 99, 106, 107, 102, 102, 81, 81, 82,
	82, 34, 34, 35, 35, 35, 35, 28, 28, 29,
	29, 32, 32, 61, 61, 61, 80, 80, 39, 39,
	39, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 40, 40, 40,
	13, 13, 14, 14, 38, 41, 41, 41, 42, 42,
	42, 43, 43, 43, 43, 43, 43, 17, 17, 17,
	30, 30, 30, 44, 44, 45, 45, 45, 45, 45,
	45, 36, 36, 36, 37, 37, 37, 87, 88, 88,
	86, 86, 85, 85, 85, 85, 85, 85, 83, 83,
	83, 83, 46, 46, 46, 46, 46, 46, 46, 47,
	47, 47, 47, 31, 31, 31, 31, 31, 31, 31,
	60, 60, 92,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 1, 3,
	1, 2, 0, 1, 1, 1, 3, 1, 1, 5,
	7, 9, 5, 3, 3, 3, 3, 3, 3, 1,
	2, 5, 7, 9, 5, 1, 6, 3, 3, 2,
	0, 9, 1, 3, 0, 4, 1, 3, 1, 13,
	0, 1, 0, 1, 9, 8, 1, 2, 1, 1,
	6, 0, 2, 0, 2, 1, 2, 4, 3, 1,
	4, 1, 4, 1, 4, 3, 4, 4, 5, 0,
	5, 5, 4, 4, 1, 4, 5, 6, 1, 3,
	6, 7, 3, 6, 1, 0, 1, 3, 4, 6,
	0, 1, 1, 2, 1, 1, 1, 0, 2, 2,
	3, 1, 3, 1, 2, 3, 1, 1, 3, 1,
	1, 3, 2, 0, 3, 4, 1, 3, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 4, 3, 1, 4, 4, 3, 1,
	1, 0, 1, 3, 1, 3, 6, 5, 3, 4,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	5, 4, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 3, 2, 1, 2, 4, 2,
	13, 14, 1, 0, 0, 0, 1, 0, 4, 3,
	1, 1, 2, 2, 4, 4, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 0, 1, 4, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 3, 1, 1, 1, 3, 3,
	1, 1, 0, 1, 1, 1, 3, 1, 1, 3,
	1, 1, 4, 4, 4, 4, 1, 1, 1, 3,
	1, 4, 2, 3, 3, 1, 4, 4, 3, 3,
	3, 1, 3, 1, 1, 3, 1, 1, 0, 1,
	3, 1, 3, 1, 4, 2, 6, 4, 2, 2,
	1, 2, 1, 4, 3, 3, 3, 6, 3, 1,
	1, 2, 1, 4, 4, 2, 2, 4, 2, 2,
	1, 3, 1,
}
var yyChk = [...]int{

	-1000, -1, -48, -2, -3, -4, -7, -8, 158, -68,
	-56, 103, 102, 105, 112, 116, 117, 121, 128, 76,
	82, 87, -13, 130, 107, 109, 162, 122, 125, 118,
	85, -99, -91, 134, 135, -69, -57, -17, -22, 119,
	-97, 101, -43, -44, -41, 140, 69, 71, 58, 59,
	49, 50, 55, 57, 160, -27, -31, 60, 61, 62,
	63, 64, 65, 66, 100, 67, -33, 164, 13, 14,
	16, 77, 78, -30, -40, -35, -28, -38, -39, 70,
	131, 132, 4, 5, 6, 7, 8, 83, 84, 92,
	93, 94, 96, 97, 98, 99, 95, 149, 165, 86,
	166, -6, -42, 141, 89, -5, 154, 155, -49, 160,
	-3, -99, 160, 160, -14, -13, 76, 85, -14, -14,
	-74, -23, -30, -73, -99, -24, 86, -62, -26, -13,
	162, 33, 34, 10, 12, 11, 35, 37, 36, 51,
	49, 50, 52, 68, 53, 54, 47, 48, 40, 41,
	38, 39, 43, 44, 45, 46, 42, 56, 30, 32,
	160, 160, 160, 158, -13, 85, 31, -102, 37, 134,
	-97, 85, 85, 73, 74, 73, 75, 74, 17, 18,
	19, 20, 29, 21, 22, 23, 24, 25, 26, 27,
	28, 58, 59, 160, 69, 158, 139, 160, -87, -86,
	-88, -85, -13, 37, 140, -13, -17, -40, 160, -39,
	76, 69, -17, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -32, 160, -13, -61, 88,
	-83, -46, 86, 151, 152, -13, -13, -13, 69, 153,
	153, -29, -28, -45, -6, -30, 160, 160, -13, -13,
	160, -13, -13, 88, 150, -83, -83, 88, 158, -30,
	-70, 160, -70, 160, 155, 155, -5, -9, 159, -3,
	-4, -7, -13, 103, -102, -75, -78, -13, -13, 162,
	162, 162, 162, 9, 162, 9, -102, 17, 162, 9,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -29, -13, 31, -13,
	-63, -16, -17, -13, -72, -12, 85, -49, 162, 162,
	85, -106, 85, -18, 137, -106, 160, -3, 160, 162,
	31, -13, 37, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -14, -13, -37, 85,
	158, -30, -87, 163, 9, 15, -17, 160, -13, -87,
	161, -14, 164, -46, -46, 88, 69, 139, -13, 90,
	-17, 15, -14, -36, -98, -30, 158, 85, -101, -100,
	76, 77, 78, 79, 80, 81, 4, 5, 6, 7,
	8, 10, 11, 12, 56, 70, 71, 100, 101, 73,
	74, 75, 82, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 117, 118, 119, 120, 121, 13,
	14, 140, 112, 113, 114, 115, 116, 141, 142, 137,
	138, 154, 135, 136, 134, 95, 96, 98, 97, 92,
	93, 94, 99, -36, -98, -30, -80, -70, 153, 69,
	158, 139, 153, -60, -92, -13, -13, -13, 150, 150,
	165, -13, 161, -77, -21, -13, 156, -87, 85, -5,
	161, 160, 162, 9, 161, -23, -24, -106, -13, -26,
	31, -13, 161, 9, 111, 9, 161, 17, 159, -106,
	160, -18, -66, 138, -6, 158, -13, -13, -49, -17,
	161, 163, 159, -70, -13, 161, 17, -88, -13, 37,
	140, -87, 161, 163, 161, -47, 85, 91, 50, 86,
	85, 159, 159, 69, 159, -13, 163, -70, -13, -70,
	-30, -14, -13, -37, -30, 161, 9, 161, 161, 159,
	161, 9, -13, 161, -55, -3, 31, -13, -75, -13,
	-58, 158, 31, 160, -13, 162, -16, -15, -17, 37,
	140, 69, -12, -10, -3, 31, -13, -51, 160, -65,
	-76, -19, -20, -95, -93, 30, 141, 142, -6, -66,
	-106, -79, -6, -52, 161, 161, 75, -3, 31, 159,
	17, -13, -17, 160, 161, 163, 91, -13, 159, 163,
	159, -92, -21, -49, 161, 162, -50, 162, -50, 162,
	-65, 161, 15, -17, 160, -87, -49, -106, -11, 123,
	124, -65, 161, 9, -103, 37, -93, -106, 158, 9,
	159, -59, -89, -105, -90, 129, -96, 81, 80, 79,
	76, 77, 78, -3, 31, 162, -49, -13, -87, 163,
	104, 162, -75, 159, 114, 115, -50, 113, -50, 161,
	-53, -3, 31, -15, -87, 163, 110, 160, 158, 161,
	-81, 126, -19, -104, 156, 158, -52, -6, -67, -25,
	86, 120, -96, -49, 161, 159, 162, 161, -13, 31,
	162, 159, 162, 113, -81, -49, 161, 161, 162, -64,
	-6, -49, -94, 31, -94, 160, 86, -52, 159, 162,
	9, -106, 17, -84, -71, -98, -54, -3, 31, 31,
	162, -49, -49, 162, -94, 108, -53, 86, 35, 159,
	-107, -95, -107, -82, -34, 86, 37, 17, 159, -25,
	-13, 162, 9, 17, -49, -49, -49, -107, 162, 161,
	-6, 158, 158, 161, 9, 86, -13, -106, -71, -13,
	106, 158, 158, -49, -49, -34, -106, 162, -49, -49,
	159, 159, 159, 159, -107, -107, -107,
}
var yyDef = [...]int{

	79, -2, 1, 78, 85, 86, 87, 88, 92, 97,
	98, 0, 0, 0, 0, 362, 362, 362, 0, 327,
	0, 109, 0, 0, 0, 0, 115, 0, 0, 0,
	80, 315, 0, 0, 0, 168, 0, -2, 361, 312,
	136, 0, -2, 378, 364, 0, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 293, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 303, 333, 0, 306,
	0, 138, 139, 371, 356, 376, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 0, 0, 380,
	0, -2, 0, 0, 340, 82, 0, 0, 0, 0,
	0, 315, 231, 0, 0, 363, 327, 80, 0, 0,
	0, 196, 197, 0, 315, 199, 200, 0, 229, 230,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 119, 313, 316, 0,
	137, 141, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 255, 0, 362, 0, 0, 398, 0, 397,
	401, 399, 403, 0, 0, 240, -2, 0, 0, -2,
	327, 398, -2, 274, 275, 276, 277, 0, 294, 295,
	296, 297, 298, 299, 300, 301, 362, 302, 0, 334,
	335, 410, 412, 0, 0, 305, 307, 309, 362, 0,
	0, 336, 329, 330, 328, 385, 0, 0, 425, 426,
	0, 428, 429, 0, 352, 0, 0, 0, 0, 382,
	323, 0, 326, 398, 0, 0, 84, 91, 96, 93,
	94, 95, 0, 0, 313, 0, 232, 234, 0, 103,
	104, 105, 106, 0, 107, 0, 313, 0, 108, 0,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 287, 0, 0, 292,
	0, 126, -2, 0, 0, 90, 0, 0, 117, 118,
	313, 0, 141, 143, 0, 0, 0, 169, 0, 172,
	92, 238, 0, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 0, 379, 394,
	0, 396, 0, 339, 398, 0, -2, 398, 0, 0,
	-2, 0, 304, 411, 408, 409, 0, 0, 0, 0,
	365, 0, 0, 0, -2, -2, 0, 76, 77, 69,
	70, 71, 72, 73, 74, 75, 2, 3, 4, 5,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 0, -2, -2, 235, 337, 0, 362,
	0, 0, 0, 0, 430, 432, 0, 0, 351, 354,
	353, 0, 189, 0, 191, 193, 0, 0, 81, 83,
	0, 0, 231, 0, 0, 195, 198, 0, 201, 228,
	0, 291, 0, 0, 0, 0, 0, 0, 120, 0,
	-2, 143, 313, 0, 142, 203, 0, 0, 0, -2,
	0, 372, 374, 375, 0, 0, 0, 400, 402, 0,
	0, 0, -2, 339, 332, 0, 419, 420, 0, 422,
	414, 415, 416, 0, 418, 308, 373, 324, 0, 325,
	389, 0, 0, 388, 390, 423, 0, 424, 427, 381,
	190, 0, 194, 338, 99, 164, 92, 0, 0, 233,
	102, 159, 159, -2, 290, 111, 127, 0, -2, 0,
	0, 398, 89, 114, 153, 92, 313, 124, -2, 0,
	174, 176, 130, 181, 182, 0, 184, 185, 186, 313,
	0, 144, 206, 210, 0, 0, 0, 166, 92, 395,
	0, 237, -2, 398, 407, 413, 421, 0, 392, 386,
	387, 431, 192, 0, 0, 231, 0, 159, 0, 159,
	0, 0, 0, -2, 398, 0, 0, 227, 116, 0,
	0, 0, 317, 180, 132, 131, 183, 0, 203, 0,
	140, 202, 0, 0, -2, 209, 212, 214, 215, 216,
	217, 218, 219, 167, 92, 173, 170, 236, 0, 0,
	0, 100, 0, 155, 0, 0, 0, 0, 0, 317,
	112, 151, 92, 0, 0, -2, 0, 0, 92, 187,
	187, 0, 177, 0, 133, 203, 210, 207, 0, 221,
	313, 0, 213, 171, 406, 417, 165, 0, 0, 92,
	92, 156, 157, 0, 187, 0, 0, 147, 154, 0,
	122, 0, 314, 0, 314, 0, 178, 210, 135, 204,
	0, 222, 0, 0, 225, 0, 101, 149, 92, 92,
	92, 162, 163, 158, 314, 0, 113, 0, 0, 125,
	0, 188, 0, 0, 320, 321, 0, 0, 134, 220,
	313, 205, 0, 0, 0, 160, 161, 0, 152, 0,
	123, 92, 92, 318, 0, 322, 179, 223, 224, 313,
	0, 92, 92, 0, 0, 319, 226, 150, 0, 0,
	314, 314, 314, 121, 129, 310, 311,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	160, 161, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 162,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 163, 36, 3, 164, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 158, 35, 159, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:239
		{
			yyVAL.program = &ast.Program{Statements: yyDollar[1].stmts}
			if l, ok := yylex.(*LexerWrapper); ok {
				l.program = yyVAL.program
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:263
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:264
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:268
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:269
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:274
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:275
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, nil, yyDollar[1].expr, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:280
		{
			yyVAL.expr = ast.NewNamespaceExpression(yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:281
		{
			yyVAL.expr = ast.NewNamespaceExpression(nil, yyDollar[1].tok, yyDollar[2].expr)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:285
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:288
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:376
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:381
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:383
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:389
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:399
		{
			yyVAL.stmt = ast.NewBlockStatement(yyDollar[2].stmts...)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:401
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:403
		{
			yyVAL.stmt = ast.NewWhileStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:405
		{
			yyVAL.stmt = ast.NewDoWhileStatement(yyDollar[1].tok, yyDollar[5].expr, yyDollar[2].stmt)
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:407
		{
			yyVAL.stmt = ast.NewForStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].exprs, yyDollar[7].exprs, yyDollar[9].stmt)
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:409
		{
			yyVAL.stmt = ast.NewSwitchStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:410
		{
			yyVAL.stmt = ast.NewBreakStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:411
		{
			yyVAL.stmt = ast.NewContinueStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:412
		{
			yyVAL.stmt = ast.NewReturnStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:413
		{
			yyVAL.stmt = ast.NewGlobalStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:414
		{
			yyVAL.stmt = ast.NewStaticStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:415
		{
			yyVAL.stmt = ast.NewEchoStatement(yyDollar[1].tok, yyDollar[2].exprs)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:416
		{
			yyVAL.stmt = ast.NewInlineHTMLStatement(yyDollar[1].tok)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:417
		{
			yyVAL.stmt = ast.NewExpressionStatement(yyDollar[1].expr)
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:418
		{
			yyVAL.stmt = ast.NewUnsetStatement(yyDollar[1].tok, yyDollar[3].exprs)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:420
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, nil, yyDollar[5].expr, yyDollar[7].stmt)
		}
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:422
		{
			yyVAL.stmt = ast.NewForeachStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr, yyDollar[9].stmt)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:424
		{
			yyVAL.stmt = ast.NewDeclareStatement(yyDollar[1].tok, yyDollar[3].exprs, yyDollar[5].stmt)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:425
		{
			yyVAL.stmt = ast.NewEmptyStatement()
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:427
		{
			yyVAL.stmt = ast.NewTryStatement(yyDollar[1].tok, yyDollar[3].stmts, yyDollar[5].stmts, yyDollar[6].stmt)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:428
		{
			yyVAL.stmt = ast.NewThrowStatement(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:429
		{
			yyVAL.stmt = ast.NewGotoStatement(yyDollar[1].tok, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:430
		{
			yyVAL.stmt = ast.NewLabelStatement(ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal))
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:435
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 121:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:437
		{
			yyVAL.stmts = append(yyVAL.stmts, ast.NewCatchListStatement(yyDollar[2].tok, yyDollar[4].exprs, ast.NewVariableLiteral(yyDollar[5].tok, yyDollar[5].tok.Literal), yyDollar[8].stmts))
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:441
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:442
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:446
		{
			yyVAL.stmt = nil
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:447
		{
			yyVAL.stmt = ast.NewFinallyStatement(yyDollar[1].tok, yyDollar[3].stmts)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:451
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:452
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 129:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:462
		{
			yyVAL.stmt = ast.NewFunctionStatement(yyDollar[1].tok, yyDollar[2].num, yyDollar[3].tok, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[11].stmts)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:466
		{
			yyVAL.num = 0
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:467
		{
			yyVAL.num = 1
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:471
		{
			yyVAL.num = 0
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:472
		{
			yyVAL.num = 1
		}
	case 134:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.go.y:477
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement(yyDollar[1].exprs, yyDollar[2].tok, yyDollar[3].tok, yyDollar[4].expr, yyDollar[5].exprs, yyDollar[8].stmts)
		}
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.go.y:479
		{
			yyVAL.stmt = ast.NewClassDeclarationStatement([]ast.Expression{}, yyDollar[1].tok, yyDollar[2].tok, yyDollar[3].expr, yyDollar[4].exprs, yyDollar[7].stmts)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:483
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:484
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:488
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:489
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:495
		{
			yyVAL.stmt = ast.NewTraitDeclarationStatement(yyDollar[1].tok, yyDollar[2].tok, yyDollar[5].stmts)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:507
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:508
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:519
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:520
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:524
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:525
		{
			yyVAL.expr = ast.NewAmpersandLiteral(yyDollar[2].expr)
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:526
		{
			yyVAL.expr = ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:527
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:532
		{
			yyVAL.stmt = ast.NewAltForStatement(yyDollar[2].stmts)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:537
		{
			yyVAL.stmt = ast.NewAltForeachStatement(yyDollar[2].stmts)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:542
		{
			yyVAL.stmt = ast.NewAltDeclareStatement(yyDollar[2].stmts)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:546
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:547
		{
			yyVAL.stmt = ast.NewSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:548
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[2].stmts, false)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:549
		{
			yyVAL.stmt = ast.NewAltSwitchCaseListStatement(yyDollar[3].stmts, true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:553
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:555
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, false))
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:557
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, yyDollar[3].expr, yyDollar[5].stmts, true))
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:559
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, false))
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:561
		{
			yyVAL.stmts = append(yyDollar[1].stmts, ast.NewCaseListStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, true))
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:565
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:566
		{
			yyVAL.stmt = ast.NewAltWhileStatement(yyDollar[3].tok, yyDollar[2].stmts...)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:571
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[5].stmt, nil)
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:573
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[6].stmt, yyVAL.stmt)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:579
		{
			yyVAL.stmt = ast.NewIfStatement(yyDollar[2].tok, nil, yyDollar[3].stmt, yyVAL.stmt)
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:585
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[1].tok, yyDollar[3].expr, yyDollar[6].stmts, nil)
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.go.y:587
		{
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, yyDollar[4].expr, yyDollar[7].stmts, yyVAL.stmt)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:592
		{
			stmt := yyDollar[1].stmt
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[2].tok, nil, nil, stmt)
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:597
		{
			stmt := ast.NewAltIfStatement(yyDollar[2].tok, nil, yyDollar[4].stmts, yyVAL.stmt)
			yyVAL.stmt = ast.NewAltIfStatement(yyDollar[5].tok, nil, nil, stmt)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:604
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:605
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:610
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:612
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:617
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), nil)
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:619
		{
			yyVAL.expr = ast.NewParameterExpression(yyDollar[1].expr, yyDollar[2].num, yyDollar[3].num, ast.NewVariableLiteral(yyDollar[4].tok, yyDollar[4].tok.Literal), yyDollar[6].expr)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:623
		{
			yyVAL.expr = nil
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:624
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:628
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:629
		{
			yyVAL.expr = ast.NewOptionalTypeExpression(yyDollar[2].expr)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:633
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:634
		{
			yyVAL.expr = ast.NewTypeExpression(yyDollar[1].tok)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:635
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:639
		{
			yyVAL.expr = nil
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:640
		{
			yyVAL.expr = ast.NewReturnTypeExpression(yyDollar[2].expr)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:644
		{
			yyVAL.expr = ast.NewArgumentListExpression()
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:645
		{
			yyVAL.expr = ast.NewArgumentListExpression(yyDollar[2].exprs...)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:650
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:652
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:656
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:657
		{
			yyVAL.expr = ast.NewArgumentExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:661
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:662
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:667
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:671
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:672
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:676
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:677
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:682
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmt)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:684
		{
			yyVAL.stmts = []ast.Statement{}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:689
		{
			yyVAL.stmt = ast.NewClassStatement(yyDollar[1].exprs, yyDollar[2].exprs)
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:691
		{
			yyVAL.stmt = ast.NewClassStatement(append(yyDollar[1].exprs, ast.NewConstantEncapsedStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal)), yyDollar[3].exprs)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:701
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:702
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:758
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:759
		{
			yyVAL.exprs = []ast.Expression{ast.NewVarLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:763
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:765
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:769
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:771
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:775
		{
			yyVAL.expr = ast.NewPublicLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:776
		{
			yyVAL.expr = ast.NewProtectedLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:777
		{
			yyVAL.expr = ast.NewPrivateLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:778
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:779
		{
			yyVAL.expr = ast.NewAbstractLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:780
		{
			yyVAL.expr = ast.NewFinalLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:784
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:785
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:790
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:792
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:796
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:797
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:801
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:805
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[3].expr, false)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:809
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:810
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:818
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:819
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:823
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:824
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:841
		{
			yyVAL.expr = ast.NewNewExpression(yyDollar[1].tok, yyDollar[2].expr, yyDollar[3].expr)
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:848
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...), yyDollar[6].expr, false)
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:850
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...), yyDollar[5].expr, false)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:852
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:854
		{
			yyVAL.expr = ast.NewAssignExpression(ast.Equal, yyDollar[1].expr, yyDollar[4].expr, true)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:855
		{
			yyVAL.expr = ast.NewCloneExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:857
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PlusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:859
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MinusEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:861
		{
			yyVAL.expr = ast.NewAssignExpression(ast.MulEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:863
		{
			yyVAL.expr = ast.NewAssignExpression(ast.PowEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:865
		{
			yyVAL.expr = ast.NewAssignExpression(ast.DivEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:867
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ConcatEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:869
		{
			yyVAL.expr = ast.NewAssignExpression(ast.ModEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:871
		{
			yyVAL.expr = ast.NewAssignExpression(ast.AndEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:873
		{
			yyVAL.expr = ast.NewAssignExpression(ast.QrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:875
		{
			yyVAL.expr = ast.NewAssignExpression(ast.XorEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:877
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SlEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:879
		{
			yyVAL.expr = ast.NewAssignExpression(ast.SrEqual, yyDollar[1].expr, yyDollar[3].expr, false)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:880
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PostInc, yyDollar[1].expr)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:881
		{
			yyVAL.expr = ast.NewIncrementExpression(ast.PreInc, yyDollar[2].expr)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:882
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PostDec, yyDollar[1].expr)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:883
		{
			yyVAL.expr = ast.NewDecrementExpression(ast.PreDec, yyDollar[2].expr)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:885
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:887
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BooleanAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:889
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:891
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:893
		{
			yyVAL.expr = ast.NewInfixExpression(ast.LogicalXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:894
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwOr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:895
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwAnd, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:896
		{
			yyVAL.expr = ast.NewInfixExpression(ast.BwXor, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:897
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:898
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Add, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:899
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sub, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:900
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mul, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:901
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Pow, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:902
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Div, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:903
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Mod, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:904
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sl, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:905
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Sr, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:906
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryPlus, yyDollar[2].expr)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:907
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.UnaryMinus, yyDollar[2].expr)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:908
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BoolNot, yyDollar[2].expr)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:909
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.BwNot, yyDollar[2].expr)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:911
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:913
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotIdentical, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:915
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:917
		{
			yyVAL.expr = ast.NewInfixExpression(ast.IsNotEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:919
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Smaller, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:921
		{
			yyVAL.expr = ast.NewInfixExpression(ast.SmallerOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:923
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:925
		{
			yyVAL.expr = ast.NewInfixExpression(ast.GreaterOrEqual, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:927
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Spaceship, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:929
		{
			yyVAL.expr = ast.NewInfixExpression(ast.InstanceOf, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:930
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:931
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.go.y:933
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:935
		{
			yyVAL.expr = ast.NewTernaryOperatorExpression(yyDollar[1].expr, nil, yyDollar[4].expr)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:937
		{
			yyVAL.expr = ast.NewInfixExpression(ast.Coalesce, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:938
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:939
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:940
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:941
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:942
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:943
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:944
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:945
		{
			yyVAL.expr = ast.NewCastExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:946
		{
			yyVAL.expr = ast.NewExitExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:947
		{
			yyVAL.expr = ast.NewPrefixExpression(ast.Silence, yyDollar[2].expr)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:949
		{
			yyVAL.expr = ast.NewBackticksExpression(yyDollar[2].exprs...)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:950
		{
			yyVAL.expr = ast.NewPrintExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:951
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, nil)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:952
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:953
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, ast.NewArrayPairExpression(yyDollar[2].expr, yyDollar[4].expr, false))
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:954
		{
			yyVAL.expr = ast.NewYieldExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 310:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.go.y:957
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[1].tok, yyDollar[2].num, yyDollar[5].exprs, yyDollar[7].expr, yyDollar[8].expr, yyDollar[11].stmts, false)
		}
	case 311:
		yyDollar = yyS[yypt-14 : yypt+1]
		//line parser.go.y:960
		{
			yyVAL.expr = ast.NewFunctionExpression(yyDollar[2].tok, yyDollar[3].num, yyDollar[6].exprs, yyDollar[8].expr, yyDollar[9].expr, yyDollar[12].stmts, true)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:964
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:968
		{
			yyVAL.expr = nil
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:972
		{
			yyVAL.expr = nil
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:976
		{
			yyVAL.num = 0
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:977
		{
			yyVAL.num = 1
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:981
		{
			yyVAL.expr = nil
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:982
		{
			yyVAL.expr = ast.NewLexicalVariableListExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:986
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:987
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:991
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:992
		{
			yyVAL.expr = ast.NewAmpersandLiteral(ast.NewVariableLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:997
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:999
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1001
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.StaticCall, yyDollar[1].expr, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1003
		{
			yyVAL.expr = ast.NewFunctionCallExpression(ast.Call, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1007
		{
			yyVAL.expr = ast.NewStaticLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1008
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1017
		{
			yyVAL.expr = nil
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1018
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1023
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1024
		{
			yyVAL.exprs = []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1025
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1029
		{
			yyVAL.expr = nil
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1034
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Long, yyDollar[3].exprs...)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1035
		{
			yyVAL.expr = ast.NewArrayExpression(ast.Short, yyDollar[2].exprs...)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1036
		{
			yyVAL.expr = ast.NewConstantEncapsedStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1040
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1041
		{
			yyVAL.expr = ast.NewDoubleLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1042
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1043
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1044
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1045
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1046
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1047
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1048
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1049
		{
			yyVAL.expr = ast.NewMagicConstLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1050
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1051
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[2].tok)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1052
		{
			yyVAL.expr = ast.NewEncapsListExpression(yyDollar[2].exprs...)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1053
		{
			yyVAL.expr = ast.NewHeredocExpression(yyDollar[1].tok, yyDollar[3].tok, yyDollar[2].exprs...)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1054
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1055
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1059
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1061
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1063
		{
			yyVAL.expr = ast.NewConstantExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1067
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1072
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1073
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1077
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1081
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1082
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1087
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1088
		{
			yyVAL.expr = ast.NewDereferencableExpression(ast.Wrapped, yyDollar[2].expr)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1096
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1098
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1100
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1102
		{
			yyVAL.expr = ast.NewCallableVariableExpression(ast.Prop, yyDollar[1].expr, []ast.Expression{yyDollar[3].expr, yyDollar[4].expr}...)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1108
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1110
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1112
		{
			yyVAL.expr = ast.NewVariableExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1116
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1117
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.CurlyOpen, yyDollar[3].expr)
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1118
		{
			yyVAL.expr = ast.NewSimpleVariableExpression(ast.Var, yyDollar[2].expr)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1123
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1125
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1130
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1132
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Dim, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1134
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Curly, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1136
		{
			yyVAL.expr = ast.NewNVariableExpression(ast.Prop, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1138
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1140
		{
			yyVAL.expr = ast.NewStaticMemberExpression(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1145
		{
			yyVAL.expr = ast.NewMemberNameExpression(yyDollar[2].expr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1150
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1151
		{
			yyVAL.expr = ast.NewPropertyNameExpression(yyDollar[2].expr)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1157
		{ /* allow single trailing comma */
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.go.y:1161
		{
			yyVAL.exprs = []ast.Expression{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1162
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1167
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].exprs...)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1169
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1174
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[3].expr, false)}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1176
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1178
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, yyDollar[4].expr, true)}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1180
		{
			yyVAL.exprs = []ast.Expression{ast.NewAmpersandLiteral(yyDollar[2].expr)}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1182
		{
			yyVAL.exprs = []ast.Expression{ast.NewArrayPairExpression(yyDollar[1].expr, ast.NewListExpression(yyDollar[3].tok, yyDollar[5].exprs...), false)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1184
		{
			yyVAL.exprs = []ast.Expression{ast.NewListExpression(yyDollar[1].tok, yyDollar[3].exprs...)}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1189
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1191
		{
			yyVAL.exprs = append(yyDollar[1].exprs, ast.NewEncapsedAndWhitespaceLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1193
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1195
		{
			yyVAL.exprs = append(yyVAL.exprs, []ast.Expression{ast.NewEncapsedAndWhitespaceLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal), yyDollar[2].expr}...)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1200
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1202
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Dim, yyDollar[3].expr)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1204
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.Prop, ast.NewStringLiteral(yyDollar[3].tok, yyDollar[3].tok.Literal))
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1206
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, yyDollar[2].expr)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1208
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DollarOpenCurlyBraces, ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal))
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.go.y:1210
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.DimInDollarOpenCurlyBraces, []ast.Expression{ast.NewStringLiteral(yyDollar[2].tok, yyDollar[2].tok.Literal), yyDollar[4].expr}...)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1211
		{
			yyVAL.expr = ast.NewEncapsVarExpression(yyDollar[1].tok, yyDollar[1].tok.Literal, ast.CurlyOpen, yyDollar[2].expr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1215
		{
			yyVAL.expr = ast.NewStringLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1216
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1217
		{
			yyVAL.expr = ast.NewIntegerLiteral(yyDollar[2].tok, "-"+yyDollar[2].tok.Literal)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1218
		{
			yyVAL.expr = ast.NewVariableLiteral(yyDollar[1].tok, yyDollar[1].tok.Literal)
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1223
		{
			yyVAL.expr = ast.NewIssetExpression(yyDollar[1].tok, yyDollar[3].exprs...)
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1224
		{
			yyVAL.expr = ast.NewEmptyExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1226
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1228
		{
			yyVAL.expr = ast.NewIncludeExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.go.y:1230
		{
			yyVAL.expr = ast.NewEvalExpression(yyDollar[1].tok, yyDollar[3].expr)
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1232
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.go.y:1234
		{
			yyVAL.expr = ast.NewRequireExpression(yyDollar[1].tok, yyDollar[2].expr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1238
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.go.y:1240
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.go.y:1244
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
